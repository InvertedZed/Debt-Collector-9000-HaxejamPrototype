// Generated by Haxe 4.3.6
#ifndef INCLUDED_flixel_addons_input__FlxControlInputType_FlxControlInputType_Impl_
#define INCLUDED_flixel_addons_input__FlxControlInputType_FlxControlInputType_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(flixel,addons,input,FlxControlInputTypeRaw)
HX_DECLARE_CLASS3(flixel,addons,input,FlxControlMappedInput)
HX_DECLARE_CLASS3(flixel,addons,input,FlxGamepadInputType)
HX_DECLARE_CLASS3(flixel,addons,input,FlxKeyInputType)
HX_DECLARE_CLASS3(flixel,addons,input,FlxMouseInputType)
HX_DECLARE_CLASS3(flixel,addons,input,FlxVirtualPadInputType)
HX_DECLARE_CLASS4(flixel,addons,input,_FlxControlInputType,FlxControlInputType_Impl_)
HX_DECLARE_CLASS3(flixel,input,actions,FlxInputDevice)
HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepad)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace flixel{
namespace addons{
namespace input{
namespace _FlxControlInputType{


class HXCPP_CLASS_ATTRIBUTES FlxControlInputType_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxControlInputType_Impl__obj OBJ_;
		FlxControlInputType_Impl__obj();

	public:
		enum { _hx_ClassId = 0x1f48e664 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_"); }

		inline static ::hx::ObjectPtr< FlxControlInputType_Impl__obj > __new() {
			::hx::ObjectPtr< FlxControlInputType_Impl__obj > __this = new FlxControlInputType_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< FlxControlInputType_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			FlxControlInputType_Impl__obj *__this = (FlxControlInputType_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxControlInputType_Impl__obj), false, "flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_"));
			*(void **)__this = FlxControlInputType_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxControlInputType_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxControlInputType_Impl_",99,5a,cf,8b); }

		static void __boot();
		static  ::flixel::addons::input::FlxControlInputTypeRaw fromKey(int id);
		static ::Dynamic fromKey_dyn();

		static  ::flixel::addons::input::FlxControlInputTypeRaw fromKeyList(::Array< int > ids);
		static ::Dynamic fromKeyList_dyn();

		static  ::flixel::addons::input::FlxControlInputTypeRaw fromKeyType( ::flixel::addons::input::FlxKeyInputType type);
		static ::Dynamic fromKeyType_dyn();

		static  ::flixel::addons::input::FlxControlInputTypeRaw fromGamepad(int id);
		static ::Dynamic fromGamepad_dyn();

		static  ::flixel::addons::input::FlxControlInputTypeRaw fromGamepadList(::Array< int > ids);
		static ::Dynamic fromGamepadList_dyn();

		static  ::flixel::addons::input::FlxControlInputTypeRaw fromGamepadType( ::flixel::addons::input::FlxGamepadInputType type);
		static ::Dynamic fromGamepadType_dyn();

		static  ::flixel::addons::input::FlxControlInputTypeRaw fromVirtualPad(::String id);
		static ::Dynamic fromVirtualPad_dyn();

		static  ::flixel::addons::input::FlxControlInputTypeRaw fromVirtualPadList(::Array< ::String > ids);
		static ::Dynamic fromVirtualPadList_dyn();

		static  ::flixel::addons::input::FlxControlInputTypeRaw fromVirtualPadType( ::flixel::addons::input::FlxVirtualPadInputType type);
		static ::Dynamic fromVirtualPadType_dyn();

		static  ::flixel::addons::input::FlxControlInputTypeRaw fromMouseButton(int id);
		static ::Dynamic fromMouseButton_dyn();

		static  ::flixel::addons::input::FlxControlInputTypeRaw fromMouse( ::flixel::addons::input::FlxMouseInputType type);
		static ::Dynamic fromMouse_dyn();

		static ::cpp::VirtualArray validateMulti(::cpp::VirtualArray ids);
		static ::Dynamic validateMulti_dyn();

		static ::Array< int > gamepadAnalogTriggers;
		static ::Array< int > gamepadAnalogSticks;
		static ::Array< int > gamepadAnalogInputs;
		static bool isAnalog( ::flixel::addons::input::FlxControlInputTypeRaw this1);
		static ::Dynamic isAnalog_dyn();

		static bool isDigital( ::flixel::addons::input::FlxControlInputTypeRaw this1);
		static ::Dynamic isDigital_dyn();

		static  ::flixel::addons::input::FlxControlInputTypeRaw simplify( ::flixel::addons::input::FlxControlInputTypeRaw this1);
		static ::Dynamic simplify_dyn();

		static bool conflicts( ::flixel::addons::input::FlxControlInputTypeRaw this1, ::flixel::addons::input::FlxControlInputTypeRaw input);
		static ::Dynamic conflicts_dyn();

		static bool anyMatch( ::flixel::addons::input::FlxControlInputTypeRaw this1,::cpp::VirtualArray list);
		static ::Dynamic anyMatch_dyn();

		static bool compare( ::flixel::addons::input::FlxControlInputTypeRaw this1, ::flixel::addons::input::FlxControlInputTypeRaw input);
		static ::Dynamic compare_dyn();

		static bool compareStrict( ::flixel::addons::input::FlxControlInputTypeRaw this1, ::flixel::addons::input::FlxControlInputTypeRaw input);
		static ::Dynamic compareStrict_dyn();

		static  ::flixel::input::actions::FlxInputDevice getDevice( ::flixel::addons::input::FlxControlInputTypeRaw this1);
		static ::Dynamic getDevice_dyn();

		static ::String getLabel( ::flixel::addons::input::FlxControlInputTypeRaw this1, ::flixel::input::gamepad::FlxGamepad activeGamepad);
		static ::Dynamic getLabel_dyn();

		static  ::flixel::addons::input::FlxControlMappedInput getMappedInput( ::flixel::addons::input::FlxControlInputTypeRaw this1, ::flixel::input::gamepad::FlxGamepad activeGamepad);
		static ::Dynamic getMappedInput_dyn();

};

} // end namespace flixel
} // end namespace addons
} // end namespace input
} // end namespace _FlxControlInputType

#endif /* INCLUDED_flixel_addons_input__FlxControlInputType_FlxControlInputType_Impl_ */ 
