// Generated by Haxe 4.3.6
#ifndef INCLUDED_flixel_addons_input_FlxDigitalSet
#define INCLUDED_flixel_addons_input_FlxDigitalSet

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(flixel,addons,input,DigitalEvent)
HX_DECLARE_CLASS3(flixel,addons,input,FlxControlInputTypeRaw)
HX_DECLARE_CLASS3(flixel,addons,input,FlxControls)
HX_DECLARE_CLASS3(flixel,addons,input,FlxDeviceIDRaw)
HX_DECLARE_CLASS3(flixel,addons,input,FlxDigitalSet)
HX_DECLARE_CLASS2(flixel,input,IFlxInputManager)
HX_DECLARE_CLASS3(flixel,input,actions,FlxAction)
HX_DECLARE_CLASS3(flixel,input,actions,FlxActionDigital)
HX_DECLARE_CLASS3(flixel,input,actions,FlxActionInput)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)

namespace flixel{
namespace addons{
namespace input{


class HXCPP_CLASS_ATTRIBUTES FlxDigitalSet_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxDigitalSet_obj OBJ_;
		FlxDigitalSet_obj();

	public:
		enum { _hx_ClassId = 0x3aad66e1 };

		void __construct( ::flixel::addons::input::FlxControls parent, ::flixel::addons::input::DigitalEvent event);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.input.FlxDigitalSet")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.addons.input.FlxDigitalSet"); }
		static ::hx::ObjectPtr< FlxDigitalSet_obj > __new( ::flixel::addons::input::FlxControls parent, ::flixel::addons::input::DigitalEvent event);
		static ::hx::ObjectPtr< FlxDigitalSet_obj > __alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::input::FlxControls parent, ::flixel::addons::input::DigitalEvent event);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxDigitalSet_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxDigitalSet",9c,dd,f2,64); }

		 ::flixel::addons::input::DigitalEvent event;
		 ::haxe::ds::EnumValueMap mappings;
		 ::flixel::addons::input::FlxControls parent;
		::String name;
		void destroy();
		::Dynamic destroy_dyn();

		void clear();
		::Dynamic clear_dyn();

		 ::flixel::input::actions::FlxActionDigital get( ::Dynamic action);
		::Dynamic get_dyn();

		void update();
		::Dynamic update_dyn();

		bool check( ::Dynamic action);
		::Dynamic check_dyn();

		bool any(::cpp::VirtualArray actions);
		::Dynamic any_dyn();

		 ::flixel::input::actions::FlxActionDigital add( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input);
		::Dynamic add_dyn();

		 ::flixel::input::actions::FlxActionInput remove( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input);
		::Dynamic remove_dyn();

		void setGamepadID( ::flixel::addons::input::FlxDeviceIDRaw id);
		::Dynamic setGamepadID_dyn();

};

} // end namespace flixel
} // end namespace addons
} // end namespace input

#endif /* INCLUDED_flixel_addons_input_FlxDigitalSet */ 
