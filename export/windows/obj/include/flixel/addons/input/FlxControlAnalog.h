// Generated by Haxe 4.3.6
#ifndef INCLUDED_flixel_addons_input_FlxControlAnalog
#define INCLUDED_flixel_addons_input_FlxControlAnalog

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_input_actions_FlxActionAnalog
#include <flixel/input/actions/FlxActionAnalog.h>
#endif
HX_DECLARE_CLASS3(flixel,addons,input,FlxControlAnalog)
HX_DECLARE_CLASS3(flixel,addons,input,FlxControlInputTypeRaw)
HX_DECLARE_CLASS3(flixel,addons,input,FlxControls)
HX_DECLARE_CLASS3(flixel,addons,input,FlxDeviceIDRaw)
HX_DECLARE_CLASS2(flixel,input,IFlxInputManager)
HX_DECLARE_CLASS3(flixel,input,actions,FlxAction)
HX_DECLARE_CLASS3(flixel,input,actions,FlxActionAnalog)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)

namespace flixel{
namespace addons{
namespace input{


class HXCPP_CLASS_ATTRIBUTES FlxControlAnalog_obj : public  ::flixel::input::actions::FlxActionAnalog_obj
{
	public:
		typedef  ::flixel::input::actions::FlxActionAnalog_obj super;
		typedef FlxControlAnalog_obj OBJ_;
		FlxControlAnalog_obj();

	public:
		enum { _hx_ClassId = 0x68c4f196 };

		void __construct(::String name,int trigger, ::Dynamic callback);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.input.FlxControlAnalog")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.addons.input.FlxControlAnalog"); }
		static ::hx::ObjectPtr< FlxControlAnalog_obj > __new(::String name,int trigger, ::Dynamic callback);
		static ::hx::ObjectPtr< FlxControlAnalog_obj > __alloc(::hx::Ctx *_hx_ctx,::String name,int trigger, ::Dynamic callback);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxControlAnalog_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxControlAnalog",bb,21,68,b2); }

		int trigger;
		void addInputType( ::flixel::addons::input::FlxControls parent, ::flixel::addons::input::FlxControlInputTypeRaw input);
		::Dynamic addInputType_dyn();

		void removeInputType( ::flixel::addons::input::FlxControlInputTypeRaw input);
		::Dynamic removeInputType_dyn();

		void addGamepadInput(int inputID, ::Dynamic axis, ::flixel::addons::input::FlxDeviceIDRaw gamepadID);
		::Dynamic addGamepadInput_dyn();

		void removeGamepadInput(int inputID,int axis);
		::Dynamic removeGamepadInput_dyn();

		void removeMouseMotion(int axis);
		::Dynamic removeMouseMotion_dyn();

		void removeMousePosition(int axis);
		::Dynamic removeMousePosition_dyn();

		void removeMouseDrag(int buttonId,int axis);
		::Dynamic removeMouseDrag_dyn();

		void removeMouseWheel();
		::Dynamic removeMouseWheel_dyn();

		void addKeys1D(int up,int down);
		::Dynamic addKeys1D_dyn();

		void addKeys2D(int up,int down,int right,int left);
		::Dynamic addKeys2D_dyn();

		void removeKeys1D(int up,int down);
		::Dynamic removeKeys1D_dyn();

		void removeKeys2D(int up,int down,int right,int left);
		::Dynamic removeKeys2D_dyn();

		void addGamepad1D(int up,int down, ::flixel::addons::input::FlxDeviceIDRaw gamepadID);
		::Dynamic addGamepad1D_dyn();

		void addGamepad2D(int up,int down,int right,int left, ::flixel::addons::input::FlxDeviceIDRaw gamepadID);
		::Dynamic addGamepad2D_dyn();

		void removeGamepad1D(int up,int down);
		::Dynamic removeGamepad1D_dyn();

		void removeGamepad2D(int up,int down,int right,int left);
		::Dynamic removeGamepad2D_dyn();

		void addVPad1D( ::haxe::ds::StringMap proxies,::String up,::String down);
		::Dynamic addVPad1D_dyn();

		void addVPad2D( ::haxe::ds::StringMap proxies,::String up,::String down,::String right,::String left);
		::Dynamic addVPad2D_dyn();

		void removeVPad1D(::String up,::String down);
		::Dynamic removeVPad1D_dyn();

		void removeVPad2D(::String up,::String down,::String right,::String left);
		::Dynamic removeVPad2D_dyn();

		void setGamepadID( ::flixel::addons::input::FlxDeviceIDRaw id);
		::Dynamic setGamepadID_dyn();

};

} // end namespace flixel
} // end namespace addons
} // end namespace input

#endif /* INCLUDED_flixel_addons_input_FlxControlAnalog */ 
