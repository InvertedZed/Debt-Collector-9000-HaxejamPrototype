// Generated by Haxe 4.3.6
#ifndef INCLUDED_flixel_addons_input_FlxAnalogDirections2D
#define INCLUDED_flixel_addons_input_FlxAnalogDirections2D

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(flixel,addons,input,FlxAnalogDirections2D)
HX_DECLARE_CLASS3(flixel,addons,input,FlxAnalogSet)
HX_DECLARE_CLASS3(flixel,addons,input,FlxRepeatInput)
HX_DECLARE_CLASS2(flixel,input,FlxInput)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)

namespace flixel{
namespace addons{
namespace input{


class HXCPP_CLASS_ATTRIBUTES FlxAnalogDirections2D_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxAnalogDirections2D_obj OBJ_;
		FlxAnalogDirections2D_obj();

	public:
		enum { _hx_ClassId = 0x5f4d5bad };

		void __construct( ::flixel::addons::input::FlxAnalogSet set, ::Dynamic func);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.input.FlxAnalogDirections2D")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.addons.input.FlxAnalogDirections2D"); }
		static ::hx::ObjectPtr< FlxAnalogDirections2D_obj > __new( ::flixel::addons::input::FlxAnalogSet set, ::Dynamic func);
		static ::hx::ObjectPtr< FlxAnalogDirections2D_obj > __alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::input::FlxAnalogSet set, ::Dynamic func);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxAnalogDirections2D_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxAnalogDirections2D",68,85,50,33); }

		bool get_up();
		::Dynamic get_up_dyn();

		bool get_down();
		::Dynamic get_down_dyn();

		bool get_left();
		::Dynamic get_left_dyn();

		bool get_right();
		::Dynamic get_right_dyn();

		 ::flixel::addons::input::FlxAnalogSet set;
		 ::Dynamic func;
		Dynamic func_dyn() { return func;}
		void destroy();
		::Dynamic destroy_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		bool check(int dir);
		::Dynamic check_dyn();

		bool any(int dir);
		::Dynamic any_dyn();

};

} // end namespace flixel
} // end namespace addons
} // end namespace input

#endif /* INCLUDED_flixel_addons_input_FlxAnalogDirections2D */ 
