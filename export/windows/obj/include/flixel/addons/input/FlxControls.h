// Generated by Haxe 4.3.6
#ifndef INCLUDED_flixel_addons_input_FlxControls
#define INCLUDED_flixel_addons_input_FlxControls

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,input,DigitalEvent)
HX_DECLARE_CLASS3(flixel,addons,input,FlxAnalogSet)
HX_DECLARE_CLASS3(flixel,addons,input,FlxControlInputTypeRaw)
HX_DECLARE_CLASS3(flixel,addons,input,FlxControlMappedInput)
HX_DECLARE_CLASS3(flixel,addons,input,FlxControls)
HX_DECLARE_CLASS3(flixel,addons,input,FlxDeviceIDRaw)
HX_DECLARE_CLASS3(flixel,addons,input,GroupConflictsResults)
HX_DECLARE_CLASS4(flixel,addons,input,_FlxControls,ActionManager)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,input,IFlxInputManager)
HX_DECLARE_CLASS3(flixel,input,actions,FlxActionManager)
HX_DECLARE_CLASS3(flixel,input,actions,FlxInputDevice)
HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepad)
HX_DECLARE_CLASS2(flixel,ui,FlxVirtualPad)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)

namespace flixel{
namespace addons{
namespace input{


class HXCPP_CLASS_ATTRIBUTES FlxControls_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxControls_obj OBJ_;
		FlxControls_obj();

	public:
		enum { _hx_ClassId = 0x64be9eed };

		void __construct(::String __o_name);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.input.FlxControls")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.addons.input.FlxControls"); }

		//~FlxControls_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("FlxControls",e8,60,d3,4e); }

		 ::flixel::addons::input::FlxDeviceIDRaw gamepadID;
		 ::flixel::ui::FlxVirtualPad virtualPad;
		::String name;
		 ::flixel::addons::input::_FlxControls::ActionManager manager;
		 ::haxe::ds::EnumValueMap digitalSets;
		 ::haxe::ds::EnumValueMap analogSets;
		 ::haxe::ds::StringMap vPadProxies;
		 ::haxe::ds::StringMap groups;
		 ::haxe::ds::EnumValueMap groupsLookup;
		 ::haxe::ds::EnumValueMap inputsByAction;
		 ::flixel::input::actions::FlxInputDevice lastActiveDevice;
		 ::haxe::ds::EnumValueMap deviceActivity;
		void initGroups();
		::Dynamic initGroups_dyn();

		void destroy();
		::Dynamic destroy_dyn();

		void throwAllGroupConflicts();
		::Dynamic throwAllGroupConflicts_dyn();

		 ::flixel::addons::input::FlxAnalogSet getAnalog2D( ::Dynamic action);
		::Dynamic getAnalog2D_dyn();

		 ::flixel::addons::input::FlxAnalogSet getAnalog1D( ::Dynamic action);
		::Dynamic getAnalog1D_dyn();

		void setGamepadID( ::flixel::addons::input::FlxDeviceIDRaw id);
		::Dynamic setGamepadID_dyn();

		virtual  ::haxe::ds::EnumValueMap getDefaultMappings() { return 0; }
		::Dynamic getDefaultMappings_dyn();
		void clearMappings();
		::Dynamic clearMappings_dyn();

		void resetMappings( ::haxe::ds::EnumValueMap mappings);
		::Dynamic resetMappings_dyn();

		void addMappings( ::haxe::ds::EnumValueMap mappings);
		::Dynamic addMappings_dyn();

		void clearGroups();
		::Dynamic clearGroups_dyn();

		void addGroup(::String name,::cpp::VirtualArray actions);
		::Dynamic addGroup_dyn();

		void removeGroup(::String name);
		::Dynamic removeGroup_dyn();

		::Array< ::String > groupsOf( ::Dynamic action);
		::Dynamic groupsOf_dyn();

		::Array< ::String > groupsOfRaw( ::Dynamic action);
		::Dynamic groupsOfRaw_dyn();

		::Array< ::Dynamic> groupInstancesOf( ::Dynamic action);
		::Dynamic groupInstancesOf_dyn();

		 ::flixel::addons::input::GroupConflictsResults checkAllGroupConflicts();
		::Dynamic checkAllGroupConflicts_dyn();

		 ::flixel::addons::input::GroupConflictsResults checkGroupConflicts(::String group);
		::Dynamic checkGroupConflicts_dyn();

		void setVirtualPad( ::flixel::ui::FlxVirtualPad pad);
		::Dynamic setVirtualPad_dyn();

		void removeVirtualPad();
		::Dynamic removeVirtualPad_dyn();

		void checkDigital( ::Dynamic action, ::flixel::addons::input::DigitalEvent event);
		::Dynamic checkDigital_dyn();

		bool canAdd( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input);
		::Dynamic canAdd_dyn();

		 ::flixel::addons::input::GroupConflictsResults listConflictingActions( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input);
		::Dynamic listConflictingActions_dyn();

		 ::flixel::addons::input::GroupConflictsResults canAddHelper( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input,::hx::Null< bool >  firstOnly);
		::Dynamic canAddHelper_dyn();

		void add( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input);
		::Dynamic add_dyn();

		 ::flixel::addons::input::GroupConflictsResults addIfValid( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input);
		::Dynamic addIfValid_dyn();

		bool remove( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input);
		::Dynamic remove_dyn();

		 ::flixel::addons::input::FlxAnalogSet getAnalogSet( ::Dynamic action);
		::Dynamic getAnalogSet_dyn();

		 ::flixel::addons::input::FlxControlInputTypeRaw getExistingInput( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input);
		::Dynamic getExistingInput_dyn();

		 ::flixel::addons::input::FlxControlInputTypeRaw getConflictingInput( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input);
		::Dynamic getConflictingInput_dyn();

		::Array< ::Dynamic> listInputsFor( ::Dynamic action, ::flixel::input::actions::FlxInputDevice device);
		::Dynamic listInputsFor_dyn();

		::Array< ::Dynamic> getInputsOf( ::Dynamic action);
		::Dynamic getInputsOf_dyn();

		::Array< ::Dynamic> listMappedInputsFor( ::Dynamic action, ::flixel::input::actions::FlxInputDevice device);
		::Dynamic listMappedInputsFor_dyn();

		::Array< ::String > listInputLabelsFor( ::Dynamic action, ::flixel::input::actions::FlxInputDevice device);
		::Dynamic listInputLabelsFor_dyn();

		void reset();
		::Dynamic reset_dyn();

		void onFocus();
		::Dynamic onFocus_dyn();

		void onFocusLost();
		::Dynamic onFocusLost_dyn();

		void update();
		::Dynamic update_dyn();

		bool isDeviceActive( ::flixel::input::actions::FlxInputDevice device);
		::Dynamic isDeviceActive_dyn();

		 ::flixel::input::gamepad::FlxGamepad getActiveGamepad();
		::Dynamic getActiveGamepad_dyn();

};

} // end namespace flixel
} // end namespace addons
} // end namespace input

#endif /* INCLUDED_flixel_addons_input_FlxControls */ 
