// Generated by Haxe 4.3.6
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_AnalogMouseWheelDelta
#define INCLUDED_flixel_addons_input__FlxAnalogSet_AnalogMouseWheelDelta

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_ActionInputAnalog
#include <flixel/addons/input/_FlxAnalogSet/ActionInputAnalog.h>
#endif
HX_DECLARE_CLASS4(flixel,addons,input,_FlxAnalogSet,ActionInputAnalog)
HX_DECLARE_CLASS4(flixel,addons,input,_FlxAnalogSet,AnalogMouseWheelDelta)
HX_DECLARE_CLASS3(flixel,input,actions,FlxActionInput)
HX_DECLARE_CLASS3(flixel,input,actions,FlxActionInputAnalog)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace flixel{
namespace addons{
namespace input{
namespace _FlxAnalogSet{


class HXCPP_CLASS_ATTRIBUTES AnalogMouseWheelDelta_obj : public  ::flixel::addons::input::_FlxAnalogSet::ActionInputAnalog_obj
{
	public:
		typedef  ::flixel::addons::input::_FlxAnalogSet::ActionInputAnalog_obj super;
		typedef AnalogMouseWheelDelta_obj OBJ_;
		AnalogMouseWheelDelta_obj();

	public:
		enum { _hx_ClassId = 0x7186098a };

		void __construct(int trigger,::hx::Null< Float >  __o_scale);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.input._FlxAnalogSet.AnalogMouseWheelDelta")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.addons.input._FlxAnalogSet.AnalogMouseWheelDelta"); }
		static ::hx::ObjectPtr< AnalogMouseWheelDelta_obj > __new(int trigger,::hx::Null< Float >  __o_scale);
		static ::hx::ObjectPtr< AnalogMouseWheelDelta_obj > __alloc(::hx::Ctx *_hx_ctx,int trigger,::hx::Null< Float >  __o_scale);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AnalogMouseWheelDelta_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AnalogMouseWheelDelta",72,83,a7,4b); }

		Float scale;
		void updateValues(Float x,Float y);

};

} // end namespace flixel
} // end namespace addons
} // end namespace input
} // end namespace _FlxAnalogSet

#endif /* INCLUDED_flixel_addons_input__FlxAnalogSet_AnalogMouseWheelDelta */ 
