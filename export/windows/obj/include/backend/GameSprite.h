// Generated by Haxe 4.3.6
#ifndef INCLUDED_backend_GameSprite
#define INCLUDED_backend_GameSprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_effects_FlxSkewedSprite
#include <flixel/addons/effects/FlxSkewedSprite.h>
#endif
HX_DECLARE_CLASS1(backend,GameSprite)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,effects,FlxSkewedSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace backend{


class HXCPP_CLASS_ATTRIBUTES GameSprite_obj : public  ::flixel::addons::effects::FlxSkewedSprite_obj
{
	public:
		typedef  ::flixel::addons::effects::FlxSkewedSprite_obj super;
		typedef GameSprite_obj OBJ_;
		GameSprite_obj();

	public:
		enum { _hx_ClassId = 0x015dfbcb };

		void __construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y, ::Dynamic graphic);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="backend.GameSprite")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"backend.GameSprite"); }
		static ::hx::ObjectPtr< GameSprite_obj > __new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y, ::Dynamic graphic);
		static ::hx::ObjectPtr< GameSprite_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y, ::Dynamic graphic);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GameSprite_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GameSprite",b7,c9,bc,fc); }

		void update(Float elapsed);

};

} // end namespace backend

#endif /* INCLUDED_backend_GameSprite */ 
