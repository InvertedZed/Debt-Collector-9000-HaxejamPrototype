// Generated by Haxe 4.3.6
#ifndef INCLUDED_backend_CacheSound
#define INCLUDED_backend_CacheSound

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_ObjectCache
#include <backend/ObjectCache.h>
#endif
HX_DECLARE_CLASS1(backend,CacheSound)
HX_DECLARE_CLASS1(backend,ObjectCache)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,media,Sound)

namespace backend{


class HXCPP_CLASS_ATTRIBUTES CacheSound_obj : public  ::backend::ObjectCache_obj
{
	public:
		typedef  ::backend::ObjectCache_obj super;
		typedef CacheSound_obj OBJ_;
		CacheSound_obj();

	public:
		enum { _hx_ClassId = 0x6d6c367d };

		void __construct( ::openfl::media::Sound data);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="backend.CacheSound")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"backend.CacheSound"); }
		static ::hx::ObjectPtr< CacheSound_obj > __new( ::openfl::media::Sound data);
		static ::hx::ObjectPtr< CacheSound_obj > __alloc(::hx::Ctx *_hx_ctx, ::openfl::media::Sound data);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CacheSound_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CacheSound",4d,f7,35,ba); }

		void dealloc();

};

} // end namespace backend

#endif /* INCLUDED_backend_CacheSound */ 
