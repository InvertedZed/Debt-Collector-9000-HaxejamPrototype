// Generated by Haxe 4.3.6
#ifndef INCLUDED_backend_AssetManager
#define INCLUDED_backend_AssetManager

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(backend,AssetManager)
HX_DECLARE_CLASS2(flixel,graphics,FlxGraphic)
HX_DECLARE_CLASS3(flixel,graphics,frames,FlxAtlasFrames)
HX_DECLARE_CLASS3(flixel,graphics,frames,FlxFramesCollection)
HX_DECLARE_CLASS3(flixel,_hx_system,frontEnds,AssetFrontEnd)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,media,Sound)

namespace backend{


class HXCPP_CLASS_ATTRIBUTES AssetManager_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef AssetManager_obj OBJ_;
		AssetManager_obj();

	public:
		enum { _hx_ClassId = 0x51069991 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="backend.AssetManager")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"backend.AssetManager"); }

		inline static ::hx::ObjectPtr< AssetManager_obj > __new() {
			::hx::ObjectPtr< AssetManager_obj > __this = new AssetManager_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< AssetManager_obj > __alloc(::hx::Ctx *_hx_ctx) {
			AssetManager_obj *__this = (AssetManager_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AssetManager_obj), false, "backend.AssetManager"));
			*(void **)__this = AssetManager_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AssetManager_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AssetManager",7d,ba,25,fc); }

		static void __boot();
		static  ::haxe::ds::StringMap graphicCache;
		static  ::haxe::ds::StringMap soundCache;
		static  ::haxe::ds::StringMap musicCache;
		static ::Array< ::String > registeredFonts;
		static ::String soundExtension;
		static  ::flixel::_hx_system::frontEnds::AssetFrontEnd assetManager;
		static ::String getAssetPath();
		static ::Dynamic getAssetPath_dyn();

		static ::String getPath(::String file,::String directory);
		static ::Dynamic getPath_dyn();

		static ::String fileToString(::String path);
		static ::Dynamic fileToString_dyn();

		static  ::openfl::media::Sound getSoundInternal(::String path,::String soundDirectory, ::haxe::ds::StringMap cache);
		static ::Dynamic getSoundInternal_dyn();

		static  ::openfl::media::Sound getSound(::String path);
		static ::Dynamic getSound_dyn();

		static  ::openfl::media::Sound getMusic(::String path);
		static ::Dynamic getMusic_dyn();

		static ::String parseJson(::String path,::String optionalPath);
		static ::Dynamic parseJson_dyn();

		static  ::flixel::graphics::FlxGraphic getImage(::String path,::String extension);
		static ::Dynamic getImage_dyn();

		static void registerFont(::String path,::String extension);
		static ::Dynamic registerFont_dyn();

		static ::String getFont(::String path,::String extension);
		static ::Dynamic getFont_dyn();

		static  ::flixel::graphics::frames::FlxAtlasFrames getAtlas(::String path,::String imageExtension);
		static ::Dynamic getAtlas_dyn();

		static ::String getShader(::String path,::String extension);
		static ::Dynamic getShader_dyn();

		static  ::flixel::_hx_system::frontEnds::AssetFrontEnd get_assetManager();
		static ::Dynamic get_assetManager_dyn();

};

} // end namespace backend

#endif /* INCLUDED_backend_AssetManager */ 
