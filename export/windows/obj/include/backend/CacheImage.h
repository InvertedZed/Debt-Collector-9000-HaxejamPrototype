// Generated by Haxe 4.3.6
#ifndef INCLUDED_backend_CacheImage
#define INCLUDED_backend_CacheImage

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_ObjectCache
#include <backend/ObjectCache.h>
#endif
HX_DECLARE_CLASS1(backend,CacheImage)
HX_DECLARE_CLASS1(backend,ObjectCache)
HX_DECLARE_CLASS2(flixel,graphics,FlxGraphic)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace backend{


class HXCPP_CLASS_ATTRIBUTES CacheImage_obj : public  ::backend::ObjectCache_obj
{
	public:
		typedef  ::backend::ObjectCache_obj super;
		typedef CacheImage_obj OBJ_;
		CacheImage_obj();

	public:
		enum { _hx_ClassId = 0x589dd625 };

		void __construct( ::flixel::graphics::FlxGraphic data);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="backend.CacheImage")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"backend.CacheImage"); }
		static ::hx::ObjectPtr< CacheImage_obj > __new( ::flixel::graphics::FlxGraphic data);
		static ::hx::ObjectPtr< CacheImage_obj > __alloc(::hx::Ctx *_hx_ctx, ::flixel::graphics::FlxGraphic data);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CacheImage_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CacheImage",d9,89,d2,f6); }

		void dealloc();

};

} // end namespace backend

#endif /* INCLUDED_backend_CacheImage */ 
