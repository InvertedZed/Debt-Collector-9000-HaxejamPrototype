// Generated by Haxe 4.3.6
#ifndef INCLUDED_backend_Shader
#define INCLUDED_backend_Shader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_display_FlxRuntimeShader
#include <flixel/addons/display/FlxRuntimeShader.h>
#endif
HX_DECLARE_CLASS1(backend,Shader)
HX_DECLARE_CLASS3(flixel,addons,display,FlxRuntimeShader)
HX_DECLARE_CLASS3(flixel,graphics,tile,FlxGraphicsShader)
HX_DECLARE_CLASS2(openfl,display,GraphicsShader)
HX_DECLARE_CLASS2(openfl,display,Shader)

namespace backend{


class HXCPP_CLASS_ATTRIBUTES Shader_obj : public  ::flixel::addons::display::FlxRuntimeShader_obj
{
	public:
		typedef  ::flixel::addons::display::FlxRuntimeShader_obj super;
		typedef Shader_obj OBJ_;
		Shader_obj();

	public:
		enum { _hx_ClassId = 0x2ac2b8ad };

		void __construct(::String __o_shaderName);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="backend.Shader")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"backend.Shader"); }
		static ::hx::ObjectPtr< Shader_obj > __new(::String __o_shaderName);
		static ::hx::ObjectPtr< Shader_obj > __alloc(::hx::Ctx *_hx_ctx,::String __o_shaderName);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Shader_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Shader",45,33,b5,51); }

};

} // end namespace backend

#endif /* INCLUDED_backend_Shader */ 
