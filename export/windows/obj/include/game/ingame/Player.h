// Generated by Haxe 4.3.6
#ifndef INCLUDED_game_ingame_Player
#define INCLUDED_game_ingame_Player

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_GameSprite
#include <backend/GameSprite.h>
#endif
HX_DECLARE_CLASS1(backend,GameSprite)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,effects,FlxSkewedSprite)
HX_DECLARE_CLASS3(flixel,addons,input,FlxControls)
HX_DECLARE_CLASS2(flixel,input,IFlxInputManager)
HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS2(flixel,util,IFlxSignal)
HX_DECLARE_CLASS3(flixel,util,_FlxSignal,FlxBaseSignal)
HX_DECLARE_CLASS3(flixel,util,_FlxSignal,FlxSignal0)
HX_DECLARE_CLASS2(game,ingame,Player)
HX_DECLARE_CLASS2(game,ingame,PlayerControls)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)

namespace game{
namespace ingame{


class HXCPP_CLASS_ATTRIBUTES Player_obj : public  ::backend::GameSprite_obj
{
	public:
		typedef  ::backend::GameSprite_obj super;
		typedef Player_obj OBJ_;
		Player_obj();

	public:
		enum { _hx_ClassId = 0x3853850a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="game.ingame.Player")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"game.ingame.Player"); }
		static ::hx::ObjectPtr< Player_obj > __new();
		static ::hx::ObjectPtr< Player_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Player_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Player",81,5f,4d,6c); }

		 ::game::ingame::PlayerControls controls;
		Float speed;
		Float holdTimer;
		Float hitCooldown;
		bool canMove;
		 ::flixel::util::_FlxSignal::FlxSignal0 onSwing;
		 ::haxe::ds::StringMap offsetMap;
		Float internalX;
		Float internalY;
		void addAnimation(::String name,::hx::Null< int >  fps,::hx::Null< bool >  looped, ::flixel::math::FlxBasePoint position);
		::Dynamic addAnimation_dyn();

		void playAnimation(::String name,::hx::Null< bool >  forced);
		::Dynamic playAnimation_dyn();

		void initPosition();
		::Dynamic initPosition_dyn();

		void updateMovement();
		::Dynamic updateMovement_dyn();

		void setX(Float value);
		::Dynamic setX_dyn();

		void setY(Float value);
		::Dynamic setY_dyn();

		Float snap(Float m,::hx::Null< int >  pixelAmount);
		::Dynamic snap_dyn();

		void snapMovement();
		::Dynamic snapMovement_dyn();

};

} // end namespace game
} // end namespace ingame

#endif /* INCLUDED_game_ingame_Player */ 
