// Generated by Haxe 4.3.6
#ifndef INCLUDED_game_ingame_Background
#define INCLUDED_game_ingame_Background

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
HX_DECLARE_CLASS1(backend,GameSprite)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,effects,FlxSkewedSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(game,ingame,Background)
HX_DECLARE_CLASS2(game,ingame,Player)

namespace game{
namespace ingame{


class HXCPP_CLASS_ATTRIBUTES Background_obj : public  ::flixel::group::FlxTypedGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedGroup_obj super;
		typedef Background_obj OBJ_;
		Background_obj();

	public:
		enum { _hx_ClassId = 0x1930b617 };

		void __construct(int id, ::game::ingame::Player p);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="game.ingame.Background")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"game.ingame.Background"); }
		static ::hx::ObjectPtr< Background_obj > __new(int id, ::game::ingame::Player p);
		static ::hx::ObjectPtr< Background_obj > __alloc(::hx::Ctx *_hx_ctx,int id, ::game::ingame::Player p);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Background_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Background",0e,98,ce,1c); }

		Float maxY;
		Float minY;
		 ::game::ingame::Player internalPlayer;
		void update(Float elapsed);

};

} // end namespace game
} // end namespace ingame

#endif /* INCLUDED_game_ingame_Background */ 
