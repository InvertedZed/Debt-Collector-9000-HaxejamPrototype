// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_addons_input_FlxControlRepeatDigital
#include <flixel/addons/input/FlxControlRepeatDigital.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxRepeatInput
#include <flixel/addons/input/FlxRepeatInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3fb1e5b21c69eb4c_107_new,"flixel.addons.input.FlxControlRepeatDigital","new",0x433f2737,"flixel.addons.input.FlxControlRepeatDigital.new","flixel/addons/input/FlxDigitalSet.hx",107,0x5a62f830)
HX_LOCAL_STACK_FRAME(_hx_pos_3fb1e5b21c69eb4c_113_update,"flixel.addons.input.FlxControlRepeatDigital","update",0x0f70cf92,"flixel.addons.input.FlxControlRepeatDigital.update","flixel/addons/input/FlxDigitalSet.hx",113,0x5a62f830)
HX_LOCAL_STACK_FRAME(_hx_pos_3fb1e5b21c69eb4c_121_check,"flixel.addons.input.FlxControlRepeatDigital","check",0x9b46935f,"flixel.addons.input.FlxControlRepeatDigital.check","flixel/addons/input/FlxDigitalSet.hx",121,0x5a62f830)
namespace flixel{
namespace addons{
namespace input{

void FlxControlRepeatDigital_obj::__construct(::String name, ::Dynamic callback){
            	HX_GC_STACKFRAME(&_hx_pos_3fb1e5b21c69eb4c_107_new)
HXLINE( 108)		this->input =  ::flixel::addons::input::FlxRepeatInput_obj::__alloc( HX_CTX ,0);
HXLINE( 109)		super::__construct(name,callback);
            	}

Dynamic FlxControlRepeatDigital_obj::__CreateEmpty() { return new FlxControlRepeatDigital_obj; }

void *FlxControlRepeatDigital_obj::_hx_vtable = 0;

Dynamic FlxControlRepeatDigital_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxControlRepeatDigital_obj > _hx_result = new FlxControlRepeatDigital_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxControlRepeatDigital_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2660e195) {
		if (inClassId<=(int)0x0108874b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0108874b;
		} else {
			return inClassId==(int)0x2660e195;
		}
	} else {
		return inClassId==(int)0x53d9a55f;
	}
}

void FlxControlRepeatDigital_obj::update(){
            	HX_STACKFRAME(&_hx_pos_3fb1e5b21c69eb4c_113_update)
HXLINE( 114)		this->super::update();
HXLINE( 116)		 ::flixel::addons::input::FlxRepeatInput _hx_tmp = this->input;
HXDLIN( 116)		_hx_tmp->updateWithState(this->super::check());
            	}


bool FlxControlRepeatDigital_obj::check(){
            	HX_STACKFRAME(&_hx_pos_3fb1e5b21c69eb4c_121_check)
HXDLIN( 121)		return this->input->triggerRepeat();
            	}



::hx::ObjectPtr< FlxControlRepeatDigital_obj > FlxControlRepeatDigital_obj::__new(::String name, ::Dynamic callback) {
	::hx::ObjectPtr< FlxControlRepeatDigital_obj > __this = new FlxControlRepeatDigital_obj();
	__this->__construct(name,callback);
	return __this;
}

::hx::ObjectPtr< FlxControlRepeatDigital_obj > FlxControlRepeatDigital_obj::__alloc(::hx::Ctx *_hx_ctx,::String name, ::Dynamic callback) {
	FlxControlRepeatDigital_obj *__this = (FlxControlRepeatDigital_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxControlRepeatDigital_obj), true, "flixel.addons.input.FlxControlRepeatDigital"));
	*(void **)__this = FlxControlRepeatDigital_obj::_hx_vtable;
	__this->__construct(name,callback);
	return __this;
}

FlxControlRepeatDigital_obj::FlxControlRepeatDigital_obj()
{
}

void FlxControlRepeatDigital_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxControlRepeatDigital);
	HX_MARK_MEMBER_NAME(input,"input");
	 ::flixel::input::actions::FlxActionDigital_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxControlRepeatDigital_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(input,"input");
	 ::flixel::input::actions::FlxActionDigital_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxControlRepeatDigital_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { return ::hx::Val( input ); }
		if (HX_FIELD_EQ(inName,"check") ) { return ::hx::Val( check_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxControlRepeatDigital_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::flixel::addons::input::FlxRepeatInput >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxControlRepeatDigital_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("input",0a,c4,1d,be));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxControlRepeatDigital_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::addons::input::FlxRepeatInput */ ,(int)offsetof(FlxControlRepeatDigital_obj,input),HX_("input",0a,c4,1d,be)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxControlRepeatDigital_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxControlRepeatDigital_obj_sMemberFields[] = {
	HX_("input",0a,c4,1d,be),
	HX_("update",09,86,05,87),
	HX_("check",c8,98,b6,45),
	::String(null()) };

::hx::Class FlxControlRepeatDigital_obj::__mClass;

void FlxControlRepeatDigital_obj::__register()
{
	FlxControlRepeatDigital_obj _hx_dummy;
	FlxControlRepeatDigital_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input.FlxControlRepeatDigital",c5,bf,47,fe);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxControlRepeatDigital_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxControlRepeatDigital_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxControlRepeatDigital_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxControlRepeatDigital_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
