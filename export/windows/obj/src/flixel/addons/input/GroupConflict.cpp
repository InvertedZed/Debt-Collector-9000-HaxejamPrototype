// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlInputTypeRaw
#include <flixel/addons/input/FlxControlInputTypeRaw.h>
#endif
#ifndef INCLUDED_flixel_addons_input_GroupConflict
#include <flixel/addons/input/GroupConflict.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a6aa211e87674698_1004_new,"flixel.addons.input.GroupConflict","new",0x9f704ff6,"flixel.addons.input.GroupConflict.new","flixel/addons/input/FlxControls.hx",1004,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_a6aa211e87674698_1013_toString,"flixel.addons.input.GroupConflict","toString",0xa02e1156,"flixel.addons.input.GroupConflict.toString","flixel/addons/input/FlxControls.hx",1013,0x03116ce4)
namespace flixel{
namespace addons{
namespace input{

void GroupConflict_obj::__construct(::String group, ::Dynamic action1, ::Dynamic action2, ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_STACKFRAME(&_hx_pos_a6aa211e87674698_1004_new)
HXLINE(1005)		this->group = group;
HXLINE(1006)		this->action1 = action1;
HXLINE(1007)		this->action2 = action2;
HXLINE(1008)		this->input = input;
            	}

Dynamic GroupConflict_obj::__CreateEmpty() { return new GroupConflict_obj; }

void *GroupConflict_obj::_hx_vtable = 0;

Dynamic GroupConflict_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GroupConflict_obj > _hx_result = new GroupConflict_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool GroupConflict_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7f49a9d6;
}

::String GroupConflict_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_a6aa211e87674698_1013_toString)
HXDLIN(1013)		::String _hx_tmp = ((HX_("",00,00,00,00) + ::Std_obj::string(this->input)) + HX_(" in group \"",e6,51,59,4b));
HXDLIN(1013)		::String _hx_tmp1 = ((_hx_tmp + this->group) + HX_("\" on actions ",a6,fb,30,3b));
HXDLIN(1013)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(this->action1)) + HX_(" and ",89,11,44,ad));
HXDLIN(1013)		return (_hx_tmp2 + ::Std_obj::string(this->action2));
            	}


HX_DEFINE_DYNAMIC_FUNC0(GroupConflict_obj,toString,return )


::hx::ObjectPtr< GroupConflict_obj > GroupConflict_obj::__new(::String group, ::Dynamic action1, ::Dynamic action2, ::flixel::addons::input::FlxControlInputTypeRaw input) {
	::hx::ObjectPtr< GroupConflict_obj > __this = new GroupConflict_obj();
	__this->__construct(group,action1,action2,input);
	return __this;
}

::hx::ObjectPtr< GroupConflict_obj > GroupConflict_obj::__alloc(::hx::Ctx *_hx_ctx,::String group, ::Dynamic action1, ::Dynamic action2, ::flixel::addons::input::FlxControlInputTypeRaw input) {
	GroupConflict_obj *__this = (GroupConflict_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GroupConflict_obj), true, "flixel.addons.input.GroupConflict"));
	*(void **)__this = GroupConflict_obj::_hx_vtable;
	__this->__construct(group,action1,action2,input);
	return __this;
}

GroupConflict_obj::GroupConflict_obj()
{
}

void GroupConflict_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GroupConflict);
	HX_MARK_MEMBER_NAME(group,"group");
	HX_MARK_MEMBER_NAME(action1,"action1");
	HX_MARK_MEMBER_NAME(action2,"action2");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_END_CLASS();
}

void GroupConflict_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(group,"group");
	HX_VISIT_MEMBER_NAME(action1,"action1");
	HX_VISIT_MEMBER_NAME(action2,"action2");
	HX_VISIT_MEMBER_NAME(input,"input");
}

::hx::Val GroupConflict_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"group") ) { return ::hx::Val( group ); }
		if (HX_FIELD_EQ(inName,"input") ) { return ::hx::Val( input ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"action1") ) { return ::hx::Val( action1 ); }
		if (HX_FIELD_EQ(inName,"action2") ) { return ::hx::Val( action2 ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GroupConflict_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"group") ) { group=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::flixel::addons::input::FlxControlInputTypeRaw >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"action1") ) { action1=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"action2") ) { action2=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GroupConflict_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("group",3f,b3,f4,99));
	outFields->push(HX_("action1",bb,03,2e,67));
	outFields->push(HX_("action2",bc,03,2e,67));
	outFields->push(HX_("input",0a,c4,1d,be));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GroupConflict_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(GroupConflict_obj,group),HX_("group",3f,b3,f4,99)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(GroupConflict_obj,action1),HX_("action1",bb,03,2e,67)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(GroupConflict_obj,action2),HX_("action2",bc,03,2e,67)},
	{::hx::fsObject /*  ::flixel::addons::input::FlxControlInputTypeRaw */ ,(int)offsetof(GroupConflict_obj,input),HX_("input",0a,c4,1d,be)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GroupConflict_obj_sStaticStorageInfo = 0;
#endif

static ::String GroupConflict_obj_sMemberFields[] = {
	HX_("group",3f,b3,f4,99),
	HX_("action1",bb,03,2e,67),
	HX_("action2",bc,03,2e,67),
	HX_("input",0a,c4,1d,be),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class GroupConflict_obj::__mClass;

void GroupConflict_obj::__register()
{
	GroupConflict_obj _hx_dummy;
	GroupConflict_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input.GroupConflict",04,dd,67,65);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GroupConflict_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GroupConflict_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GroupConflict_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GroupConflict_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
