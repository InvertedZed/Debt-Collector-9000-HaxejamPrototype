// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlInputTypeRaw
#include <flixel/addons/input/FlxControlInputTypeRaw.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControls
#include <flixel/addons/input/FlxControls.h>
#endif
#ifndef INCLUDED_flixel_addons_input_GroupConflict
#include <flixel/addons/input/GroupConflict.h>
#endif
#ifndef INCLUDED_flixel_addons_input_GroupConflictsResults
#include <flixel/addons/input/GroupConflictsResults.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxControlInputType_FlxControlInputType_Impl_
#include <flixel/addons/input/_FlxControlInputType/FlxControlInputType_Impl_.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxControls_GroupTools
#include <flixel/addons/input/_FlxControls/GroupTools.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputDevice
#include <flixel/input/actions/FlxInputDevice.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_d68d2c5e7e51873a_916_addAllConflicts,"flixel.addons.input._FlxControls.GroupTools","addAllConflicts",0x05a3c5e7,"flixel.addons.input._FlxControls.GroupTools.addAllConflicts","flixel/addons/input/FlxControls.hx",916,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_d68d2c5e7e51873a_912_addAllConflicts,"flixel.addons.input._FlxControls.GroupTools","addAllConflicts",0x05a3c5e7,"flixel.addons.input._FlxControls.GroupTools.addAllConflicts","flixel/addons/input/FlxControls.hx",912,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_d68d2c5e7e51873a_924_addAllConflicts,"flixel.addons.input._FlxControls.GroupTools","addAllConflicts",0x05a3c5e7,"flixel.addons.input._FlxControls.GroupTools.addAllConflicts","flixel/addons/input/FlxControls.hx",924,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_d68d2c5e7e51873a_935_forEachConflict,"flixel.addons.input._FlxControls.GroupTools","forEachConflict",0x6999cbc2,"flixel.addons.input._FlxControls.GroupTools.forEachConflict","flixel/addons/input/FlxControls.hx",935,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_d68d2c5e7e51873a_937_forEachConflict,"flixel.addons.input._FlxControls.GroupTools","forEachConflict",0x6999cbc2,"flixel.addons.input._FlxControls.GroupTools.forEachConflict","flixel/addons/input/FlxControls.hx",937,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_d68d2c5e7e51873a_951_getConflictingActions,"flixel.addons.input._FlxControls.GroupTools","getConflictingActions",0xb3dda869,"flixel.addons.input._FlxControls.GroupTools.getConflictingActions","flixel/addons/input/FlxControls.hx",951,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_d68d2c5e7e51873a_956_getConflictingActions,"flixel.addons.input._FlxControls.GroupTools","getConflictingActions",0xb3dda869,"flixel.addons.input._FlxControls.GroupTools.getConflictingActions","flixel/addons/input/FlxControls.hx",956,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_d68d2c5e7e51873a_964_resultsFromArray,"flixel.addons.input._FlxControls.GroupTools","resultsFromArray",0x5ba0df93,"flixel.addons.input._FlxControls.GroupTools.resultsFromArray","flixel/addons/input/FlxControls.hx",964,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_d68d2c5e7e51873a_970_resultsFromActionArray,"flixel.addons.input._FlxControls.GroupTools","resultsFromActionArray",0x2626977d,"flixel.addons.input._FlxControls.GroupTools.resultsFromActionArray","flixel/addons/input/FlxControls.hx",970,0x03116ce4)
namespace flixel{
namespace addons{
namespace input{
namespace _FlxControls{

void GroupTools_obj::__construct() { }

Dynamic GroupTools_obj::__CreateEmpty() { return new GroupTools_obj; }

void *GroupTools_obj::_hx_vtable = 0;

Dynamic GroupTools_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GroupTools_obj > _hx_result = new GroupTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GroupTools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7b0e7b9c;
}

void GroupTools_obj::addAllConflicts( ::flixel::addons::input::FlxControls controls,::String groupName,::cpp::VirtualArray group,::Array< ::Dynamic> conflicts){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,conflicts,::String,groupName,::cpp::VirtualArray,group) HXARGC(3)
            		void _hx_run(int i,int j, ::flixel::addons::input::FlxControlInputTypeRaw input){
            			HX_GC_STACKFRAME(&_hx_pos_d68d2c5e7e51873a_916_addAllConflicts)
HXLINE( 916)			::Array< ::Dynamic> conflicts1 = conflicts;
HXDLIN( 916)			conflicts1->push( ::flixel::addons::input::GroupConflict_obj::__alloc( HX_CTX ,groupName,group->__get(i),group->__get(j),input));
            		}
            		HX_END_LOCAL_FUNC3((void))

            	HX_STACKFRAME(&_hx_pos_d68d2c5e7e51873a_912_addAllConflicts)
HXLINE( 913)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(group->get_length());
HXDLIN( 913)		{
HXLINE( 913)			int _g = 0;
HXDLIN( 913)			int _g1 = group->get_length();
HXDLIN( 913)			while((_g < _g1)){
HXLINE( 913)				_g = (_g + 1);
HXDLIN( 913)				int i = (_g - 1);
HXDLIN( 913)				{
HXLINE( 913)					::Array< ::Dynamic> inValue = controls->listInputsFor(_hx_array_unsafe_get(group,i),null());
HXDLIN( 913)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN( 913)		::Array< ::Dynamic> inputs = result;
HXLINE( 914)		 ::Dynamic addConflict =  ::Dynamic(new _hx_Closure_0(conflicts,groupName,group));
HXLINE( 919)		::Array< int > i1 = ::Array_obj< int >::__new(1)->init(0,group->get_length());
HXLINE( 920)		while((i1[0]-- > 0)){
HXLINE( 922)			::Array< int > j = ::Array_obj< int >::__new(1)->init(0,i1->__get(0));
HXLINE( 923)			while((j[0]-- > 0)){
            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_1,::Array< int >,j,::Array< int >,i1, ::Dynamic,addConflict) HXARGC(1)
            				void _hx_run( ::flixel::addons::input::FlxControlInputTypeRaw input){
            					HX_STACKFRAME(&_hx_pos_d68d2c5e7e51873a_924_addAllConflicts)
HXLINE( 924)					addConflict(i1->__get(0),j->__get(0),input);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 924)				::flixel::addons::input::_FlxControls::GroupTools_obj::forEachConflict(inputs->__get(i1->__get(0)).StaticCast< ::Array< ::Dynamic> >(),inputs->__get(j->__get(0)).StaticCast< ::Array< ::Dynamic> >(), ::Dynamic(new _hx_Closure_1(j,i1,addConflict)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GroupTools_obj,addAllConflicts,(void))

void GroupTools_obj::forEachConflict(::Array< ::Dynamic> listA,::Array< ::Dynamic> listB, ::Dynamic func){
            	HX_STACKFRAME(&_hx_pos_d68d2c5e7e51873a_935_forEachConflict)
HXDLIN( 935)		int _g = 0;
HXDLIN( 935)		while((_g < listA->length)){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::addons::input::FlxControlInputTypeRaw,_e) HXARGC(1)
            			bool _hx_run( ::flixel::addons::input::FlxControlInputTypeRaw input){
            				HX_STACKFRAME(&_hx_pos_d68d2c5e7e51873a_937_forEachConflict)
HXLINE( 937)				return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::conflicts(_e,input);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXDLIN( 935)			 ::flixel::addons::input::FlxControlInputTypeRaw inputA = listA->__get(_g).StaticCast<  ::flixel::addons::input::FlxControlInputTypeRaw >();
HXDLIN( 935)			_g = (_g + 1);
HXLINE( 937)			 ::flixel::addons::input::FlxControlInputTypeRaw _e = inputA;
HXDLIN( 937)			if (::Lambda_obj::exists(listB, ::Dynamic(new _hx_Closure_0(_e)))) {
HXLINE( 938)				func(inputA);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GroupTools_obj,forEachConflict,(void))

::cpp::VirtualArray GroupTools_obj::getConflictingActions( ::flixel::addons::input::FlxControls controls,::cpp::VirtualArray group, ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_STACKFRAME(&_hx_pos_d68d2c5e7e51873a_951_getConflictingActions)
HXLINE( 952)		::cpp::VirtualArray list = ::cpp::VirtualArray_obj::__new();
HXLINE( 953)		{
HXLINE( 953)			int _g = 0;
HXDLIN( 953)			while((_g < group->get_length())){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::addons::input::FlxControlInputTypeRaw,_e) HXARGC(1)
            				bool _hx_run( ::flixel::addons::input::FlxControlInputTypeRaw input){
            					HX_STACKFRAME(&_hx_pos_d68d2c5e7e51873a_956_getConflictingActions)
HXLINE( 956)					return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::conflicts(_e,input);
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 953)				 ::Dynamic action = group->__get(_g);
HXDLIN( 953)				_g = (_g + 1);
HXLINE( 955)				::Array< ::Dynamic> inputs = controls->listInputsFor(action,null());
HXLINE( 956)				 ::flixel::addons::input::FlxControlInputTypeRaw _e = input;
HXDLIN( 956)				if (::Lambda_obj::exists(inputs, ::Dynamic(new _hx_Closure_0(_e)))) {
HXLINE( 957)					list->push(action);
            				}
            			}
            		}
HXLINE( 959)		return list;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GroupTools_obj,getConflictingActions,return )

 ::flixel::addons::input::GroupConflictsResults GroupTools_obj::resultsFromArray(::Array< ::Dynamic> list){
            	HX_STACKFRAME(&_hx_pos_d68d2c5e7e51873a_964_resultsFromArray)
HXDLIN( 964)		if ((list->length == 0)) {
HXDLIN( 964)			return ::flixel::addons::input::GroupConflictsResults_obj::None_dyn();
            		}
            		else {
HXDLIN( 964)			return ::flixel::addons::input::GroupConflictsResults_obj::Found(list);
            		}
HXDLIN( 964)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GroupTools_obj,resultsFromArray,return )

 ::flixel::addons::input::GroupConflictsResults GroupTools_obj::resultsFromActionArray(::cpp::VirtualArray list,::String group, ::Dynamic action2, ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_GC_STACKFRAME(&_hx_pos_d68d2c5e7e51873a_970_resultsFromActionArray)
HXDLIN( 970)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(list->get_length());
HXDLIN( 970)		{
HXDLIN( 970)			int _g = 0;
HXDLIN( 970)			int _g1 = list->get_length();
HXDLIN( 970)			while((_g < _g1)){
HXDLIN( 970)				_g = (_g + 1);
HXDLIN( 970)				int i = (_g - 1);
HXDLIN( 970)				{
HXDLIN( 970)					 ::flixel::addons::input::GroupConflict inValue =  ::flixel::addons::input::GroupConflict_obj::__alloc( HX_CTX ,group,_hx_array_unsafe_get(list,i),action2,input);
HXDLIN( 970)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN( 970)		return ::flixel::addons::input::_FlxControls::GroupTools_obj::resultsFromArray(result);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GroupTools_obj,resultsFromActionArray,return )


GroupTools_obj::GroupTools_obj()
{
}

bool GroupTools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"addAllConflicts") ) { outValue = addAllConflicts_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"forEachConflict") ) { outValue = forEachConflict_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"resultsFromArray") ) { outValue = resultsFromArray_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getConflictingActions") ) { outValue = getConflictingActions_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"resultsFromActionArray") ) { outValue = resultsFromActionArray_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *GroupTools_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *GroupTools_obj_sStaticStorageInfo = 0;
#endif

::hx::Class GroupTools_obj::__mClass;

static ::String GroupTools_obj_sStaticFields[] = {
	HX_("addAllConflicts",41,24,bf,0a),
	HX_("forEachConflict",1c,2a,b5,6e),
	HX_("getConflictingActions",43,46,5f,7f),
	HX_("resultsFromArray",f9,0f,78,ce),
	HX_("resultsFromActionArray",63,18,0f,6c),
	::String(null())
};

void GroupTools_obj::__register()
{
	GroupTools_obj _hx_dummy;
	GroupTools_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input._FlxControls.GroupTools",14,d6,a4,9b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GroupTools_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GroupTools_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< GroupTools_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GroupTools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GroupTools_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
} // end namespace _FlxControls
