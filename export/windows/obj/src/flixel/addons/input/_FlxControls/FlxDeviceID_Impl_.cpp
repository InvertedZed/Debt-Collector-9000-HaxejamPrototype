// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_addons_input_FlxDeviceIDRaw
#include <flixel/addons/input/FlxDeviceIDRaw.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxControls_FlxDeviceID_Impl_
#include <flixel/addons/input/_FlxControls/FlxDeviceID_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_2d7395fb7a855730_834_fromInt,"flixel.addons.input._FlxControls.FlxDeviceID_Impl_","fromInt",0x9fb16ee2,"flixel.addons.input._FlxControls.FlxDeviceID_Impl_.fromInt","flixel/addons/input/FlxControls.hx",834,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_2d7395fb7a855730_850_toDeviceID,"flixel.addons.input._FlxControls.FlxDeviceID_Impl_","toDeviceID",0x0501956f,"flixel.addons.input._FlxControls.FlxDeviceID_Impl_.toDeviceID","flixel/addons/input/FlxControls.hx",850,0x03116ce4)
namespace flixel{
namespace addons{
namespace input{
namespace _FlxControls{

void FlxDeviceID_Impl__obj::__construct() { }

Dynamic FlxDeviceID_Impl__obj::__CreateEmpty() { return new FlxDeviceID_Impl__obj; }

void *FlxDeviceID_Impl__obj::_hx_vtable = 0;

Dynamic FlxDeviceID_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxDeviceID_Impl__obj > _hx_result = new FlxDeviceID_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxDeviceID_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x631b6bbf;
}

 ::flixel::addons::input::FlxDeviceIDRaw FlxDeviceID_Impl__obj::fromInt(int id){
            	HX_STACKFRAME(&_hx_pos_2d7395fb7a855730_834_fromInt)
HXDLIN( 834)		switch((int)(id)){
            			case (int)-3: {
HXLINE( 841)				return ::flixel::addons::input::FlxDeviceIDRaw_obj::NONE_dyn();
            			}
            			break;
            			case (int)-2: {
HXLINE( 837)				return ::flixel::addons::input::FlxDeviceIDRaw_obj::FIRST_ACTIVE_dyn();
            			}
            			break;
            			case (int)-1: {
HXLINE( 839)				return ::flixel::addons::input::FlxDeviceIDRaw_obj::ALL_dyn();
            			}
            			break;
            			default:{
HXLINE( 843)				return ::flixel::addons::input::FlxDeviceIDRaw_obj::ID(id);
            			}
            		}
HXLINE( 834)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxDeviceID_Impl__obj,fromInt,return )

int FlxDeviceID_Impl__obj::toDeviceID( ::flixel::addons::input::FlxDeviceIDRaw this1){
            	HX_STACKFRAME(&_hx_pos_2d7395fb7a855730_850_toDeviceID)
HXDLIN( 850)		switch((int)(this1->_hx_getIndex())){
            			case (int)0: {
HXLINE( 853)				return -2;
            			}
            			break;
            			case (int)1: {
HXLINE( 855)				return -1;
            			}
            			break;
            			case (int)2: {
HXLINE( 857)				return -3;
            			}
            			break;
            			case (int)3: {
HXLINE( 858)				int id = this1->_hx_getInt(0);
HXLINE( 859)				return id;
            			}
            			break;
            		}
HXLINE( 850)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxDeviceID_Impl__obj,toDeviceID,return )


FlxDeviceID_Impl__obj::FlxDeviceID_Impl__obj()
{
}

bool FlxDeviceID_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"toDeviceID") ) { outValue = toDeviceID_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxDeviceID_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlxDeviceID_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class FlxDeviceID_Impl__obj::__mClass;

static ::String FlxDeviceID_Impl__obj_sStaticFields[] = {
	HX_("fromInt",a5,dd,fa,57),
	HX_("toDeviceID",8c,82,b5,16),
	::String(null())
};

void FlxDeviceID_Impl__obj::__register()
{
	FlxDeviceID_Impl__obj _hx_dummy;
	FlxDeviceID_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input._FlxControls.FlxDeviceID_Impl_",ab,ec,98,34);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxDeviceID_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxDeviceID_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxDeviceID_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxDeviceID_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxDeviceID_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
} // end namespace _FlxControls
