// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_addons_input_FlxDeviceIDRaw
#include <flixel/addons/input/FlxDeviceIDRaw.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_ActionInputAnalog
#include <flixel/addons/input/_FlxAnalogSet/ActionInputAnalog.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_Analog2DGamepad
#include <flixel/addons/input/_FlxAnalogSet/Analog2DGamepad.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_FlxAnalogSet_Fields_
#include <flixel/addons/input/_FlxAnalogSet/FlxAnalogSet_Fields_.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxControls_FlxDeviceID_Impl_
#include <flixel/addons/input/_FlxControls/FlxDeviceID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputAnalog
#include <flixel/input/actions/FlxActionInputAnalog.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputDevice
#include <flixel/input/actions/FlxInputDevice.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1b6601a9f0594d77_813_new,"flixel.addons.input._FlxAnalogSet.Analog2DGamepad","new",0x5d2fb095,"flixel.addons.input._FlxAnalogSet.Analog2DGamepad.new","flixel/addons/input/FlxAnalogSet.hx",813,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_1b6601a9f0594d77_823_update,"flixel.addons.input._FlxAnalogSet.Analog2DGamepad","update",0x97ddf4f4,"flixel.addons.input._FlxAnalogSet.Analog2DGamepad.update","flixel/addons/input/FlxAnalogSet.hx",823,0x73cae450)
namespace flixel{
namespace addons{
namespace input{
namespace _FlxAnalogSet{

void Analog2DGamepad_obj::__construct( ::flixel::addons::input::FlxDeviceIDRaw gamepadID,int trigger,int up,int down,int right,int left){
            	HX_STACKFRAME(&_hx_pos_1b6601a9f0594d77_813_new)
HXLINE( 814)		this->up = up;
HXLINE( 815)		this->down = down;
HXLINE( 816)		this->right = right;
HXLINE( 817)		this->left = left;
HXLINE( 819)		super::__construct(::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn(),-1,trigger,3,::flixel::addons::input::_FlxControls::FlxDeviceID_Impl__obj::toDeviceID(gamepadID));
            	}

Dynamic Analog2DGamepad_obj::__CreateEmpty() { return new Analog2DGamepad_obj; }

void *Analog2DGamepad_obj::_hx_vtable = 0;

Dynamic Analog2DGamepad_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Analog2DGamepad_obj > _hx_result = new Analog2DGamepad_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Analog2DGamepad_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x51a57ca0) {
		if (inClassId<=(int)0x20308a99) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x20308a99;
		} else {
			return inClassId==(int)0x51a57ca0;
		}
	} else {
		return inClassId==(int)0x6ecd22ef || inClassId==(int)0x7f995ee1;
	}
}

void Analog2DGamepad_obj::update(){
            	HX_STACKFRAME(&_hx_pos_1b6601a9f0594d77_823_update)
HXLINE( 825)		int id = this->right;
HXDLIN( 825)		Float newX;
HXDLIN( 825)		if (::flixel::addons::input::_FlxAnalogSet::FlxAnalogSet_Fields__obj::checkPadBool(id,::flixel::addons::input::_FlxControls::FlxDeviceID_Impl__obj::fromInt(this->deviceID))) {
HXLINE( 825)			newX = ((Float)1.0);
            		}
            		else {
HXLINE( 825)			newX = ((Float)0.0);
            		}
HXDLIN( 825)		int id1 = this->left;
HXDLIN( 825)		Float newX1;
HXDLIN( 825)		if (::flixel::addons::input::_FlxAnalogSet::FlxAnalogSet_Fields__obj::checkPadBool(id1,::flixel::addons::input::_FlxControls::FlxDeviceID_Impl__obj::fromInt(this->deviceID))) {
HXLINE( 825)			newX1 = ((Float)1.0);
            		}
            		else {
HXLINE( 825)			newX1 = ((Float)0.0);
            		}
HXDLIN( 825)		Float newX2 = (newX - newX1);
HXLINE( 826)		int id2 = this->up;
HXDLIN( 826)		Float newY;
HXDLIN( 826)		if (::flixel::addons::input::_FlxAnalogSet::FlxAnalogSet_Fields__obj::checkPadBool(id2,::flixel::addons::input::_FlxControls::FlxDeviceID_Impl__obj::fromInt(this->deviceID))) {
HXLINE( 826)			newY = ((Float)1.0);
            		}
            		else {
HXLINE( 826)			newY = ((Float)0.0);
            		}
HXDLIN( 826)		int id3 = this->down;
HXDLIN( 826)		Float newY1;
HXDLIN( 826)		if (::flixel::addons::input::_FlxAnalogSet::FlxAnalogSet_Fields__obj::checkPadBool(id3,::flixel::addons::input::_FlxControls::FlxDeviceID_Impl__obj::fromInt(this->deviceID))) {
HXLINE( 826)			newY1 = ((Float)1.0);
            		}
            		else {
HXLINE( 826)			newY1 = ((Float)0.0);
            		}
HXDLIN( 826)		Float newY2 = (newY - newY1);
HXLINE( 827)		this->updateValues(newX2,newY2);
            	}



::hx::ObjectPtr< Analog2DGamepad_obj > Analog2DGamepad_obj::__new( ::flixel::addons::input::FlxDeviceIDRaw gamepadID,int trigger,int up,int down,int right,int left) {
	::hx::ObjectPtr< Analog2DGamepad_obj > __this = new Analog2DGamepad_obj();
	__this->__construct(gamepadID,trigger,up,down,right,left);
	return __this;
}

::hx::ObjectPtr< Analog2DGamepad_obj > Analog2DGamepad_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::input::FlxDeviceIDRaw gamepadID,int trigger,int up,int down,int right,int left) {
	Analog2DGamepad_obj *__this = (Analog2DGamepad_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Analog2DGamepad_obj), true, "flixel.addons.input._FlxAnalogSet.Analog2DGamepad"));
	*(void **)__this = Analog2DGamepad_obj::_hx_vtable;
	__this->__construct(gamepadID,trigger,up,down,right,left);
	return __this;
}

Analog2DGamepad_obj::Analog2DGamepad_obj()
{
}

::hx::Val Analog2DGamepad_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { return ::hx::Val( up ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { return ::hx::Val( down ); }
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Analog2DGamepad_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { up=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { down=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { right=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Analog2DGamepad_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("up",5b,66,00,00));
	outFields->push(HX_("down",62,f8,6d,42));
	outFields->push(HX_("right",dc,0b,64,e9));
	outFields->push(HX_("left",07,08,b0,47));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Analog2DGamepad_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Analog2DGamepad_obj,up),HX_("up",5b,66,00,00)},
	{::hx::fsInt,(int)offsetof(Analog2DGamepad_obj,down),HX_("down",62,f8,6d,42)},
	{::hx::fsInt,(int)offsetof(Analog2DGamepad_obj,right),HX_("right",dc,0b,64,e9)},
	{::hx::fsInt,(int)offsetof(Analog2DGamepad_obj,left),HX_("left",07,08,b0,47)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Analog2DGamepad_obj_sStaticStorageInfo = 0;
#endif

static ::String Analog2DGamepad_obj_sMemberFields[] = {
	HX_("up",5b,66,00,00),
	HX_("down",62,f8,6d,42),
	HX_("right",dc,0b,64,e9),
	HX_("left",07,08,b0,47),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Analog2DGamepad_obj::__mClass;

void Analog2DGamepad_obj::__register()
{
	Analog2DGamepad_obj _hx_dummy;
	Analog2DGamepad_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input._FlxAnalogSet.Analog2DGamepad",23,c2,e4,18);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Analog2DGamepad_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Analog2DGamepad_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Analog2DGamepad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Analog2DGamepad_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
} // end namespace _FlxAnalogSet
