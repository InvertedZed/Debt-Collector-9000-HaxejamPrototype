// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_ActionInputAnalog
#include <flixel/addons/input/_FlxAnalogSet/ActionInputAnalog.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_AnalogMouseWheelDelta
#include <flixel/addons/input/_FlxAnalogSet/AnalogMouseWheelDelta.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputAnalog
#include <flixel/input/actions/FlxActionInputAnalog.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputDevice
#include <flixel/input/actions/FlxInputDevice.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_45b6ff9e58414caf_958_new,"flixel.addons.input._FlxAnalogSet.AnalogMouseWheelDelta","new",0x9bf0cde8,"flixel.addons.input._FlxAnalogSet.AnalogMouseWheelDelta.new","flixel/addons/input/FlxAnalogSet.hx",958,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_45b6ff9e58414caf_966_updateValues,"flixel.addons.input._FlxAnalogSet.AnalogMouseWheelDelta","updateValues",0x2065bc43,"flixel.addons.input._FlxAnalogSet.AnalogMouseWheelDelta.updateValues","flixel/addons/input/FlxAnalogSet.hx",966,0x73cae450)
namespace flixel{
namespace addons{
namespace input{
namespace _FlxAnalogSet{

void AnalogMouseWheelDelta_obj::__construct(int trigger,::hx::Null< Float >  __o_scale){
            		Float scale = __o_scale.Default(((Float)0.1));
            	HX_STACKFRAME(&_hx_pos_45b6ff9e58414caf_958_new)
HXLINE( 959)		this->scale = scale;
HXLINE( 960)		super::__construct(::flixel::input::actions::FlxInputDevice_obj::MOUSE_dyn(),-1,trigger,0,null());
            	}

Dynamic AnalogMouseWheelDelta_obj::__CreateEmpty() { return new AnalogMouseWheelDelta_obj; }

void *AnalogMouseWheelDelta_obj::_hx_vtable = 0;

Dynamic AnalogMouseWheelDelta_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AnalogMouseWheelDelta_obj > _hx_result = new AnalogMouseWheelDelta_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool AnalogMouseWheelDelta_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x51a57ca0) {
		if (inClassId<=(int)0x20308a99) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x20308a99;
		} else {
			return inClassId==(int)0x51a57ca0;
		}
	} else {
		return inClassId==(int)0x7186098a || inClassId==(int)0x7f995ee1;
	}
}

void AnalogMouseWheelDelta_obj::updateValues(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_45b6ff9e58414caf_966_updateValues)
HXDLIN( 966)		this->super::updateValues((( (Float)(::flixel::FlxG_obj::mouse->wheel) ) * this->scale),0);
            	}



::hx::ObjectPtr< AnalogMouseWheelDelta_obj > AnalogMouseWheelDelta_obj::__new(int trigger,::hx::Null< Float >  __o_scale) {
	::hx::ObjectPtr< AnalogMouseWheelDelta_obj > __this = new AnalogMouseWheelDelta_obj();
	__this->__construct(trigger,__o_scale);
	return __this;
}

::hx::ObjectPtr< AnalogMouseWheelDelta_obj > AnalogMouseWheelDelta_obj::__alloc(::hx::Ctx *_hx_ctx,int trigger,::hx::Null< Float >  __o_scale) {
	AnalogMouseWheelDelta_obj *__this = (AnalogMouseWheelDelta_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AnalogMouseWheelDelta_obj), true, "flixel.addons.input._FlxAnalogSet.AnalogMouseWheelDelta"));
	*(void **)__this = AnalogMouseWheelDelta_obj::_hx_vtable;
	__this->__construct(trigger,__o_scale);
	return __this;
}

AnalogMouseWheelDelta_obj::AnalogMouseWheelDelta_obj()
{
}

::hx::Val AnalogMouseWheelDelta_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return ::hx::Val( scale ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateValues") ) { return ::hx::Val( updateValues_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AnalogMouseWheelDelta_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AnalogMouseWheelDelta_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("scale",8a,ce,ce,78));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AnalogMouseWheelDelta_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(AnalogMouseWheelDelta_obj,scale),HX_("scale",8a,ce,ce,78)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AnalogMouseWheelDelta_obj_sStaticStorageInfo = 0;
#endif

static ::String AnalogMouseWheelDelta_obj_sMemberFields[] = {
	HX_("scale",8a,ce,ce,78),
	HX_("updateValues",cb,aa,7a,4f),
	::String(null()) };

::hx::Class AnalogMouseWheelDelta_obj::__mClass;

void AnalogMouseWheelDelta_obj::__register()
{
	AnalogMouseWheelDelta_obj _hx_dummy;
	AnalogMouseWheelDelta_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input._FlxAnalogSet.AnalogMouseWheelDelta",f6,f9,b1,e5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AnalogMouseWheelDelta_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AnalogMouseWheelDelta_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AnalogMouseWheelDelta_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AnalogMouseWheelDelta_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
} // end namespace _FlxAnalogSet
