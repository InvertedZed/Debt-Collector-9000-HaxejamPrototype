// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_AnalogMouseDrag
#include <flixel/addons/input/_FlxAnalogSet/AnalogMouseDrag.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputAnalog
#include <flixel/input/actions/FlxActionInputAnalog.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputAnalogClickAndDragMouseMotion
#include <flixel/input/actions/FlxActionInputAnalogClickAndDragMouseMotion.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputAnalogMouseMotion
#include <flixel/input/actions/FlxActionInputAnalogMouseMotion.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1d26539bd89e0e04_907_new,"flixel.addons.input._FlxAnalogSet.AnalogMouseDrag","new",0x872ab73f,"flixel.addons.input._FlxAnalogSet.AnalogMouseDrag.new","flixel/addons/input/FlxAnalogSet.hx",907,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_1d26539bd89e0e04_911_updateValues,"flixel.addons.input._FlxAnalogSet.AnalogMouseDrag","updateValues",0xa675700c,"flixel.addons.input._FlxAnalogSet.AnalogMouseDrag.updateValues","flixel/addons/input/FlxAnalogSet.hx",911,0x73cae450)
namespace flixel{
namespace addons{
namespace input{
namespace _FlxAnalogSet{

void AnalogMouseDrag_obj::__construct(int buttonID,int trigger,::hx::Null< int >  __o_axis,::hx::Null< Float >  __o_scale,::hx::Null< Float >  __o_deadzone,::hx::Null< int >  __o_invert){
            		int axis = __o_axis.Default(3);
            		Float scale = __o_scale.Default(((Float)0.1));
            		Float deadzone = __o_deadzone.Default(((Float)0.1));
            		int invert = __o_invert.Default(0);
            	HX_STACKFRAME(&_hx_pos_1d26539bd89e0e04_907_new)
HXDLIN( 907)		bool _hx_tmp;
HXDLIN( 907)		if ((invert != 16)) {
HXDLIN( 907)			_hx_tmp = (invert == 17);
            		}
            		else {
HXDLIN( 907)			_hx_tmp = true;
            		}
HXDLIN( 907)		bool _hx_tmp1;
HXDLIN( 907)		if ((invert != 1)) {
HXDLIN( 907)			_hx_tmp1 = (invert == 17);
            		}
            		else {
HXDLIN( 907)			_hx_tmp1 = true;
            		}
HXDLIN( 907)		super::__construct(buttonID,trigger,axis,::Math_obj::ceil((((Float)1.0) / scale)),deadzone,_hx_tmp,_hx_tmp1);
            	}

Dynamic AnalogMouseDrag_obj::__CreateEmpty() { return new AnalogMouseDrag_obj; }

void *AnalogMouseDrag_obj::_hx_vtable = 0;

Dynamic AnalogMouseDrag_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AnalogMouseDrag_obj > _hx_result = new AnalogMouseDrag_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool AnalogMouseDrag_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20308a99) {
		if (inClassId<=(int)0x1d9f0cda) {
			if (inClassId<=(int)0x0c5bf117) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0c5bf117;
			} else {
				return inClassId==(int)0x1d9f0cda;
			}
		} else {
			return inClassId==(int)0x20308a99;
		}
	} else {
		return inClassId==(int)0x79489845 || inClassId==(int)0x7f995ee1;
	}
}

void AnalogMouseDrag_obj::updateValues(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_1d26539bd89e0e04_911_updateValues)
HXLINE( 912)		if ((this->axis == 1)) {
HXLINE( 913)			x = y;
            		}
HXLINE( 915)		this->super::updateValues(x,y);
            	}



::hx::ObjectPtr< AnalogMouseDrag_obj > AnalogMouseDrag_obj::__new(int buttonID,int trigger,::hx::Null< int >  __o_axis,::hx::Null< Float >  __o_scale,::hx::Null< Float >  __o_deadzone,::hx::Null< int >  __o_invert) {
	::hx::ObjectPtr< AnalogMouseDrag_obj > __this = new AnalogMouseDrag_obj();
	__this->__construct(buttonID,trigger,__o_axis,__o_scale,__o_deadzone,__o_invert);
	return __this;
}

::hx::ObjectPtr< AnalogMouseDrag_obj > AnalogMouseDrag_obj::__alloc(::hx::Ctx *_hx_ctx,int buttonID,int trigger,::hx::Null< int >  __o_axis,::hx::Null< Float >  __o_scale,::hx::Null< Float >  __o_deadzone,::hx::Null< int >  __o_invert) {
	AnalogMouseDrag_obj *__this = (AnalogMouseDrag_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AnalogMouseDrag_obj), true, "flixel.addons.input._FlxAnalogSet.AnalogMouseDrag"));
	*(void **)__this = AnalogMouseDrag_obj::_hx_vtable;
	__this->__construct(buttonID,trigger,__o_axis,__o_scale,__o_deadzone,__o_invert);
	return __this;
}

AnalogMouseDrag_obj::AnalogMouseDrag_obj()
{
}

::hx::Val AnalogMouseDrag_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"updateValues") ) { return ::hx::Val( updateValues_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *AnalogMouseDrag_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *AnalogMouseDrag_obj_sStaticStorageInfo = 0;
#endif

static ::String AnalogMouseDrag_obj_sMemberFields[] = {
	HX_("updateValues",cb,aa,7a,4f),
	::String(null()) };

::hx::Class AnalogMouseDrag_obj::__mClass;

void AnalogMouseDrag_obj::__register()
{
	AnalogMouseDrag_obj _hx_dummy;
	AnalogMouseDrag_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input._FlxAnalogSet.AnalogMouseDrag",cd,ab,18,ee);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AnalogMouseDrag_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AnalogMouseDrag_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AnalogMouseDrag_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AnalogMouseDrag_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
} // end namespace _FlxAnalogSet
