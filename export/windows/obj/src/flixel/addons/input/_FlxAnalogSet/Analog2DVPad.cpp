// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_ActionInputAnalog
#include <flixel/addons/input/_FlxAnalogSet/ActionInputAnalog.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_Analog2DVPad
#include <flixel/addons/input/_FlxAnalogSet/Analog2DVPad.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxControls_VirtualPadInputProxy
#include <flixel/addons/input/_FlxControls/VirtualPadInputProxy.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputAnalog
#include <flixel/input/actions/FlxActionInputAnalog.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputDevice
#include <flixel/input/actions/FlxInputDevice.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ab7cfa55ea78308f_876_new,"flixel.addons.input._FlxAnalogSet.Analog2DVPad","new",0xbb07ca2d,"flixel.addons.input._FlxAnalogSet.Analog2DVPad.new","flixel/addons/input/FlxAnalogSet.hx",876,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_ab7cfa55ea78308f_887_update,"flixel.addons.input._FlxAnalogSet.Analog2DVPad","update",0x5bd3ea5c,"flixel.addons.input._FlxAnalogSet.Analog2DVPad.update","flixel/addons/input/FlxAnalogSet.hx",887,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_ab7cfa55ea78308f_896_destroy,"flixel.addons.input._FlxAnalogSet.Analog2DVPad","destroy",0x844f9147,"flixel.addons.input._FlxAnalogSet.Analog2DVPad.destroy","flixel/addons/input/FlxAnalogSet.hx",896,0x73cae450)
namespace flixel{
namespace addons{
namespace input{
namespace _FlxAnalogSet{

void Analog2DVPad_obj::__construct( ::haxe::ds::StringMap proxies,int trigger,::String up,::String down,::String right,::String left){
            	HX_STACKFRAME(&_hx_pos_ab7cfa55ea78308f_876_new)
HXLINE( 877)		this->proxies = proxies;
HXLINE( 878)		this->up = up;
HXLINE( 879)		this->down = down;
HXLINE( 880)		this->right = right;
HXLINE( 881)		this->left = left;
HXLINE( 883)		super::__construct(::flixel::input::actions::FlxInputDevice_obj::IFLXINPUT_OBJECT_dyn(),-1,trigger,3,null());
            	}

Dynamic Analog2DVPad_obj::__CreateEmpty() { return new Analog2DVPad_obj; }

void *Analog2DVPad_obj::_hx_vtable = 0;

Dynamic Analog2DVPad_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Analog2DVPad_obj > _hx_result = new Analog2DVPad_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Analog2DVPad_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20308a99) {
		if (inClassId<=(int)0x073e7d0b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x073e7d0b;
		} else {
			return inClassId==(int)0x20308a99;
		}
	} else {
		return inClassId==(int)0x51a57ca0 || inClassId==(int)0x7f995ee1;
	}
}

void Analog2DVPad_obj::update(){
            	HX_STACKFRAME(&_hx_pos_ab7cfa55ea78308f_887_update)
HXLINE( 889)		Float newX;
HXDLIN( 889)		if (( ( ::flixel::addons::input::_FlxControls::VirtualPadInputProxy)(this->proxies->get(this->right)) )->get_pressed()) {
HXLINE( 889)			newX = ((Float)1.0);
            		}
            		else {
HXLINE( 889)			newX = ((Float)0.0);
            		}
HXDLIN( 889)		Float newX1;
HXDLIN( 889)		if (( ( ::flixel::addons::input::_FlxControls::VirtualPadInputProxy)(this->proxies->get(this->left)) )->get_pressed()) {
HXLINE( 889)			newX1 = ((Float)1.0);
            		}
            		else {
HXLINE( 889)			newX1 = ((Float)0.0);
            		}
HXDLIN( 889)		Float newX2 = (newX - newX1);
HXLINE( 890)		Float newY;
HXDLIN( 890)		if (( ( ::flixel::addons::input::_FlxControls::VirtualPadInputProxy)(this->proxies->get(this->up)) )->get_pressed()) {
HXLINE( 890)			newY = ((Float)1.0);
            		}
            		else {
HXLINE( 890)			newY = ((Float)0.0);
            		}
HXDLIN( 890)		Float newY1;
HXDLIN( 890)		if (( ( ::flixel::addons::input::_FlxControls::VirtualPadInputProxy)(this->proxies->get(this->down)) )->get_pressed()) {
HXLINE( 890)			newY1 = ((Float)1.0);
            		}
            		else {
HXLINE( 890)			newY1 = ((Float)0.0);
            		}
HXDLIN( 890)		Float newY2 = (newY - newY1);
HXLINE( 891)		this->updateValues(newX2,newY2);
            	}


void Analog2DVPad_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_ab7cfa55ea78308f_896_destroy)
HXLINE( 897)		this->super::destroy();
HXLINE( 898)		this->proxies = null();
            	}



::hx::ObjectPtr< Analog2DVPad_obj > Analog2DVPad_obj::__new( ::haxe::ds::StringMap proxies,int trigger,::String up,::String down,::String right,::String left) {
	::hx::ObjectPtr< Analog2DVPad_obj > __this = new Analog2DVPad_obj();
	__this->__construct(proxies,trigger,up,down,right,left);
	return __this;
}

::hx::ObjectPtr< Analog2DVPad_obj > Analog2DVPad_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::ds::StringMap proxies,int trigger,::String up,::String down,::String right,::String left) {
	Analog2DVPad_obj *__this = (Analog2DVPad_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Analog2DVPad_obj), true, "flixel.addons.input._FlxAnalogSet.Analog2DVPad"));
	*(void **)__this = Analog2DVPad_obj::_hx_vtable;
	__this->__construct(proxies,trigger,up,down,right,left);
	return __this;
}

Analog2DVPad_obj::Analog2DVPad_obj()
{
}

void Analog2DVPad_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Analog2DVPad);
	HX_MARK_MEMBER_NAME(proxies,"proxies");
	HX_MARK_MEMBER_NAME(up,"up");
	HX_MARK_MEMBER_NAME(down,"down");
	HX_MARK_MEMBER_NAME(right,"right");
	HX_MARK_MEMBER_NAME(left,"left");
	 ::flixel::input::actions::FlxActionInputAnalog_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Analog2DVPad_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(proxies,"proxies");
	HX_VISIT_MEMBER_NAME(up,"up");
	HX_VISIT_MEMBER_NAME(down,"down");
	HX_VISIT_MEMBER_NAME(right,"right");
	HX_VISIT_MEMBER_NAME(left,"left");
	 ::flixel::input::actions::FlxActionInputAnalog_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Analog2DVPad_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { return ::hx::Val( up ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { return ::hx::Val( down ); }
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"proxies") ) { return ::hx::Val( proxies ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Analog2DVPad_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { up=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { down=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { right=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"proxies") ) { proxies=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Analog2DVPad_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("proxies",4c,1a,2f,ff));
	outFields->push(HX_("up",5b,66,00,00));
	outFields->push(HX_("down",62,f8,6d,42));
	outFields->push(HX_("right",dc,0b,64,e9));
	outFields->push(HX_("left",07,08,b0,47));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Analog2DVPad_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Analog2DVPad_obj,proxies),HX_("proxies",4c,1a,2f,ff)},
	{::hx::fsString,(int)offsetof(Analog2DVPad_obj,up),HX_("up",5b,66,00,00)},
	{::hx::fsString,(int)offsetof(Analog2DVPad_obj,down),HX_("down",62,f8,6d,42)},
	{::hx::fsString,(int)offsetof(Analog2DVPad_obj,right),HX_("right",dc,0b,64,e9)},
	{::hx::fsString,(int)offsetof(Analog2DVPad_obj,left),HX_("left",07,08,b0,47)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Analog2DVPad_obj_sStaticStorageInfo = 0;
#endif

static ::String Analog2DVPad_obj_sMemberFields[] = {
	HX_("proxies",4c,1a,2f,ff),
	HX_("up",5b,66,00,00),
	HX_("down",62,f8,6d,42),
	HX_("right",dc,0b,64,e9),
	HX_("left",07,08,b0,47),
	HX_("update",09,86,05,87),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class Analog2DVPad_obj::__mClass;

void Analog2DVPad_obj::__register()
{
	Analog2DVPad_obj _hx_dummy;
	Analog2DVPad_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input._FlxAnalogSet.Analog2DVPad",bb,2f,1a,06);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Analog2DVPad_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Analog2DVPad_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Analog2DVPad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Analog2DVPad_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
} // end namespace _FlxAnalogSet
