// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxDeviceIDRaw
#include <flixel/addons/input/FlxDeviceIDRaw.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_FlxAnalogSet_Fields_
#include <flixel/addons/input/_FlxAnalogSet/FlxAnalogSet_Fields_.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxControls_VirtualPadInputProxy
#include <flixel/addons/input/_FlxControls/VirtualPadInputProxy.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxTypedGamepadMapping
#include <flixel/input/gamepad/mappings/FlxTypedGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_7e5227252269284a_694_checkKey,"flixel.addons.input._FlxAnalogSet.FlxAnalogSet_Fields_","checkKey",0xd323dbc2,"flixel.addons.input._FlxAnalogSet.FlxAnalogSet_Fields_.checkKey","flixel/addons/input/FlxAnalogSet.hx",694,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_7e5227252269284a_752_checkPad,"flixel.addons.input._FlxAnalogSet.FlxAnalogSet_Fields_","checkPad",0xd327a376,"flixel.addons.input._FlxAnalogSet.FlxAnalogSet_Fields_.checkPad","flixel/addons/input/FlxAnalogSet.hx",752,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_7e5227252269284a_758_checkPadBool,"flixel.addons.input._FlxAnalogSet.FlxAnalogSet_Fields_","checkPadBool",0x607246c0,"flixel.addons.input._FlxAnalogSet.FlxAnalogSet_Fields_.checkPadBool","flixel/addons/input/FlxAnalogSet.hx",758,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_7e5227252269284a_834_checkVPad,"flixel.addons.input._FlxAnalogSet.FlxAnalogSet_Fields_","checkVPad",0xf371c2fa,"flixel.addons.input._FlxAnalogSet.FlxAnalogSet_Fields_.checkVPad","flixel/addons/input/FlxAnalogSet.hx",834,0x73cae450)
namespace flixel{
namespace addons{
namespace input{
namespace _FlxAnalogSet{

void FlxAnalogSet_Fields__obj::__construct() { }

Dynamic FlxAnalogSet_Fields__obj::__CreateEmpty() { return new FlxAnalogSet_Fields__obj; }

void *FlxAnalogSet_Fields__obj::_hx_vtable = 0;

Dynamic FlxAnalogSet_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxAnalogSet_Fields__obj > _hx_result = new FlxAnalogSet_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxAnalogSet_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1655a84b;
}

Float FlxAnalogSet_Fields__obj::checkKey(int key){
            	HX_STACKFRAME(&_hx_pos_7e5227252269284a_694_checkKey)
HXDLIN( 694)		if (::flixel::FlxG_obj::keys->checkStatus(key,1)) {
HXDLIN( 694)			return ((Float)1.0);
            		}
            		else {
HXDLIN( 694)			return ((Float)0.0);
            		}
HXDLIN( 694)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxAnalogSet_Fields__obj,checkKey,return )

Float FlxAnalogSet_Fields__obj::checkPad(int id, ::flixel::addons::input::FlxDeviceIDRaw gamepadID){
            	HX_STACKFRAME(&_hx_pos_7e5227252269284a_752_checkPad)
HXDLIN( 752)		if (::flixel::addons::input::_FlxAnalogSet::FlxAnalogSet_Fields__obj::checkPadBool(id,gamepadID)) {
HXDLIN( 752)			return ((Float)1.0);
            		}
            		else {
HXDLIN( 752)			return ((Float)0.0);
            		}
HXDLIN( 752)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnalogSet_Fields__obj,checkPad,return )

bool FlxAnalogSet_Fields__obj::checkPadBool(int id, ::flixel::addons::input::FlxDeviceIDRaw gamepadID){
            	HX_STACKFRAME(&_hx_pos_7e5227252269284a_758_checkPadBool)
HXDLIN( 758)		switch((int)(gamepadID->_hx_getIndex())){
            			case (int)0: {
HXLINE( 764)				 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->getFirstActiveGamepad();
HXLINE( 765)				if (::hx::IsNotNull( gamepad )) {
HXLINE( 765)					int Status = 1;
HXDLIN( 765)					switch((int)(id)){
            						case (int)-2: {
HXLINE( 765)							return gamepad->anyButton(Status);
            						}
            						break;
            						case (int)-1: {
HXLINE( 765)							return !(gamepad->anyButton(Status));
            						}
            						break;
            						default:{
HXLINE( 765)							int RawID = ( (int)(gamepad->mapping->getRawID(id)) );
HXDLIN( 765)							 ::flixel::input::gamepad::FlxGamepadButton button = gamepad->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 765)							if (::hx::IsNotNull( button )) {
HXLINE( 765)								return button->hasState(Status);
            							}
            							else {
HXLINE( 765)								return false;
            							}
            						}
            					}
            				}
            				else {
HXLINE( 765)					return false;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 767)				return ::flixel::FlxG_obj::gamepads->anyHasState(id,1);
            			}
            			break;
            			case (int)2: {
HXLINE( 769)				return false;
            			}
            			break;
            			case (int)3: {
HXLINE( 760)				int id1 = gamepadID->_hx_getInt(0);
HXLINE( 761)				 ::flixel::input::gamepad::FlxGamepad gamepad1 = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id1).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 762)				if (::hx::IsNotNull( gamepad1 )) {
HXLINE( 762)					int Status1 = 1;
HXDLIN( 762)					switch((int)(id1)){
            						case (int)-2: {
HXLINE( 762)							return gamepad1->anyButton(Status1);
            						}
            						break;
            						case (int)-1: {
HXLINE( 762)							return !(gamepad1->anyButton(Status1));
            						}
            						break;
            						default:{
HXLINE( 762)							int RawID1 = ( (int)(gamepad1->mapping->getRawID(id1)) );
HXDLIN( 762)							 ::flixel::input::gamepad::FlxGamepadButton button1 = gamepad1->buttons->__get(RawID1).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 762)							if (::hx::IsNotNull( button1 )) {
HXLINE( 762)								return button1->hasState(Status1);
            							}
            							else {
HXLINE( 762)								return false;
            							}
            						}
            					}
            				}
            				else {
HXLINE( 762)					return false;
            				}
            			}
            			break;
            		}
HXLINE( 758)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnalogSet_Fields__obj,checkPadBool,return )

Float FlxAnalogSet_Fields__obj::checkVPad(::String id, ::haxe::ds::StringMap proxies){
            	HX_STACKFRAME(&_hx_pos_7e5227252269284a_834_checkVPad)
HXDLIN( 834)		if (( ( ::flixel::addons::input::_FlxControls::VirtualPadInputProxy)(proxies->get(id)) )->get_pressed()) {
HXDLIN( 834)			return ((Float)1.0);
            		}
            		else {
HXDLIN( 834)			return ((Float)0.0);
            		}
HXDLIN( 834)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnalogSet_Fields__obj,checkVPad,return )


FlxAnalogSet_Fields__obj::FlxAnalogSet_Fields__obj()
{
}

bool FlxAnalogSet_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"checkKey") ) { outValue = checkKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"checkPad") ) { outValue = checkPad_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"checkVPad") ) { outValue = checkVPad_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"checkPadBool") ) { outValue = checkPadBool_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxAnalogSet_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlxAnalogSet_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class FlxAnalogSet_Fields__obj::__mClass;

static ::String FlxAnalogSet_Fields__obj_sStaticFields[] = {
	HX_("checkKey",b7,55,e4,ac),
	HX_("checkPad",6b,1d,e8,ac),
	HX_("checkPadBool",35,5f,8f,a7),
	HX_("checkVPad",65,ff,1b,a2),
	::String(null())
};

void FlxAnalogSet_Fields__obj::__register()
{
	FlxAnalogSet_Fields__obj _hx_dummy;
	FlxAnalogSet_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input._FlxAnalogSet.FlxAnalogSet_Fields_",c3,c7,e9,57);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxAnalogSet_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxAnalogSet_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxAnalogSet_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxAnalogSet_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxAnalogSet_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
} // end namespace _FlxAnalogSet
