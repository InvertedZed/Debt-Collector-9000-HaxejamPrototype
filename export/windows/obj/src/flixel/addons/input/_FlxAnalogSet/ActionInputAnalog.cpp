// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_ActionInputAnalog
#include <flixel/addons/input/_FlxAnalogSet/ActionInputAnalog.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputAnalog
#include <flixel/input/actions/FlxActionInputAnalog.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputDevice
#include <flixel/input/actions/FlxInputDevice.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_849400cd037cff0c_681_new,"flixel.addons.input._FlxAnalogSet.ActionInputAnalog","new",0x96f3571a,"flixel.addons.input._FlxAnalogSet.ActionInputAnalog.new","flixel/addons/input/FlxAnalogSet.hx",681,0x73cae450)
namespace flixel{
namespace addons{
namespace input{
namespace _FlxAnalogSet{

void ActionInputAnalog_obj::__construct( ::flixel::input::actions::FlxInputDevice Device,int InputID,int Trigger, ::Dynamic Axis, ::Dynamic DeviceID){
            	HX_STACKFRAME(&_hx_pos_849400cd037cff0c_681_new)
HXDLIN( 681)		super::__construct(Device,InputID,Trigger,Axis,DeviceID);
            	}

Dynamic ActionInputAnalog_obj::__CreateEmpty() { return new ActionInputAnalog_obj; }

void *ActionInputAnalog_obj::_hx_vtable = 0;

Dynamic ActionInputAnalog_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ActionInputAnalog_obj > _hx_result = new ActionInputAnalog_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool ActionInputAnalog_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x51a57ca0) {
		if (inClassId<=(int)0x20308a99) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x20308a99;
		} else {
			return inClassId==(int)0x51a57ca0;
		}
	} else {
		return inClassId==(int)0x7f995ee1;
	}
}


::hx::ObjectPtr< ActionInputAnalog_obj > ActionInputAnalog_obj::__new( ::flixel::input::actions::FlxInputDevice Device,int InputID,int Trigger, ::Dynamic Axis, ::Dynamic DeviceID) {
	::hx::ObjectPtr< ActionInputAnalog_obj > __this = new ActionInputAnalog_obj();
	__this->__construct(Device,InputID,Trigger,Axis,DeviceID);
	return __this;
}

::hx::ObjectPtr< ActionInputAnalog_obj > ActionInputAnalog_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::input::actions::FlxInputDevice Device,int InputID,int Trigger, ::Dynamic Axis, ::Dynamic DeviceID) {
	ActionInputAnalog_obj *__this = (ActionInputAnalog_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ActionInputAnalog_obj), true, "flixel.addons.input._FlxAnalogSet.ActionInputAnalog"));
	*(void **)__this = ActionInputAnalog_obj::_hx_vtable;
	__this->__construct(Device,InputID,Trigger,Axis,DeviceID);
	return __this;
}

ActionInputAnalog_obj::ActionInputAnalog_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ActionInputAnalog_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ActionInputAnalog_obj_sStaticStorageInfo = 0;
#endif

::hx::Class ActionInputAnalog_obj::__mClass;

void ActionInputAnalog_obj::__register()
{
	ActionInputAnalog_obj _hx_dummy;
	ActionInputAnalog_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input._FlxAnalogSet.ActionInputAnalog",28,82,47,a9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ActionInputAnalog_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ActionInputAnalog_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ActionInputAnalog_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
} // end namespace _FlxAnalogSet
