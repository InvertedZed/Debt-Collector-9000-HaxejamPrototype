// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_ActionInputAnalog
#include <flixel/addons/input/_FlxAnalogSet/ActionInputAnalog.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_Analog1DKeys
#include <flixel/addons/input/_FlxAnalogSet/Analog1DKeys.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_FlxAnalogSet_Fields_
#include <flixel/addons/input/_FlxAnalogSet/FlxAnalogSet_Fields_.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputAnalog
#include <flixel/input/actions/FlxActionInputAnalog.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputDevice
#include <flixel/input/actions/FlxInputDevice.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2ed6536bbf04ad48_706_new,"flixel.addons.input._FlxAnalogSet.Analog1DKeys","new",0x2a688545,"flixel.addons.input._FlxAnalogSet.Analog1DKeys.new","flixel/addons/input/FlxAnalogSet.hx",706,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_2ed6536bbf04ad48_713_update,"flixel.addons.input._FlxAnalogSet.Analog1DKeys","update",0x73372e44,"flixel.addons.input._FlxAnalogSet.Analog1DKeys.update","flixel/addons/input/FlxAnalogSet.hx",713,0x73cae450)
namespace flixel{
namespace addons{
namespace input{
namespace _FlxAnalogSet{

void Analog1DKeys_obj::__construct(int trigger,int up,int down){
            	HX_STACKFRAME(&_hx_pos_2ed6536bbf04ad48_706_new)
HXLINE( 707)		this->up = up;
HXLINE( 708)		this->down = down;
HXLINE( 709)		super::__construct(::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn(),-1,trigger,0,null());
            	}

Dynamic Analog1DKeys_obj::__CreateEmpty() { return new Analog1DKeys_obj; }

void *Analog1DKeys_obj::_hx_vtable = 0;

Dynamic Analog1DKeys_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Analog1DKeys_obj > _hx_result = new Analog1DKeys_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Analog1DKeys_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x30dd975b) {
		if (inClassId<=(int)0x20308a99) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x20308a99;
		} else {
			return inClassId==(int)0x30dd975b;
		}
	} else {
		return inClassId==(int)0x51a57ca0 || inClassId==(int)0x7f995ee1;
	}
}

void Analog1DKeys_obj::update(){
            	HX_STACKFRAME(&_hx_pos_2ed6536bbf04ad48_713_update)
HXLINE( 715)		Float newX = ::flixel::addons::input::_FlxAnalogSet::FlxAnalogSet_Fields__obj::checkKey(this->up);
HXDLIN( 715)		Float newX1 = (newX - ::flixel::addons::input::_FlxAnalogSet::FlxAnalogSet_Fields__obj::checkKey(this->down));
HXLINE( 716)		this->updateValues(newX1,( (Float)(0) ));
            	}



::hx::ObjectPtr< Analog1DKeys_obj > Analog1DKeys_obj::__new(int trigger,int up,int down) {
	::hx::ObjectPtr< Analog1DKeys_obj > __this = new Analog1DKeys_obj();
	__this->__construct(trigger,up,down);
	return __this;
}

::hx::ObjectPtr< Analog1DKeys_obj > Analog1DKeys_obj::__alloc(::hx::Ctx *_hx_ctx,int trigger,int up,int down) {
	Analog1DKeys_obj *__this = (Analog1DKeys_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Analog1DKeys_obj), true, "flixel.addons.input._FlxAnalogSet.Analog1DKeys"));
	*(void **)__this = Analog1DKeys_obj::_hx_vtable;
	__this->__construct(trigger,up,down);
	return __this;
}

Analog1DKeys_obj::Analog1DKeys_obj()
{
}

::hx::Val Analog1DKeys_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { return ::hx::Val( up ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { return ::hx::Val( down ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Analog1DKeys_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { up=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { down=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Analog1DKeys_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("up",5b,66,00,00));
	outFields->push(HX_("down",62,f8,6d,42));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Analog1DKeys_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Analog1DKeys_obj,up),HX_("up",5b,66,00,00)},
	{::hx::fsInt,(int)offsetof(Analog1DKeys_obj,down),HX_("down",62,f8,6d,42)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Analog1DKeys_obj_sStaticStorageInfo = 0;
#endif

static ::String Analog1DKeys_obj_sMemberFields[] = {
	HX_("up",5b,66,00,00),
	HX_("down",62,f8,6d,42),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Analog1DKeys_obj::__mClass;

void Analog1DKeys_obj::__register()
{
	Analog1DKeys_obj _hx_dummy;
	Analog1DKeys_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input._FlxAnalogSet.Analog1DKeys",d3,7e,89,98);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Analog1DKeys_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Analog1DKeys_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Analog1DKeys_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Analog1DKeys_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
} // end namespace _FlxAnalogSet
