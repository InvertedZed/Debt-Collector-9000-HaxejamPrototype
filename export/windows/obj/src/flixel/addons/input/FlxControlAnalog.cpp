// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlAnalog
#include <flixel/addons/input/FlxControlAnalog.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlInputTypeRaw
#include <flixel/addons/input/FlxControlInputTypeRaw.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControls
#include <flixel/addons/input/FlxControls.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxDeviceIDRaw
#include <flixel/addons/input/FlxDeviceIDRaw.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxGamepadInputType
#include <flixel/addons/input/FlxGamepadInputType.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxKeyInputType
#include <flixel/addons/input/FlxKeyInputType.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxMouseInputType
#include <flixel/addons/input/FlxMouseInputType.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxVirtualPadInputType
#include <flixel/addons/input/FlxVirtualPadInputType.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_ActionInputAnalog
#include <flixel/addons/input/_FlxAnalogSet/ActionInputAnalog.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_Analog1DGamepad
#include <flixel/addons/input/_FlxAnalogSet/Analog1DGamepad.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_Analog1DKeys
#include <flixel/addons/input/_FlxAnalogSet/Analog1DKeys.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_Analog1DVPad
#include <flixel/addons/input/_FlxAnalogSet/Analog1DVPad.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_Analog2DGamepad
#include <flixel/addons/input/_FlxAnalogSet/Analog2DGamepad.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_Analog2DKeys
#include <flixel/addons/input/_FlxAnalogSet/Analog2DKeys.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_Analog2DVPad
#include <flixel/addons/input/_FlxAnalogSet/Analog2DVPad.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_AnalogGamepadStick
#include <flixel/addons/input/_FlxAnalogSet/AnalogGamepadStick.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_AnalogMouseDrag
#include <flixel/addons/input/_FlxAnalogSet/AnalogMouseDrag.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_AnalogMouseMove
#include <flixel/addons/input/_FlxAnalogSet/AnalogMouseMove.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_AnalogMousePosition
#include <flixel/addons/input/_FlxAnalogSet/AnalogMousePosition.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxAnalogSet_AnalogMouseWheelDelta
#include <flixel/addons/input/_FlxAnalogSet/AnalogMouseWheelDelta.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxControlInputType_FlxControlInputType_Impl_
#include <flixel/addons/input/_FlxControlInputType/FlxControlInputType_Impl_.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxControls_FlxDeviceID_Impl_
#include <flixel/addons/input/_FlxControls/FlxDeviceID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionAnalog
#include <flixel/input/actions/FlxActionAnalog.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputAnalog
#include <flixel/input/actions/FlxActionInputAnalog.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputAnalogClickAndDragMouseMotion
#include <flixel/input/actions/FlxActionInputAnalogClickAndDragMouseMotion.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputAnalogGamepad
#include <flixel/input/actions/FlxActionInputAnalogGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputAnalogMouseMotion
#include <flixel/input/actions/FlxActionInputAnalogMouseMotion.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputAnalogMousePosition
#include <flixel/input/actions/FlxActionInputAnalogMousePosition.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputDevice
#include <flixel/input/actions/FlxInputDevice.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad__FlxGamepadInputID_FlxGamepadInputID_Impl_
#include <flixel/input/gamepad/_FlxGamepadInputID/FlxGamepadInputID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_290_new,"flixel.addons.input.FlxControlAnalog","new",0xb6d6c41a,"flixel.addons.input.FlxControlAnalog.new","flixel/addons/input/FlxAnalogSet.hx",290,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_300_addInputType,"flixel.addons.input.FlxControlAnalog","addInputType",0xe2a99689,"flixel.addons.input.FlxControlAnalog.addInputType","flixel/addons/input/FlxAnalogSet.hx",300,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_359_removeInputType,"flixel.addons.input.FlxControlAnalog","removeInputType",0x2bd0edba,"flixel.addons.input.FlxControlAnalog.removeInputType","flixel/addons/input/FlxAnalogSet.hx",359,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_414_addGamepadInput,"flixel.addons.input.FlxControlAnalog","addGamepadInput",0xd2bc7a24,"flixel.addons.input.FlxControlAnalog.addGamepadInput","flixel/addons/input/FlxAnalogSet.hx",414,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_419_removeGamepadInput,"flixel.addons.input.FlxControlAnalog","removeGamepadInput",0x1de8f793,"flixel.addons.input.FlxControlAnalog.removeGamepadInput","flixel/addons/input/FlxAnalogSet.hx",419,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_434_removeMouseMotion,"flixel.addons.input.FlxControlAnalog","removeMouseMotion",0xe8ae9991,"flixel.addons.input.FlxControlAnalog.removeMouseMotion","flixel/addons/input/FlxAnalogSet.hx",434,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_447_removeMousePosition,"flixel.addons.input.FlxControlAnalog","removeMousePosition",0xad3b80c4,"flixel.addons.input.FlxControlAnalog.removeMousePosition","flixel/addons/input/FlxAnalogSet.hx",447,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_460_removeMouseDrag,"flixel.addons.input.FlxControlAnalog","removeMouseDrag",0x0662228f,"flixel.addons.input.FlxControlAnalog.removeMouseDrag","flixel/addons/input/FlxAnalogSet.hx",460,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_476_removeMouseWheel,"flixel.addons.input.FlxControlAnalog","removeMouseWheel",0x798005a0,"flixel.addons.input.FlxControlAnalog.removeMouseWheel","flixel/addons/input/FlxAnalogSet.hx",476,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_490_addKeys1D,"flixel.addons.input.FlxControlAnalog","addKeys1D",0x92722222,"flixel.addons.input.FlxControlAnalog.addKeys1D","flixel/addons/input/FlxAnalogSet.hx",490,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_495_addKeys2D,"flixel.addons.input.FlxControlAnalog","addKeys2D",0x92722301,"flixel.addons.input.FlxControlAnalog.addKeys2D","flixel/addons/input/FlxAnalogSet.hx",495,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_500_removeKeys1D,"flixel.addons.input.FlxControlAnalog","removeKeys1D",0x7e49d251,"flixel.addons.input.FlxControlAnalog.removeKeys1D","flixel/addons/input/FlxAnalogSet.hx",500,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_516_removeKeys2D,"flixel.addons.input.FlxControlAnalog","removeKeys2D",0x7e49d330,"flixel.addons.input.FlxControlAnalog.removeKeys2D","flixel/addons/input/FlxAnalogSet.hx",516,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_535_addGamepad1D,"flixel.addons.input.FlxControlAnalog","addGamepad1D",0x2dae1c79,"flixel.addons.input.FlxControlAnalog.addGamepad1D","flixel/addons/input/FlxAnalogSet.hx",535,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_540_addGamepad2D,"flixel.addons.input.FlxControlAnalog","addGamepad2D",0x2dae1d58,"flixel.addons.input.FlxControlAnalog.addGamepad2D","flixel/addons/input/FlxAnalogSet.hx",540,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_545_removeGamepad1D,"flixel.addons.input.FlxControlAnalog","removeGamepad1D",0x76d573aa,"flixel.addons.input.FlxControlAnalog.removeGamepad1D","flixel/addons/input/FlxAnalogSet.hx",545,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_561_removeGamepad2D,"flixel.addons.input.FlxControlAnalog","removeGamepad2D",0x76d57489,"flixel.addons.input.FlxControlAnalog.removeGamepad2D","flixel/addons/input/FlxAnalogSet.hx",561,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_580_addVPad1D,"flixel.addons.input.FlxControlAnalog","addVPad1D",0xd10c6aeb,"flixel.addons.input.FlxControlAnalog.addVPad1D","flixel/addons/input/FlxAnalogSet.hx",580,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_585_addVPad2D,"flixel.addons.input.FlxControlAnalog","addVPad2D",0xd10c6bca,"flixel.addons.input.FlxControlAnalog.addVPad2D","flixel/addons/input/FlxAnalogSet.hx",585,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_590_removeVPad1D,"flixel.addons.input.FlxControlAnalog","removeVPad1D",0xbce41b1a,"flixel.addons.input.FlxControlAnalog.removeVPad1D","flixel/addons/input/FlxAnalogSet.hx",590,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_606_removeVPad2D,"flixel.addons.input.FlxControlAnalog","removeVPad2D",0xbce41bf9,"flixel.addons.input.FlxControlAnalog.removeVPad2D","flixel/addons/input/FlxAnalogSet.hx",606,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_fb37ecc5847d08ee_625_setGamepadID,"flixel.addons.input.FlxControlAnalog","setGamepadID",0x52a9cfc0,"flixel.addons.input.FlxControlAnalog.setGamepadID","flixel/addons/input/FlxAnalogSet.hx",625,0x73cae450)
namespace flixel{
namespace addons{
namespace input{

void FlxControlAnalog_obj::__construct(::String name,int trigger, ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_290_new)
HXLINE( 291)		this->trigger = trigger;
HXLINE( 292)		super::__construct(name,callback);
            	}

Dynamic FlxControlAnalog_obj::__CreateEmpty() { return new FlxControlAnalog_obj; }

void *FlxControlAnalog_obj::_hx_vtable = 0;

Dynamic FlxControlAnalog_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxControlAnalog_obj > _hx_result = new FlxControlAnalog_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool FlxControlAnalog_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x537409a5) {
		if (inClassId<=(int)0x2660e195) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2660e195;
		} else {
			return inClassId==(int)0x537409a5;
		}
	} else {
		return inClassId==(int)0x68c4f196;
	}
}

void FlxControlAnalog_obj::addInputType( ::flixel::addons::input::FlxControls parent, ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_GC_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_300_addInputType)
HXDLIN( 300)		switch((int)(input->_hx_getIndex())){
            			case (int)0: {
HXLINE( 339)				 ::flixel::addons::input::FlxKeyInputType _g = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >();
HXDLIN( 339)				switch((int)(_g->_hx_getIndex())){
            					case (int)0: {
HXLINE( 339)						int found = _g->_hx_getInt(0);
HXLINE( 340)						HX_STACK_DO_THROW(((HX_("Internal error - Unexpected Keyboard(",60,d7,55,90) + ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(found)) + HX_(")",29,00,00,00)));
            					}
            					break;
            					case (int)1: {
HXLINE( 334)						int _g1 = _g->_hx_getInt(0);
HXDLIN( 334)						int _g2 = _g->_hx_getInt(1);
HXDLIN( 334)						 ::Dynamic _g3 = _g->_hx_getObject(2);
HXDLIN( 334)						 ::Dynamic _g4 = _g->_hx_getObject(3);
HXLINE( 332)						if (::hx::IsNull( _g3 )) {
HXLINE( 332)							if (::hx::IsNull( _g4 )) {
HXLINE( 332)								int up = _g1;
HXDLIN( 332)								int down = _g2;
HXLINE( 333)								this->addKeys1D(up,down);
            							}
            							else {
HXLINE( 334)								 ::Dynamic right = _g3;
HXDLIN( 334)								 ::Dynamic left = _g4;
HXDLIN( 334)								int up1 = _g1;
HXDLIN( 334)								int down1 = _g2;
HXLINE( 335)								this->addKeys2D(up1,down1,( (int)(right) ),( (int)(left) ));
            							}
            						}
            						else {
HXLINE( 334)							 ::Dynamic right1 = _g3;
HXDLIN( 334)							int down2 = _g2;
HXDLIN( 334)							int up2 = _g1;
HXDLIN( 334)							 ::Dynamic left1 = _g4;
HXLINE( 335)							this->addKeys2D(up2,down2,( (int)(right1) ),( (int)(left1) ));
            						}
            					}
            					break;
            					case (int)2: case (int)3: {
HXLINE( 338)						this->addInputType(parent,::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::simplify(input));
            					}
            					break;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 316)				 ::flixel::addons::input::FlxGamepadInputType _g5 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >();
HXDLIN( 316)				switch((int)(_g5->_hx_getIndex())){
            					case (int)0: {
HXLINE( 307)						int _g6 = _g5->_hx_getInt(0);
HXLINE( 303)						{
HXLINE( 303)							int id = _g6;
HXDLIN( 303)							bool _hx_tmp;
HXDLIN( 303)							if ((id != 17)) {
HXLINE( 303)								_hx_tmp = (id == 18);
            							}
            							else {
HXLINE( 303)								_hx_tmp = true;
            							}
HXDLIN( 303)							if (_hx_tmp) {
HXLINE( 304)								int _hx_tmp1 = this->trigger;
HXDLIN( 304)								this->add( ::flixel::addons::input::_FlxAnalogSet::AnalogGamepadStick_obj::__alloc( HX_CTX ,id,_hx_tmp1,0,::flixel::addons::input::_FlxControls::FlxDeviceID_Impl__obj::toDeviceID(parent->gamepadID)));
            							}
            							else {
HXLINE( 305)								int id1 = _g6;
HXDLIN( 305)								bool _hx_tmp2;
HXDLIN( 305)								if ((id1 != 19)) {
HXLINE( 305)									_hx_tmp2 = (id1 == 20);
            								}
            								else {
HXLINE( 305)									_hx_tmp2 = true;
            								}
HXDLIN( 305)								if (_hx_tmp2) {
HXLINE( 306)									int _hx_tmp3 = this->trigger;
HXDLIN( 306)									this->add( ::flixel::addons::input::_FlxAnalogSet::AnalogGamepadStick_obj::__alloc( HX_CTX ,id1,_hx_tmp3,3,::flixel::addons::input::_FlxControls::FlxDeviceID_Impl__obj::toDeviceID(parent->gamepadID)));
            								}
            								else {
HXLINE( 307)									int found1 = _g6;
HXLINE( 308)									HX_STACK_DO_THROW(((HX_("Internal Error - Unexpected Gamepad(Digital(",d8,b8,89,87) + ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::toStringMap->get_string(found1)) + HX_("))",e0,23,00,00)));
            								}
            							}
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 311)						int _g7 = _g5->_hx_getInt(0);
HXDLIN( 311)						int _g8 = _g5->_hx_getInt(1);
HXDLIN( 311)						 ::Dynamic _g9 = _g5->_hx_getObject(2);
HXDLIN( 311)						 ::Dynamic _g10 = _g5->_hx_getObject(3);
HXLINE( 309)						if (::hx::IsNull( _g9 )) {
HXLINE( 309)							if (::hx::IsNull( _g10 )) {
HXLINE( 309)								int up3 = _g7;
HXDLIN( 309)								int down3 = _g8;
HXLINE( 310)								this->addGamepad1D(up3,down3,parent->gamepadID);
            							}
            							else {
HXLINE( 311)								 ::Dynamic right2 = _g9;
HXDLIN( 311)								 ::Dynamic left2 = _g10;
HXDLIN( 311)								int up4 = _g7;
HXDLIN( 311)								int down4 = _g8;
HXLINE( 312)								this->addGamepad2D(up4,down4,( (int)(right2) ),( (int)(left2) ),parent->gamepadID);
            							}
            						}
            						else {
HXLINE( 311)							 ::Dynamic right3 = _g9;
HXDLIN( 311)							int down5 = _g8;
HXDLIN( 311)							int up5 = _g7;
HXDLIN( 311)							 ::Dynamic left3 = _g10;
HXLINE( 312)							this->addGamepad2D(up5,down5,( (int)(right3) ),( (int)(left3) ),parent->gamepadID);
            						}
            					}
            					break;
            					case (int)2: case (int)3: case (int)4: case (int)5: {
HXLINE( 317)						this->addInputType(parent,::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::simplify(input));
            					}
            					break;
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 328)				 ::flixel::addons::input::FlxMouseInputType _g11 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 328)				switch((int)(_g11->_hx_getIndex())){
            					case (int)0: {
HXLINE( 322)						 ::Dynamic axis = _g11->_hx_getObject(0);
HXLINE( 323)						this->add( ::flixel::addons::input::_FlxAnalogSet::AnalogMousePosition_obj::__alloc( HX_CTX ,this->trigger,axis));
            					}
            					break;
            					case (int)1: {
HXLINE( 324)						 ::Dynamic axis1 = _g11->_hx_getObject(0);
HXDLIN( 324)						 ::Dynamic scale = _g11->_hx_getObject(1);
HXDLIN( 324)						 ::Dynamic deadzone = _g11->_hx_getObject(2);
HXDLIN( 324)						 ::Dynamic invert = _g11->_hx_getObject(3);
HXLINE( 325)						 ::Dynamic tmp = axis1;
HXDLIN( 325)						int _hx_tmp4;
HXDLIN( 325)						if (::hx::IsNotNull( tmp )) {
HXLINE( 325)							_hx_tmp4 = ( (int)(tmp) );
            						}
            						else {
HXLINE( 325)							_hx_tmp4 = 3;
            						}
HXDLIN( 325)						 ::Dynamic tmp1 = scale;
HXDLIN( 325)						Float _hx_tmp5;
HXDLIN( 325)						if (::hx::IsNotNull( tmp1 )) {
HXLINE( 325)							_hx_tmp5 = ( (Float)(tmp1) );
            						}
            						else {
HXLINE( 325)							_hx_tmp5 = ((Float)0.1);
            						}
HXDLIN( 325)						 ::Dynamic tmp2 = deadzone;
HXDLIN( 325)						Float _hx_tmp6;
HXDLIN( 325)						if (::hx::IsNotNull( tmp2 )) {
HXLINE( 325)							_hx_tmp6 = ( (Float)(tmp2) );
            						}
            						else {
HXLINE( 325)							_hx_tmp6 = ((Float)0.1);
            						}
HXDLIN( 325)						 ::Dynamic tmp3 = invert;
HXDLIN( 325)						int _hx_tmp7;
HXDLIN( 325)						if (::hx::IsNotNull( tmp3 )) {
HXLINE( 325)							_hx_tmp7 = ( (int)(tmp3) );
            						}
            						else {
HXLINE( 325)							_hx_tmp7 = 0;
            						}
HXDLIN( 325)						this->add( ::flixel::addons::input::_FlxAnalogSet::AnalogMouseMove_obj::__alloc( HX_CTX ,this->trigger,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7));
            					}
            					break;
            					case (int)2: {
HXLINE( 320)						 ::Dynamic id2 = _g11->_hx_getObject(0);
HXDLIN( 320)						 ::Dynamic axis2 = _g11->_hx_getObject(1);
HXDLIN( 320)						 ::Dynamic scale1 = _g11->_hx_getObject(2);
HXDLIN( 320)						 ::Dynamic deadzone1 = _g11->_hx_getObject(3);
HXDLIN( 320)						 ::Dynamic invert1 = _g11->_hx_getObject(4);
HXLINE( 321)						 ::Dynamic tmp4 = id2;
HXDLIN( 321)						int _hx_tmp8;
HXDLIN( 321)						if (::hx::IsNotNull( tmp4 )) {
HXLINE( 321)							_hx_tmp8 = ( (int)(tmp4) );
            						}
            						else {
HXLINE( 321)							_hx_tmp8 = -1;
            						}
HXDLIN( 321)						 ::Dynamic tmp5 = axis2;
HXDLIN( 321)						int _hx_tmp9;
HXDLIN( 321)						if (::hx::IsNotNull( tmp5 )) {
HXLINE( 321)							_hx_tmp9 = ( (int)(tmp5) );
            						}
            						else {
HXLINE( 321)							_hx_tmp9 = 3;
            						}
HXDLIN( 321)						 ::Dynamic tmp6 = scale1;
HXDLIN( 321)						Float _hx_tmp10;
HXDLIN( 321)						if (::hx::IsNotNull( tmp6 )) {
HXLINE( 321)							_hx_tmp10 = ( (Float)(tmp6) );
            						}
            						else {
HXLINE( 321)							_hx_tmp10 = ((Float)0.1);
            						}
HXDLIN( 321)						 ::Dynamic tmp7 = deadzone1;
HXDLIN( 321)						Float _hx_tmp11;
HXDLIN( 321)						if (::hx::IsNotNull( tmp7 )) {
HXLINE( 321)							_hx_tmp11 = ( (Float)(tmp7) );
            						}
            						else {
HXLINE( 321)							_hx_tmp11 = ((Float)0.1);
            						}
HXDLIN( 321)						 ::Dynamic tmp8 = invert1;
HXDLIN( 321)						int _hx_tmp12;
HXDLIN( 321)						if (::hx::IsNotNull( tmp8 )) {
HXLINE( 321)							_hx_tmp12 = ( (int)(tmp8) );
            						}
            						else {
HXLINE( 321)							_hx_tmp12 = 0;
            						}
HXDLIN( 321)						this->add( ::flixel::addons::input::_FlxAnalogSet::AnalogMouseDrag_obj::__alloc( HX_CTX ,_hx_tmp8,this->trigger,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12));
            					}
            					break;
            					case (int)3: {
HXLINE( 328)						 ::Dynamic found2 = _g11->_hx_getObject(0);
HXLINE( 329)						HX_STACK_DO_THROW(((HX_("Internal error - Unexpected Mouse(Button(",12,5f,4f,40) + found2) + HX_("))",e0,23,00,00)));
            					}
            					break;
            					case (int)4: {
HXLINE( 326)						 ::Dynamic scale2 = _g11->_hx_getObject(0);
HXLINE( 327)						 ::Dynamic tmp9 = scale2;
HXDLIN( 327)						Float _hx_tmp13;
HXDLIN( 327)						if (::hx::IsNotNull( tmp9 )) {
HXLINE( 327)							_hx_tmp13 = ( (Float)(tmp9) );
            						}
            						else {
HXLINE( 327)							_hx_tmp13 = ((Float)0.1);
            						}
HXDLIN( 327)						this->add( ::flixel::addons::input::_FlxAnalogSet::AnalogMouseWheelDelta_obj::__alloc( HX_CTX ,this->trigger,_hx_tmp13));
            					}
            					break;
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 349)				 ::flixel::addons::input::FlxVirtualPadInputType _g12 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxVirtualPadInputType >();
HXDLIN( 349)				switch((int)(_g12->_hx_getIndex())){
            					case (int)0: {
HXLINE( 349)						::String found3 = _g12->_hx_getString(0);
HXLINE( 350)						HX_STACK_DO_THROW(((HX_("Internal error - Unexpected VirtualPad(",9f,b2,b9,f6) + found3) + HX_(")",29,00,00,00)));
            					}
            					break;
            					case (int)1: {
HXLINE( 345)						::String _g13 = _g12->_hx_getString(0);
HXDLIN( 345)						::String _g14 = _g12->_hx_getString(1);
HXDLIN( 345)						::String _g15 = _g12->_hx_getString(2);
HXDLIN( 345)						::String _g16 = _g12->_hx_getString(3);
HXLINE( 343)						if (::hx::IsNull( _g15 )) {
HXLINE( 343)							if (::hx::IsNull( _g16 )) {
HXLINE( 343)								::String up6 = _g13;
HXDLIN( 343)								::String down6 = _g14;
HXLINE( 344)								this->addVPad1D(parent->vPadProxies,up6,down6);
            							}
            							else {
HXLINE( 345)								::String right4 = _g15;
HXDLIN( 345)								::String left4 = _g16;
HXDLIN( 345)								::String up7 = _g13;
HXDLIN( 345)								::String down7 = _g14;
HXLINE( 346)								this->addVPad2D(parent->vPadProxies,up7,down7,right4,left4);
            							}
            						}
            						else {
HXLINE( 345)							::String right5 = _g15;
HXDLIN( 345)							::String down8 = _g14;
HXDLIN( 345)							::String up8 = _g13;
HXDLIN( 345)							::String left5 = _g16;
HXLINE( 346)							this->addVPad2D(parent->vPadProxies,up8,down8,right5,left5);
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 348)						this->addInputType(parent,::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::simplify(input));
            					}
            					break;
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControlAnalog_obj,addInputType,(void))

void FlxControlAnalog_obj::removeInputType( ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_359_removeInputType)
HXDLIN( 359)		switch((int)(input->_hx_getIndex())){
            			case (int)0: {
HXLINE( 396)				 ::flixel::addons::input::FlxKeyInputType _g = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >();
HXDLIN( 396)				switch((int)(_g->_hx_getIndex())){
            					case (int)0: {
HXLINE( 396)						int found = _g->_hx_getInt(0);
HXLINE( 397)						HX_STACK_DO_THROW(((HX_("Internal error - Unexpected Keyboard(Lone(",ee,01,88,44) + ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(found)) + HX_("))",e0,23,00,00)));
            					}
            					break;
            					case (int)1: {
HXLINE( 390)						int _g1 = _g->_hx_getInt(0);
HXDLIN( 390)						int _g2 = _g->_hx_getInt(1);
HXDLIN( 390)						 ::Dynamic _g3 = _g->_hx_getObject(2);
HXDLIN( 390)						 ::Dynamic _g4 = _g->_hx_getObject(3);
HXLINE( 388)						if (::hx::IsNull( _g3 )) {
HXLINE( 388)							if (::hx::IsNull( _g4 )) {
HXLINE( 388)								int up = _g1;
HXDLIN( 388)								int down = _g2;
HXLINE( 389)								this->removeKeys1D(up,down);
            							}
            							else {
HXLINE( 390)								 ::Dynamic right = _g3;
HXDLIN( 390)								 ::Dynamic left = _g4;
HXDLIN( 390)								int up1 = _g1;
HXDLIN( 390)								int down1 = _g2;
HXLINE( 391)								this->removeKeys2D(up1,down1,( (int)(right) ),( (int)(left) ));
            							}
            						}
            						else {
HXLINE( 390)							 ::Dynamic right1 = _g3;
HXDLIN( 390)							int down2 = _g2;
HXDLIN( 390)							int up2 = _g1;
HXDLIN( 390)							 ::Dynamic left1 = _g4;
HXLINE( 391)							this->removeKeys2D(up2,down2,( (int)(right1) ),( (int)(left1) ));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 393)						this->removeKeys2D(38,40,39,37);
            					}
            					break;
            					case (int)3: {
HXLINE( 395)						this->removeKeys2D(87,83,68,65);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 372)				 ::flixel::addons::input::FlxGamepadInputType _g5 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >();
HXDLIN( 372)				switch((int)(_g5->_hx_getIndex())){
            					case (int)0: {
HXLINE( 364)						int _g6 = _g5->_hx_getInt(0);
HXLINE( 362)						{
HXLINE( 362)							int id = _g6;
HXDLIN( 362)							bool _hx_tmp;
HXDLIN( 362)							if ((id != 17)) {
HXLINE( 362)								_hx_tmp = (id == 18);
            							}
            							else {
HXLINE( 362)								_hx_tmp = true;
            							}
HXDLIN( 362)							if (_hx_tmp) {
HXLINE( 363)								this->removeGamepadInput(id,0);
            							}
            							else {
HXLINE( 364)								int id1 = _g6;
HXDLIN( 364)								bool _hx_tmp1;
HXDLIN( 364)								if ((id1 != 19)) {
HXLINE( 364)									_hx_tmp1 = (id1 == 20);
            								}
            								else {
HXLINE( 364)									_hx_tmp1 = true;
            								}
HXDLIN( 364)								if (_hx_tmp1) {
HXLINE( 365)									this->removeGamepadInput(id1,3);
            								}
            								else {
HXLINE( 372)									 ::flixel::addons::input::FlxGamepadInputType found1 = _g5;
HXLINE( 373)									HX_STACK_DO_THROW(((HX_("Internal Error - Unexpected Gamepad(",68,3f,20,1c) + ::Std_obj::string(found1)) + HX_(")",29,00,00,00)));
            								}
            							}
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 368)						int _g7 = _g5->_hx_getInt(0);
HXDLIN( 368)						int _g8 = _g5->_hx_getInt(1);
HXDLIN( 368)						 ::Dynamic _g9 = _g5->_hx_getObject(2);
HXDLIN( 368)						 ::Dynamic _g10 = _g5->_hx_getObject(3);
HXLINE( 366)						if (::hx::IsNull( _g9 )) {
HXLINE( 366)							if (::hx::IsNull( _g10 )) {
HXLINE( 366)								int up3 = _g7;
HXDLIN( 366)								int down3 = _g8;
HXLINE( 367)								this->removeGamepad1D(up3,down3);
            							}
            							else {
HXLINE( 368)								 ::Dynamic right2 = _g9;
HXDLIN( 368)								 ::Dynamic left2 = _g10;
HXDLIN( 368)								int up4 = _g7;
HXDLIN( 368)								int down4 = _g8;
HXLINE( 369)								this->removeGamepad2D(up4,down4,( (int)(right2) ),( (int)(left2) ));
            							}
            						}
            						else {
HXLINE( 368)							 ::Dynamic right3 = _g9;
HXDLIN( 368)							int down5 = _g8;
HXDLIN( 368)							int up5 = _g7;
HXDLIN( 368)							 ::Dynamic left3 = _g10;
HXLINE( 369)							this->removeGamepad2D(up5,down5,( (int)(right3) ),( (int)(left3) ));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 371)						this->removeGamepad2D(11,12,14,13);
            					}
            					break;
            					default:{
HXLINE( 372)						 ::flixel::addons::input::FlxGamepadInputType found2 = _g5;
HXLINE( 373)						HX_STACK_DO_THROW(((HX_("Internal Error - Unexpected Gamepad(",68,3f,20,1c) + ::Std_obj::string(found2)) + HX_(")",29,00,00,00)));
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 384)				 ::flixel::addons::input::FlxMouseInputType _g11 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 384)				switch((int)(_g11->_hx_getIndex())){
            					case (int)0: {
HXLINE( 378)						 ::Dynamic axis = _g11->_hx_getObject(0);
HXLINE( 379)						this->removeMousePosition(( (int)(axis) ));
            					}
            					break;
            					case (int)1: {
HXLINE( 380)						 ::Dynamic _g12 = _g11->_hx_getObject(1);
HXDLIN( 380)						 ::Dynamic _g13 = _g11->_hx_getObject(2);
HXDLIN( 380)						 ::Dynamic _g14 = _g11->_hx_getObject(3);
HXDLIN( 380)						{
HXLINE( 380)							 ::Dynamic axis1 = _g11->_hx_getObject(0);
HXLINE( 381)							this->removeMouseMotion(( (int)(axis1) ));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 376)						 ::Dynamic _g15 = _g11->_hx_getObject(2);
HXDLIN( 376)						 ::Dynamic _g16 = _g11->_hx_getObject(3);
HXDLIN( 376)						 ::Dynamic _g17 = _g11->_hx_getObject(4);
HXDLIN( 376)						{
HXLINE( 376)							 ::Dynamic id2 = _g11->_hx_getObject(0);
HXDLIN( 376)							 ::Dynamic axis2 = _g11->_hx_getObject(1);
HXLINE( 377)							this->removeMouseDrag(( (int)(id2) ),( (int)(axis2) ));
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 384)						 ::Dynamic found3 = _g11->_hx_getObject(0);
HXLINE( 385)						HX_STACK_DO_THROW(((HX_("Internal error - Unexpected Mouse(Button(",12,5f,4f,40) + found3) + HX_("))",e0,23,00,00)));
            					}
            					break;
            					case (int)4: {
HXLINE( 382)						 ::Dynamic _g18 = _g11->_hx_getObject(0);
HXLINE( 383)						this->removeMouseWheel();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 406)				 ::flixel::addons::input::FlxVirtualPadInputType _g19 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxVirtualPadInputType >();
HXDLIN( 406)				switch((int)(_g19->_hx_getIndex())){
            					case (int)0: {
HXLINE( 406)						::String found4 = _g19->_hx_getString(0);
HXLINE( 407)						HX_STACK_DO_THROW(((HX_("Internal error - Unexpected VirtualPad(Lone(",4f,02,c6,2f) + found4) + HX_("))",e0,23,00,00)));
            					}
            					break;
            					case (int)1: {
HXLINE( 402)						::String _g20 = _g19->_hx_getString(0);
HXDLIN( 402)						::String _g21 = _g19->_hx_getString(1);
HXDLIN( 402)						::String _g22 = _g19->_hx_getString(2);
HXDLIN( 402)						::String _g23 = _g19->_hx_getString(3);
HXLINE( 400)						if (::hx::IsNull( _g22 )) {
HXLINE( 400)							if (::hx::IsNull( _g23 )) {
HXLINE( 400)								::String up6 = _g20;
HXDLIN( 400)								::String down6 = _g21;
HXLINE( 401)								this->removeVPad1D(up6,down6);
            							}
            							else {
HXLINE( 402)								::String right4 = _g22;
HXDLIN( 402)								::String left4 = _g23;
HXDLIN( 402)								::String up7 = _g20;
HXDLIN( 402)								::String down7 = _g21;
HXLINE( 403)								this->removeVPad2D(up7,down7,right4,left4);
            							}
            						}
            						else {
HXLINE( 402)							::String right5 = _g22;
HXDLIN( 402)							::String down8 = _g21;
HXDLIN( 402)							::String up8 = _g20;
HXDLIN( 402)							::String left5 = _g23;
HXLINE( 403)							this->removeVPad2D(up8,down8,right5,left5);
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 405)						this->removeVPad2D(HX_("up",5b,66,00,00),HX_("down",62,f8,6d,42),HX_("right",dc,0b,64,e9),HX_("left",07,08,b0,47));
            					}
            					break;
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControlAnalog_obj,removeInputType,(void))

void FlxControlAnalog_obj::addGamepadInput(int inputID, ::Dynamic axis, ::flixel::addons::input::FlxDeviceIDRaw gamepadID){
            	HX_GC_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_414_addGamepadInput)
HXDLIN( 414)		int _hx_tmp = this->trigger;
HXDLIN( 414)		this->add( ::flixel::addons::input::_FlxAnalogSet::AnalogGamepadStick_obj::__alloc( HX_CTX ,inputID,_hx_tmp,axis,::flixel::addons::input::_FlxControls::FlxDeviceID_Impl__obj::toDeviceID(gamepadID)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxControlAnalog_obj,addGamepadInput,(void))

void FlxControlAnalog_obj::removeGamepadInput(int inputID,int axis){
            	HX_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_419_removeGamepadInput)
HXDLIN( 419)		int _g = 0;
HXDLIN( 419)		::Array< ::Dynamic> _g1 = this->inputs;
HXDLIN( 419)		while((_g < _g1->length)){
HXDLIN( 419)			 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 419)			_g = (_g + 1);
HXLINE( 421)			if (::Std_obj::isOfType(input,::hx::ClassOf< ::flixel::addons::input::_FlxAnalogSet::AnalogGamepadStick >())) {
HXLINE( 423)				 ::flixel::addons::input::_FlxAnalogSet::AnalogGamepadStick input1 = ( ( ::flixel::addons::input::_FlxAnalogSet::AnalogGamepadStick)(input) );
HXLINE( 424)				bool _hx_tmp;
HXDLIN( 424)				if ((input1->inputID == inputID)) {
HXLINE( 424)					_hx_tmp = (input1->axis == axis);
            				}
            				else {
HXLINE( 424)					_hx_tmp = false;
            				}
HXDLIN( 424)				if (_hx_tmp) {
HXLINE( 426)					this->remove(input1,null());
HXLINE( 427)					goto _hx_goto_4;
            				}
            			}
            		}
            		_hx_goto_4:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControlAnalog_obj,removeGamepadInput,(void))

void FlxControlAnalog_obj::removeMouseMotion(int axis){
            	HX_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_434_removeMouseMotion)
HXLINE( 435)		::Array< ::Dynamic> inputs = this->inputs;
HXLINE( 436)		{
HXLINE( 436)			int _g = 0;
HXDLIN( 436)			while((_g < inputs->length)){
HXLINE( 436)				 ::flixel::input::actions::FlxActionInputAnalog input = inputs->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInputAnalog >();
HXDLIN( 436)				_g = (_g + 1);
HXLINE( 438)				bool _hx_tmp;
HXDLIN( 438)				if (::Std_obj::isOfType(input,::hx::ClassOf< ::flixel::addons::input::_FlxAnalogSet::AnalogMouseMove >())) {
HXLINE( 438)					_hx_tmp = (axis == input->axis);
            				}
            				else {
HXLINE( 438)					_hx_tmp = false;
            				}
HXDLIN( 438)				if (_hx_tmp) {
HXLINE( 440)					this->remove(input,null());
HXLINE( 441)					goto _hx_goto_6;
            				}
            			}
            			_hx_goto_6:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControlAnalog_obj,removeMouseMotion,(void))

void FlxControlAnalog_obj::removeMousePosition(int axis){
            	HX_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_447_removeMousePosition)
HXLINE( 448)		::Array< ::Dynamic> inputs = this->inputs;
HXLINE( 449)		{
HXLINE( 449)			int _g = 0;
HXDLIN( 449)			while((_g < inputs->length)){
HXLINE( 449)				 ::flixel::input::actions::FlxActionInputAnalog input = inputs->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInputAnalog >();
HXDLIN( 449)				_g = (_g + 1);
HXLINE( 451)				bool _hx_tmp;
HXDLIN( 451)				if (::Std_obj::isOfType(input,::hx::ClassOf< ::flixel::addons::input::_FlxAnalogSet::AnalogMousePosition >())) {
HXLINE( 451)					_hx_tmp = (axis == input->axis);
            				}
            				else {
HXLINE( 451)					_hx_tmp = false;
            				}
HXDLIN( 451)				if (_hx_tmp) {
HXLINE( 453)					this->remove(input,null());
HXLINE( 454)					goto _hx_goto_8;
            				}
            			}
            			_hx_goto_8:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControlAnalog_obj,removeMousePosition,(void))

void FlxControlAnalog_obj::removeMouseDrag(int buttonId,int axis){
            	HX_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_460_removeMouseDrag)
HXLINE( 461)		::Array< ::Dynamic> inputs = this->inputs;
HXLINE( 462)		{
HXLINE( 462)			int _g = 0;
HXDLIN( 462)			while((_g < inputs->length)){
HXLINE( 462)				 ::flixel::input::actions::FlxActionInputAnalog input = inputs->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInputAnalog >();
HXDLIN( 462)				_g = (_g + 1);
HXLINE( 465)				bool _hx_tmp;
HXDLIN( 465)				bool _hx_tmp1;
HXDLIN( 465)				if (::Std_obj::isOfType(input,::hx::ClassOf< ::flixel::addons::input::_FlxAnalogSet::AnalogMouseDrag >())) {
HXLINE( 465)					_hx_tmp1 = (axis == input->axis);
            				}
            				else {
HXLINE( 465)					_hx_tmp1 = false;
            				}
HXDLIN( 465)				if (_hx_tmp1) {
HXLINE( 465)					_hx_tmp = (( ( ::flixel::addons::input::_FlxAnalogSet::AnalogMouseDrag)(input) )->button == buttonId);
            				}
            				else {
HXLINE( 465)					_hx_tmp = false;
            				}
HXDLIN( 465)				if (_hx_tmp) {
HXLINE( 469)					this->remove(input,null());
HXLINE( 470)					goto _hx_goto_10;
            				}
            			}
            			_hx_goto_10:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControlAnalog_obj,removeMouseDrag,(void))

void FlxControlAnalog_obj::removeMouseWheel(){
            	HX_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_476_removeMouseWheel)
HXLINE( 477)		::Array< ::Dynamic> inputs = this->inputs;
HXLINE( 478)		{
HXLINE( 478)			int _g = 0;
HXDLIN( 478)			while((_g < inputs->length)){
HXLINE( 478)				 ::flixel::input::actions::FlxActionInputAnalog input = inputs->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInputAnalog >();
HXDLIN( 478)				_g = (_g + 1);
HXLINE( 480)				if (::Std_obj::isOfType(input,::hx::ClassOf< ::flixel::addons::input::_FlxAnalogSet::AnalogMouseWheelDelta >())) {
HXLINE( 482)					this->remove(input,null());
HXLINE( 483)					goto _hx_goto_12;
            				}
            			}
            			_hx_goto_12:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControlAnalog_obj,removeMouseWheel,(void))

void FlxControlAnalog_obj::addKeys1D(int up,int down){
            	HX_GC_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_490_addKeys1D)
HXDLIN( 490)		this->add( ::flixel::addons::input::_FlxAnalogSet::Analog1DKeys_obj::__alloc( HX_CTX ,this->trigger,up,down));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControlAnalog_obj,addKeys1D,(void))

void FlxControlAnalog_obj::addKeys2D(int up,int down,int right,int left){
            	HX_GC_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_495_addKeys2D)
HXDLIN( 495)		this->add( ::flixel::addons::input::_FlxAnalogSet::Analog2DKeys_obj::__alloc( HX_CTX ,this->trigger,up,down,right,left));
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlAnalog_obj,addKeys2D,(void))

void FlxControlAnalog_obj::removeKeys1D(int up,int down){
            	HX_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_500_removeKeys1D)
HXDLIN( 500)		int _g = 0;
HXDLIN( 500)		::Array< ::Dynamic> _g1 = this->inputs;
HXDLIN( 500)		while((_g < _g1->length)){
HXDLIN( 500)			 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 500)			_g = (_g + 1);
HXLINE( 502)			if (::Std_obj::isOfType(input,::hx::ClassOf< ::flixel::addons::input::_FlxAnalogSet::Analog1DKeys >())) {
HXLINE( 504)				 ::flixel::addons::input::_FlxAnalogSet::Analog1DKeys input1 = ( ( ::flixel::addons::input::_FlxAnalogSet::Analog1DKeys)(input) );
HXLINE( 505)				bool _hx_tmp;
HXDLIN( 505)				if ((input1->up == up)) {
HXLINE( 505)					_hx_tmp = (input1->down == down);
            				}
            				else {
HXLINE( 505)					_hx_tmp = false;
            				}
HXDLIN( 505)				if (_hx_tmp) {
HXLINE( 507)					this->remove(input1,null());
HXLINE( 508)					goto _hx_goto_16;
            				}
            			}
            		}
            		_hx_goto_16:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControlAnalog_obj,removeKeys1D,(void))

void FlxControlAnalog_obj::removeKeys2D(int up,int down,int right,int left){
            	HX_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_516_removeKeys2D)
HXDLIN( 516)		int _g = 0;
HXDLIN( 516)		::Array< ::Dynamic> _g1 = this->inputs;
HXDLIN( 516)		while((_g < _g1->length)){
HXDLIN( 516)			 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 516)			_g = (_g + 1);
HXLINE( 518)			if (::Std_obj::isOfType(input,::hx::ClassOf< ::flixel::addons::input::_FlxAnalogSet::Analog2DKeys >())) {
HXLINE( 520)				 ::flixel::addons::input::_FlxAnalogSet::Analog2DKeys input1 = ( ( ::flixel::addons::input::_FlxAnalogSet::Analog2DKeys)(input) );
HXLINE( 521)				bool _hx_tmp;
HXDLIN( 521)				bool _hx_tmp1;
HXDLIN( 521)				bool _hx_tmp2;
HXDLIN( 521)				if ((input1->up == up)) {
HXLINE( 521)					_hx_tmp2 = (input1->down == down);
            				}
            				else {
HXLINE( 521)					_hx_tmp2 = false;
            				}
HXDLIN( 521)				if (_hx_tmp2) {
HXLINE( 521)					_hx_tmp1 = (input1->right == right);
            				}
            				else {
HXLINE( 521)					_hx_tmp1 = false;
            				}
HXDLIN( 521)				if (_hx_tmp1) {
HXLINE( 521)					_hx_tmp = (input1->left == left);
            				}
            				else {
HXLINE( 521)					_hx_tmp = false;
            				}
HXDLIN( 521)				if (_hx_tmp) {
HXLINE( 526)					this->remove(input1,null());
HXLINE( 527)					goto _hx_goto_18;
            				}
            			}
            		}
            		_hx_goto_18:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlAnalog_obj,removeKeys2D,(void))

void FlxControlAnalog_obj::addGamepad1D(int up,int down, ::flixel::addons::input::FlxDeviceIDRaw gamepadID){
            	HX_GC_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_535_addGamepad1D)
HXDLIN( 535)		this->add( ::flixel::addons::input::_FlxAnalogSet::Analog1DGamepad_obj::__alloc( HX_CTX ,gamepadID,this->trigger,up,down));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxControlAnalog_obj,addGamepad1D,(void))

void FlxControlAnalog_obj::addGamepad2D(int up,int down,int right,int left, ::flixel::addons::input::FlxDeviceIDRaw gamepadID){
            	HX_GC_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_540_addGamepad2D)
HXDLIN( 540)		this->add( ::flixel::addons::input::_FlxAnalogSet::Analog2DGamepad_obj::__alloc( HX_CTX ,gamepadID,this->trigger,up,down,right,left));
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxControlAnalog_obj,addGamepad2D,(void))

void FlxControlAnalog_obj::removeGamepad1D(int up,int down){
            	HX_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_545_removeGamepad1D)
HXDLIN( 545)		int _g = 0;
HXDLIN( 545)		::Array< ::Dynamic> _g1 = this->inputs;
HXDLIN( 545)		while((_g < _g1->length)){
HXDLIN( 545)			 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 545)			_g = (_g + 1);
HXLINE( 547)			if (::Std_obj::isOfType(input,::hx::ClassOf< ::flixel::addons::input::_FlxAnalogSet::Analog1DGamepad >())) {
HXLINE( 549)				 ::flixel::addons::input::_FlxAnalogSet::Analog1DGamepad input1 = ( ( ::flixel::addons::input::_FlxAnalogSet::Analog1DGamepad)(input) );
HXLINE( 550)				bool _hx_tmp;
HXDLIN( 550)				if ((input1->up == up)) {
HXLINE( 550)					_hx_tmp = (input1->down == down);
            				}
            				else {
HXLINE( 550)					_hx_tmp = false;
            				}
HXDLIN( 550)				if (_hx_tmp) {
HXLINE( 552)					this->remove(input1,null());
HXLINE( 553)					goto _hx_goto_22;
            				}
            			}
            		}
            		_hx_goto_22:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControlAnalog_obj,removeGamepad1D,(void))

void FlxControlAnalog_obj::removeGamepad2D(int up,int down,int right,int left){
            	HX_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_561_removeGamepad2D)
HXDLIN( 561)		int _g = 0;
HXDLIN( 561)		::Array< ::Dynamic> _g1 = this->inputs;
HXDLIN( 561)		while((_g < _g1->length)){
HXDLIN( 561)			 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 561)			_g = (_g + 1);
HXLINE( 563)			if (::Std_obj::isOfType(input,::hx::ClassOf< ::flixel::addons::input::_FlxAnalogSet::Analog2DGamepad >())) {
HXLINE( 565)				 ::flixel::addons::input::_FlxAnalogSet::Analog2DGamepad input1 = ( ( ::flixel::addons::input::_FlxAnalogSet::Analog2DGamepad)(input) );
HXLINE( 566)				bool _hx_tmp;
HXDLIN( 566)				bool _hx_tmp1;
HXDLIN( 566)				bool _hx_tmp2;
HXDLIN( 566)				if ((input1->up == up)) {
HXLINE( 566)					_hx_tmp2 = (input1->down == down);
            				}
            				else {
HXLINE( 566)					_hx_tmp2 = false;
            				}
HXDLIN( 566)				if (_hx_tmp2) {
HXLINE( 566)					_hx_tmp1 = (input1->right == right);
            				}
            				else {
HXLINE( 566)					_hx_tmp1 = false;
            				}
HXDLIN( 566)				if (_hx_tmp1) {
HXLINE( 566)					_hx_tmp = (input1->left == left);
            				}
            				else {
HXLINE( 566)					_hx_tmp = false;
            				}
HXDLIN( 566)				if (_hx_tmp) {
HXLINE( 571)					this->remove(input1,null());
HXLINE( 572)					goto _hx_goto_24;
            				}
            			}
            		}
            		_hx_goto_24:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlAnalog_obj,removeGamepad2D,(void))

void FlxControlAnalog_obj::addVPad1D( ::haxe::ds::StringMap proxies,::String up,::String down){
            	HX_GC_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_580_addVPad1D)
HXDLIN( 580)		this->add( ::flixel::addons::input::_FlxAnalogSet::Analog1DVPad_obj::__alloc( HX_CTX ,proxies,this->trigger,up,down));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxControlAnalog_obj,addVPad1D,(void))

void FlxControlAnalog_obj::addVPad2D( ::haxe::ds::StringMap proxies,::String up,::String down,::String right,::String left){
            	HX_GC_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_585_addVPad2D)
HXDLIN( 585)		this->add( ::flixel::addons::input::_FlxAnalogSet::Analog2DVPad_obj::__alloc( HX_CTX ,proxies,this->trigger,up,down,right,left));
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxControlAnalog_obj,addVPad2D,(void))

void FlxControlAnalog_obj::removeVPad1D(::String up,::String down){
            	HX_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_590_removeVPad1D)
HXDLIN( 590)		int _g = 0;
HXDLIN( 590)		::Array< ::Dynamic> _g1 = this->inputs;
HXDLIN( 590)		while((_g < _g1->length)){
HXDLIN( 590)			 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 590)			_g = (_g + 1);
HXLINE( 592)			if (::Std_obj::isOfType(input,::hx::ClassOf< ::flixel::addons::input::_FlxAnalogSet::Analog1DVPad >())) {
HXLINE( 594)				 ::flixel::addons::input::_FlxAnalogSet::Analog1DVPad input1 = ( ( ::flixel::addons::input::_FlxAnalogSet::Analog1DVPad)(input) );
HXLINE( 595)				bool _hx_tmp;
HXDLIN( 595)				if ((input1->up == up)) {
HXLINE( 595)					_hx_tmp = (input1->down == down);
            				}
            				else {
HXLINE( 595)					_hx_tmp = false;
            				}
HXDLIN( 595)				if (_hx_tmp) {
HXLINE( 597)					this->remove(input1,null());
HXLINE( 598)					goto _hx_goto_28;
            				}
            			}
            		}
            		_hx_goto_28:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControlAnalog_obj,removeVPad1D,(void))

void FlxControlAnalog_obj::removeVPad2D(::String up,::String down,::String right,::String left){
            	HX_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_606_removeVPad2D)
HXDLIN( 606)		int _g = 0;
HXDLIN( 606)		::Array< ::Dynamic> _g1 = this->inputs;
HXDLIN( 606)		while((_g < _g1->length)){
HXDLIN( 606)			 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 606)			_g = (_g + 1);
HXLINE( 608)			if (::Std_obj::isOfType(input,::hx::ClassOf< ::flixel::addons::input::_FlxAnalogSet::Analog2DVPad >())) {
HXLINE( 610)				 ::flixel::addons::input::_FlxAnalogSet::Analog2DVPad input1 = ( ( ::flixel::addons::input::_FlxAnalogSet::Analog2DVPad)(input) );
HXLINE( 611)				bool _hx_tmp;
HXDLIN( 611)				bool _hx_tmp1;
HXDLIN( 611)				bool _hx_tmp2;
HXDLIN( 611)				if ((input1->up == up)) {
HXLINE( 611)					_hx_tmp2 = (input1->down == down);
            				}
            				else {
HXLINE( 611)					_hx_tmp2 = false;
            				}
HXDLIN( 611)				if (_hx_tmp2) {
HXLINE( 611)					_hx_tmp1 = (input1->right == right);
            				}
            				else {
HXLINE( 611)					_hx_tmp1 = false;
            				}
HXDLIN( 611)				if (_hx_tmp1) {
HXLINE( 611)					_hx_tmp = (input1->left == left);
            				}
            				else {
HXLINE( 611)					_hx_tmp = false;
            				}
HXDLIN( 611)				if (_hx_tmp) {
HXLINE( 616)					this->remove(input1,null());
HXLINE( 617)					goto _hx_goto_30;
            				}
            			}
            		}
            		_hx_goto_30:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlAnalog_obj,removeVPad2D,(void))

void FlxControlAnalog_obj::setGamepadID( ::flixel::addons::input::FlxDeviceIDRaw id){
            	HX_STACKFRAME(&_hx_pos_fb37ecc5847d08ee_625_setGamepadID)
HXDLIN( 625)		int _g = 0;
HXDLIN( 625)		::Array< ::Dynamic> _g1 = this->inputs;
HXDLIN( 625)		while((_g < _g1->length)){
HXDLIN( 625)			 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 625)			_g = (_g + 1);
HXLINE( 627)			if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXLINE( 628)				input->deviceID = ::flixel::addons::input::_FlxControls::FlxDeviceID_Impl__obj::toDeviceID(id);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControlAnalog_obj,setGamepadID,(void))


::hx::ObjectPtr< FlxControlAnalog_obj > FlxControlAnalog_obj::__new(::String name,int trigger, ::Dynamic callback) {
	::hx::ObjectPtr< FlxControlAnalog_obj > __this = new FlxControlAnalog_obj();
	__this->__construct(name,trigger,callback);
	return __this;
}

::hx::ObjectPtr< FlxControlAnalog_obj > FlxControlAnalog_obj::__alloc(::hx::Ctx *_hx_ctx,::String name,int trigger, ::Dynamic callback) {
	FlxControlAnalog_obj *__this = (FlxControlAnalog_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxControlAnalog_obj), true, "flixel.addons.input.FlxControlAnalog"));
	*(void **)__this = FlxControlAnalog_obj::_hx_vtable;
	__this->__construct(name,trigger,callback);
	return __this;
}

FlxControlAnalog_obj::FlxControlAnalog_obj()
{
}

::hx::Val FlxControlAnalog_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"trigger") ) { return ::hx::Val( trigger ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addKeys1D") ) { return ::hx::Val( addKeys1D_dyn() ); }
		if (HX_FIELD_EQ(inName,"addKeys2D") ) { return ::hx::Val( addKeys2D_dyn() ); }
		if (HX_FIELD_EQ(inName,"addVPad1D") ) { return ::hx::Val( addVPad1D_dyn() ); }
		if (HX_FIELD_EQ(inName,"addVPad2D") ) { return ::hx::Val( addVPad2D_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addInputType") ) { return ::hx::Val( addInputType_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeKeys1D") ) { return ::hx::Val( removeKeys1D_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeKeys2D") ) { return ::hx::Val( removeKeys2D_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGamepad1D") ) { return ::hx::Val( addGamepad1D_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGamepad2D") ) { return ::hx::Val( addGamepad2D_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeVPad1D") ) { return ::hx::Val( removeVPad1D_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeVPad2D") ) { return ::hx::Val( removeVPad2D_dyn() ); }
		if (HX_FIELD_EQ(inName,"setGamepadID") ) { return ::hx::Val( setGamepadID_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"removeInputType") ) { return ::hx::Val( removeInputType_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGamepadInput") ) { return ::hx::Val( addGamepadInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeMouseDrag") ) { return ::hx::Val( removeMouseDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeGamepad1D") ) { return ::hx::Val( removeGamepad1D_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeGamepad2D") ) { return ::hx::Val( removeGamepad2D_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"removeMouseWheel") ) { return ::hx::Val( removeMouseWheel_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"removeMouseMotion") ) { return ::hx::Val( removeMouseMotion_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"removeGamepadInput") ) { return ::hx::Val( removeGamepadInput_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"removeMousePosition") ) { return ::hx::Val( removeMousePosition_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxControlAnalog_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"trigger") ) { trigger=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxControlAnalog_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("trigger",38,55,df,25));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxControlAnalog_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(FlxControlAnalog_obj,trigger),HX_("trigger",38,55,df,25)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxControlAnalog_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxControlAnalog_obj_sMemberFields[] = {
	HX_("trigger",38,55,df,25),
	HX_("addInputType",83,d1,87,13),
	HX_("removeInputType",00,4b,52,55),
	HX_("addGamepadInput",6a,d7,3d,fc),
	HX_("removeGamepadInput",0d,aa,24,c2),
	HX_("removeMouseMotion",57,54,36,7b),
	HX_("removeMousePosition",0a,f9,3b,bd),
	HX_("removeMouseDrag",d5,7f,e3,2f),
	HX_("removeMouseWheel",9a,45,30,a1),
	HX_("addKeys1D",e8,a6,1e,f8),
	HX_("addKeys2D",c7,a7,1e,f8),
	HX_("removeKeys1D",4b,0d,28,af),
	HX_("removeKeys2D",2a,0e,28,af),
	HX_("addGamepad1D",73,57,8c,5e),
	HX_("addGamepad2D",52,58,8c,5e),
	HX_("removeGamepad1D",f0,d0,56,a0),
	HX_("removeGamepad2D",cf,d1,56,a0),
	HX_("addVPad1D",b1,ef,b8,36),
	HX_("addVPad2D",90,f0,b8,36),
	HX_("removeVPad1D",14,56,c2,ed),
	HX_("removeVPad2D",f3,56,c2,ed),
	HX_("setGamepadID",ba,0a,88,83),
	::String(null()) };

::hx::Class FlxControlAnalog_obj::__mClass;

void FlxControlAnalog_obj::__register()
{
	FlxControlAnalog_obj _hx_dummy;
	FlxControlAnalog_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input.FlxControlAnalog",28,6f,b0,7d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxControlAnalog_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxControlAnalog_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxControlAnalog_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxControlAnalog_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
