// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_addons_input_DigitalEvent
#include <flixel/addons/input/DigitalEvent.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlInputTypeRaw
#include <flixel/addons/input/FlxControlInputTypeRaw.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControls
#include <flixel/addons/input/FlxControls.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxDeviceIDRaw
#include <flixel/addons/input/FlxDeviceIDRaw.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxDigitalSet
#include <flixel/addons/input/FlxDigitalSet.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxControls_DigitalEventTools
#include <flixel/addons/input/_FlxControls/DigitalEventTools.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxDigitalSet_FlxControlDigital_Impl_
#include <flixel/addons/input/_FlxDigitalSet/FlxControlDigital_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_51818793f8e993c9_26_new,"flixel.addons.input.FlxDigitalSet","new",0x595eee81,"flixel.addons.input.FlxDigitalSet.new","flixel/addons/input/FlxDigitalSet.hx",26,0x5a62f830)
HX_LOCAL_STACK_FRAME(_hx_pos_51818793f8e993c9_43_destroy,"flixel.addons.input.FlxDigitalSet","destroy",0x64b16f9b,"flixel.addons.input.FlxDigitalSet.destroy","flixel/addons/input/FlxDigitalSet.hx",43,0x5a62f830)
HX_LOCAL_STACK_FRAME(_hx_pos_51818793f8e993c9_49_clear,"flixel.addons.input.FlxDigitalSet","clear",0x510319ee,"flixel.addons.input.FlxDigitalSet.clear","flixel/addons/input/FlxDigitalSet.hx",49,0x5a62f830)
HX_LOCAL_STACK_FRAME(_hx_pos_51818793f8e993c9_57_get,"flixel.addons.input.FlxDigitalSet","get",0x59599eb7,"flixel.addons.input.FlxDigitalSet.get","flixel/addons/input/FlxDigitalSet.hx",57,0x5a62f830)
HX_LOCAL_STACK_FRAME(_hx_pos_51818793f8e993c9_66_update,"flixel.addons.input.FlxDigitalSet","update",0x11113288,"flixel.addons.input.FlxDigitalSet.update","flixel/addons/input/FlxDigitalSet.hx",66,0x5a62f830)
HX_LOCAL_STACK_FRAME(_hx_pos_51818793f8e993c9_72_check,"flixel.addons.input.FlxDigitalSet","check",0x4e5e4129,"flixel.addons.input.FlxDigitalSet.check","flixel/addons/input/FlxDigitalSet.hx",72,0x5a62f830)
HX_LOCAL_STACK_FRAME(_hx_pos_51818793f8e993c9_76_any,"flixel.addons.input.FlxDigitalSet","any",0x5955190d,"flixel.addons.input.FlxDigitalSet.any","flixel/addons/input/FlxDigitalSet.hx",76,0x5a62f830)
HX_LOCAL_STACK_FRAME(_hx_pos_51818793f8e993c9_87_add,"flixel.addons.input.FlxDigitalSet","add",0x59551042,"flixel.addons.input.FlxDigitalSet.add","flixel/addons/input/FlxDigitalSet.hx",87,0x5a62f830)
HX_LOCAL_STACK_FRAME(_hx_pos_51818793f8e993c9_92_remove,"flixel.addons.input.FlxDigitalSet","remove",0x8e9448c3,"flixel.addons.input.FlxDigitalSet.remove","flixel/addons/input/FlxDigitalSet.hx",92,0x5a62f830)
HX_LOCAL_STACK_FRAME(_hx_pos_51818793f8e993c9_97_setGamepadID,"flixel.addons.input.FlxDigitalSet","setGamepadID",0xb4c2a079,"flixel.addons.input.FlxDigitalSet.setGamepadID","flixel/addons/input/FlxDigitalSet.hx",97,0x5a62f830)
namespace flixel{
namespace addons{
namespace input{

void FlxDigitalSet_obj::__construct( ::flixel::addons::input::FlxControls parent, ::flixel::addons::input::DigitalEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_51818793f8e993c9_26_new)
HXLINE(  29)		this->mappings =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE(  36)		this->event = event;
HXLINE(  37)		this->parent = parent;
HXLINE(  39)		::String _hx_tmp = ((HX_("",00,00,00,00) + parent->name) + HX_(":digital-list-",20,10,a6,49));
HXDLIN(  39)		this->name = (_hx_tmp + ::Std_obj::string(event));
            	}

Dynamic FlxDigitalSet_obj::__CreateEmpty() { return new FlxDigitalSet_obj; }

void *FlxDigitalSet_obj::_hx_vtable = 0;

Dynamic FlxDigitalSet_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxDigitalSet_obj > _hx_result = new FlxDigitalSet_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxDigitalSet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3aad66e1;
}

void FlxDigitalSet_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_51818793f8e993c9_43_destroy)
HXLINE(  44)		this->parent = null();
HXLINE(  45)		this->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxDigitalSet_obj,destroy,(void))

void FlxDigitalSet_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_51818793f8e993c9_49_clear)
HXLINE(  50)		{
HXLINE(  50)			 ::Dynamic control = this->mappings->iterator();
HXDLIN(  50)			while(( (bool)(control->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  50)				 ::flixel::input::actions::FlxActionDigital control1 = ( ( ::flixel::input::actions::FlxActionDigital)(control->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  51)				control1->destroy();
            			}
            		}
HXLINE(  53)		this->mappings->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxDigitalSet_obj,clear,(void))

 ::flixel::input::actions::FlxActionDigital FlxDigitalSet_obj::get( ::Dynamic action){
            	HX_STACKFRAME(&_hx_pos_51818793f8e993c9_57_get)
HXLINE(  58)		if ((this->mappings->exists(action) == false)) {
HXLINE(  59)			::Dynamic this1 = this->mappings;
HXDLIN(  59)			::String v = ((HX_("",00,00,00,00) + this->parent->name) + HX_(":",3a,00,00,00));
HXDLIN(  59)			::String v1 = ((v + ::Type_obj::enumConstructor(action)) + HX_("-",2d,00,00,00));
HXDLIN(  59)			::String v2 = (v1 + ::Std_obj::string(this->event));
HXDLIN(  59)			 ::flixel::input::actions::FlxActionDigital v3 = ::flixel::addons::input::_FlxDigitalSet::FlxControlDigital_Impl__obj::_new(v2,this->event,null());
HXDLIN(  59)			( ( ::haxe::ds::EnumValueMap)(this1) )->set(action,v3);
            		}
HXLINE(  61)		return this->mappings->get(action).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxDigitalSet_obj,get,return )

void FlxDigitalSet_obj::update(){
            	HX_STACKFRAME(&_hx_pos_51818793f8e993c9_66_update)
HXDLIN(  66)		 ::Dynamic control = this->mappings->iterator();
HXDLIN(  66)		while(( (bool)(control->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN(  66)			 ::flixel::input::actions::FlxActionDigital control1 = ( ( ::flixel::input::actions::FlxActionDigital)(control->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  67)			control1->update();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxDigitalSet_obj,update,(void))

bool FlxDigitalSet_obj::check( ::Dynamic action){
            	HX_STACKFRAME(&_hx_pos_51818793f8e993c9_72_check)
HXDLIN(  72)		return this->get(action)->check();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxDigitalSet_obj,check,return )

bool FlxDigitalSet_obj::any(::cpp::VirtualArray actions){
            	HX_STACKFRAME(&_hx_pos_51818793f8e993c9_76_any)
HXLINE(  77)		{
HXLINE(  77)			int _g = 0;
HXDLIN(  77)			while((_g < actions->get_length())){
HXLINE(  77)				 ::Dynamic action = actions->__get(_g);
HXDLIN(  77)				_g = (_g + 1);
HXLINE(  79)				if (this->get(action)->check()) {
HXLINE(  80)					return true;
            				}
            			}
            		}
HXLINE(  82)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxDigitalSet_obj,any,return )

 ::flixel::input::actions::FlxActionDigital FlxDigitalSet_obj::add( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_STACKFRAME(&_hx_pos_51818793f8e993c9_87_add)
HXDLIN(  87)		 ::flixel::input::actions::FlxActionDigital _hx_tmp = this->get(action);
HXDLIN(  87)		 ::flixel::addons::input::FlxControls _hx_tmp1 = this->parent;
HXDLIN(  87)		return ::flixel::addons::input::_FlxDigitalSet::FlxControlDigital_Impl__obj::add(_hx_tmp,_hx_tmp1,input,::flixel::addons::input::_FlxControls::DigitalEventTools_obj::toState(this->event));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxDigitalSet_obj,add,return )

 ::flixel::input::actions::FlxActionInput FlxDigitalSet_obj::remove( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_STACKFRAME(&_hx_pos_51818793f8e993c9_92_remove)
HXDLIN(  92)		 ::flixel::input::actions::FlxActionDigital _hx_tmp = this->get(action);
HXDLIN(  92)		return ::flixel::addons::input::_FlxDigitalSet::FlxControlDigital_Impl__obj::remove(_hx_tmp,this->parent,input);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxDigitalSet_obj,remove,return )

void FlxDigitalSet_obj::setGamepadID( ::flixel::addons::input::FlxDeviceIDRaw id){
            	HX_STACKFRAME(&_hx_pos_51818793f8e993c9_97_setGamepadID)
HXDLIN(  97)		 ::Dynamic control = this->mappings->iterator();
HXDLIN(  97)		while(( (bool)(control->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN(  97)			 ::flixel::input::actions::FlxActionDigital control1 = ( ( ::flixel::input::actions::FlxActionDigital)(control->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  98)			::flixel::addons::input::_FlxDigitalSet::FlxControlDigital_Impl__obj::setGamepadID(control1,id);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxDigitalSet_obj,setGamepadID,(void))


::hx::ObjectPtr< FlxDigitalSet_obj > FlxDigitalSet_obj::__new( ::flixel::addons::input::FlxControls parent, ::flixel::addons::input::DigitalEvent event) {
	::hx::ObjectPtr< FlxDigitalSet_obj > __this = new FlxDigitalSet_obj();
	__this->__construct(parent,event);
	return __this;
}

::hx::ObjectPtr< FlxDigitalSet_obj > FlxDigitalSet_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::input::FlxControls parent, ::flixel::addons::input::DigitalEvent event) {
	FlxDigitalSet_obj *__this = (FlxDigitalSet_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxDigitalSet_obj), true, "flixel.addons.input.FlxDigitalSet"));
	*(void **)__this = FlxDigitalSet_obj::_hx_vtable;
	__this->__construct(parent,event);
	return __this;
}

FlxDigitalSet_obj::FlxDigitalSet_obj()
{
}

void FlxDigitalSet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxDigitalSet);
	HX_MARK_MEMBER_NAME(event,"event");
	HX_MARK_MEMBER_NAME(mappings,"mappings");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_END_CLASS();
}

void FlxDigitalSet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(event,"event");
	HX_VISIT_MEMBER_NAME(mappings,"mappings");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(name,"name");
}

::hx::Val FlxDigitalSet_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"any") ) { return ::hx::Val( any_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"event") ) { return ::hx::Val( event ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"check") ) { return ::hx::Val( check_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return ::hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mappings") ) { return ::hx::Val( mappings ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setGamepadID") ) { return ::hx::Val( setGamepadID_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxDigitalSet_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"event") ) { event=inValue.Cast<  ::flixel::addons::input::DigitalEvent >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::flixel::addons::input::FlxControls >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mappings") ) { mappings=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxDigitalSet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("event",1a,c8,c4,75));
	outFields->push(HX_("mappings",a5,31,b1,a6));
	outFields->push(HX_("parent",2a,05,7e,ed));
	outFields->push(HX_("name",4b,72,ff,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxDigitalSet_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::addons::input::DigitalEvent */ ,(int)offsetof(FlxDigitalSet_obj,event),HX_("event",1a,c8,c4,75)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(FlxDigitalSet_obj,mappings),HX_("mappings",a5,31,b1,a6)},
	{::hx::fsObject /*  ::flixel::addons::input::FlxControls */ ,(int)offsetof(FlxDigitalSet_obj,parent),HX_("parent",2a,05,7e,ed)},
	{::hx::fsString,(int)offsetof(FlxDigitalSet_obj,name),HX_("name",4b,72,ff,48)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxDigitalSet_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxDigitalSet_obj_sMemberFields[] = {
	HX_("event",1a,c8,c4,75),
	HX_("mappings",a5,31,b1,a6),
	HX_("parent",2a,05,7e,ed),
	HX_("name",4b,72,ff,48),
	HX_("destroy",fa,2c,86,24),
	HX_("clear",8d,71,5b,48),
	HX_("get",96,80,4e,00),
	HX_("update",09,86,05,87),
	HX_("check",c8,98,b6,45),
	HX_("any",ec,fa,49,00),
	HX_("add",21,f2,49,00),
	HX_("remove",44,9c,88,04),
	HX_("setGamepadID",ba,0a,88,83),
	::String(null()) };

::hx::Class FlxDigitalSet_obj::__mClass;

void FlxDigitalSet_obj::__register()
{
	FlxDigitalSet_obj _hx_dummy;
	FlxDigitalSet_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input.FlxDigitalSet",0f,9a,cb,20);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxDigitalSet_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxDigitalSet_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxDigitalSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxDigitalSet_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
