// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_flixel_addons_input_FlxDeviceIDRaw
#include <flixel/addons/input/FlxDeviceIDRaw.h>
#endif
namespace flixel{
namespace addons{
namespace input{

::flixel::addons::input::FlxDeviceIDRaw FlxDeviceIDRaw_obj::ALL;

::flixel::addons::input::FlxDeviceIDRaw FlxDeviceIDRaw_obj::FIRST_ACTIVE;

::flixel::addons::input::FlxDeviceIDRaw FlxDeviceIDRaw_obj::ID(int id)
{
	return ::hx::CreateEnum< FlxDeviceIDRaw_obj >(HX_("ID",db,3f,00,00),3,1)->_hx_init(0,id);
}

::flixel::addons::input::FlxDeviceIDRaw FlxDeviceIDRaw_obj::NONE;

bool FlxDeviceIDRaw_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("ALL",01,95,31,00)) { outValue = FlxDeviceIDRaw_obj::ALL; return true; }
	if (inName==HX_("FIRST_ACTIVE",55,71,b1,b1)) { outValue = FlxDeviceIDRaw_obj::FIRST_ACTIVE; return true; }
	if (inName==HX_("ID",db,3f,00,00)) { outValue = FlxDeviceIDRaw_obj::ID_dyn(); return true; }
	if (inName==HX_("NONE",b8,da,ca,33)) { outValue = FlxDeviceIDRaw_obj::NONE; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(FlxDeviceIDRaw_obj)

int FlxDeviceIDRaw_obj::__FindIndex(::String inName)
{
	if (inName==HX_("ALL",01,95,31,00)) return 1;
	if (inName==HX_("FIRST_ACTIVE",55,71,b1,b1)) return 0;
	if (inName==HX_("ID",db,3f,00,00)) return 3;
	if (inName==HX_("NONE",b8,da,ca,33)) return 2;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxDeviceIDRaw_obj,ID,return)

int FlxDeviceIDRaw_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("ALL",01,95,31,00)) return 0;
	if (inName==HX_("FIRST_ACTIVE",55,71,b1,b1)) return 0;
	if (inName==HX_("ID",db,3f,00,00)) return 1;
	if (inName==HX_("NONE",b8,da,ca,33)) return 0;
	return super::__FindArgCount(inName);
}

::hx::Val FlxDeviceIDRaw_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("ALL",01,95,31,00)) return ALL;
	if (inName==HX_("FIRST_ACTIVE",55,71,b1,b1)) return FIRST_ACTIVE;
	if (inName==HX_("ID",db,3f,00,00)) return ID_dyn();
	if (inName==HX_("NONE",b8,da,ca,33)) return NONE;
	return super::__Field(inName,inCallProp);
}

static ::String FlxDeviceIDRaw_obj_sStaticFields[] = {
	HX_("FIRST_ACTIVE",55,71,b1,b1),
	HX_("ALL",01,95,31,00),
	HX_("NONE",b8,da,ca,33),
	HX_("ID",db,3f,00,00),
	::String(null())
};

::hx::Class FlxDeviceIDRaw_obj::__mClass;

Dynamic __Create_FlxDeviceIDRaw_obj() { return new FlxDeviceIDRaw_obj; }

void FlxDeviceIDRaw_obj::__register()
{

::hx::Static(__mClass) = ::hx::_hx_RegisterClass(HX_("flixel.addons.input.FlxDeviceIDRaw",72,0d,d8,91), ::hx::TCanCast< FlxDeviceIDRaw_obj >,FlxDeviceIDRaw_obj_sStaticFields,0,
	&__Create_FlxDeviceIDRaw_obj, &__Create,
	&super::__SGetClass(), &CreateFlxDeviceIDRaw_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &FlxDeviceIDRaw_obj::__GetStatic;
}

void FlxDeviceIDRaw_obj::__boot()
{
ALL = ::hx::CreateConstEnum< FlxDeviceIDRaw_obj >(HX_("ALL",01,95,31,00),1);
FIRST_ACTIVE = ::hx::CreateConstEnum< FlxDeviceIDRaw_obj >(HX_("FIRST_ACTIVE",55,71,b1,b1),0);
NONE = ::hx::CreateConstEnum< FlxDeviceIDRaw_obj >(HX_("NONE",b8,da,ca,33),2);
}


} // end namespace flixel
} // end namespace addons
} // end namespace input
