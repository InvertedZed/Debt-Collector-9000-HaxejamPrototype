// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_input_DigitalEvent
#include <flixel/addons/input/DigitalEvent.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxAnalogSet
#include <flixel/addons/input/FlxAnalogSet.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlInputTypeRaw
#include <flixel/addons/input/FlxControlInputTypeRaw.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlMappedInput
#include <flixel/addons/input/FlxControlMappedInput.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlMappedInputTools
#include <flixel/addons/input/FlxControlMappedInputTools.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControls
#include <flixel/addons/input/FlxControls.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxDeviceIDRaw
#include <flixel/addons/input/FlxDeviceIDRaw.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxDigitalSet
#include <flixel/addons/input/FlxDigitalSet.h>
#endif
#ifndef INCLUDED_flixel_addons_input_GroupConflict
#include <flixel/addons/input/GroupConflict.h>
#endif
#ifndef INCLUDED_flixel_addons_input_GroupConflictsResults
#include <flixel/addons/input/GroupConflictsResults.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxControlInputType_FlxControlInputType_Impl_
#include <flixel/addons/input/_FlxControlInputType/FlxControlInputType_Impl_.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxControls_ActionManager
#include <flixel/addons/input/_FlxControls/ActionManager.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxControls_DigitalEventTools
#include <flixel/addons/input/_FlxControls/DigitalEventTools.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxControls_GroupTools
#include <flixel/addons/input/_FlxControls/GroupTools.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxControls_VirtualPadInputProxy
#include <flixel/addons/input/_FlxControls/VirtualPadInputProxy.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxDigitalSet_FlxControlDigital_Impl_
#include <flixel/addons/input/_FlxDigitalSet/FlxControlDigital_Impl_.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionManager
#include <flixel/input/actions/FlxActionManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputDevice
#include <flixel/input/actions/FlxInputDevice.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxVirtualPad
#include <flixel/ui/FlxVirtualPad.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_181_new,"flixel.addons.input.FlxControls","new",0xd08c950d,"flixel.addons.input.FlxControls.new","flixel/addons/input/FlxControls.hx",181,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_267_initGroups,"flixel.addons.input.FlxControls","initGroups",0x8dac5a77,"flixel.addons.input.FlxControls.initGroups","flixel/addons/input/FlxControls.hx",267,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_270_destroy,"flixel.addons.input.FlxControls","destroy",0x96c34c27,"flixel.addons.input.FlxControls.destroy","flixel/addons/input/FlxControls.hx",270,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_289_throwAllGroupConflicts,"flixel.addons.input.FlxControls","throwAllGroupConflicts",0xbfefe310,"flixel.addons.input.FlxControls.throwAllGroupConflicts","flixel/addons/input/FlxControls.hx",289,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_301_getAnalog2D,"flixel.addons.input.FlxControls","getAnalog2D",0x1b9c6a65,"flixel.addons.input.FlxControls.getAnalog2D","flixel/addons/input/FlxControls.hx",301,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_306_getAnalog1D,"flixel.addons.input.FlxControls","getAnalog1D",0x1b9c6986,"flixel.addons.input.FlxControls.getAnalog1D","flixel/addons/input/FlxControls.hx",306,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_316_setGamepadID,"flixel.addons.input.FlxControls","setGamepadID",0xe269c86d,"flixel.addons.input.FlxControls.setGamepadID","flixel/addons/input/FlxControls.hx",316,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_335_clearMappings,"flixel.addons.input.FlxControls","clearMappings",0x80b2733f,"flixel.addons.input.FlxControls.clearMappings","flixel/addons/input/FlxControls.hx",335,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_352_resetMappings,"flixel.addons.input.FlxControls","resetMappings",0x7df45d81,"flixel.addons.input.FlxControls.resetMappings","flixel/addons/input/FlxControls.hx",352,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_359_addMappings,"flixel.addons.input.FlxControls","addMappings",0x01ce2293,"flixel.addons.input.FlxControls.addMappings","flixel/addons/input/FlxControls.hx",359,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_375_clearGroups,"flixel.addons.input.FlxControls","clearGroups",0xd9d5eb6e,"flixel.addons.input.FlxControls.clearGroups","flixel/addons/input/FlxControls.hx",375,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_389_addGroup,"flixel.addons.input.FlxControls","addGroup",0x96900191,"flixel.addons.input.FlxControls.addGroup","flixel/addons/input/FlxControls.hx",389,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_405_removeGroup,"flixel.addons.input.FlxControls","removeGroup",0xc1e94a08,"flixel.addons.input.FlxControls.removeGroup","flixel/addons/input/FlxControls.hx",405,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_419_groupsOf,"flixel.addons.input.FlxControls","groupsOf",0x14f74ebe,"flixel.addons.input.FlxControls.groupsOf","flixel/addons/input/FlxControls.hx",419,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_427_groupsOfRaw,"flixel.addons.input.FlxControls","groupsOfRaw",0x2be289ca,"flixel.addons.input.FlxControls.groupsOfRaw","flixel/addons/input/FlxControls.hx",427,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_435_groupInstancesOf,"flixel.addons.input.FlxControls","groupInstancesOf",0x476f6629,"flixel.addons.input.FlxControls.groupInstancesOf","flixel/addons/input/FlxControls.hx",435,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_444_checkAllGroupConflicts,"flixel.addons.input.FlxControls","checkAllGroupConflicts",0xea54712e,"flixel.addons.input.FlxControls.checkAllGroupConflicts","flixel/addons/input/FlxControls.hx",444,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_457_checkGroupConflicts,"flixel.addons.input.FlxControls","checkGroupConflicts",0x03187437,"flixel.addons.input.FlxControls.checkGroupConflicts","flixel/addons/input/FlxControls.hx",457,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_465_setVirtualPad,"flixel.addons.input.FlxControls","setVirtualPad",0xa8e40137,"flixel.addons.input.FlxControls.setVirtualPad","flixel/addons/input/FlxControls.hx",465,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_482_removeVirtualPad,"flixel.addons.input.FlxControls","removeVirtualPad",0xca2eb49f,"flixel.addons.input.FlxControls.removeVirtualPad","flixel/addons/input/FlxControls.hx",482,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_499_checkDigital,"flixel.addons.input.FlxControls","checkDigital",0x1a493da3,"flixel.addons.input.FlxControls.checkDigital","flixel/addons/input/FlxControls.hx",499,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_512_canAdd,"flixel.addons.input.FlxControls","canAdd",0xdb0dc564,"flixel.addons.input.FlxControls.canAdd","flixel/addons/input/FlxControls.hx",512,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_525_listConflictingActions,"flixel.addons.input.FlxControls","listConflictingActions",0xc0136f7e,"flixel.addons.input.FlxControls.listConflictingActions","flixel/addons/input/FlxControls.hx",525,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_529_canAddHelper,"flixel.addons.input.FlxControls","canAddHelper",0x9e74d9f2,"flixel.addons.input.FlxControls.canAddHelper","flixel/addons/input/FlxControls.hx",529,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_562_add,"flixel.addons.input.FlxControls","add",0xd082b6ce,"flixel.addons.input.FlxControls.add","flixel/addons/input/FlxControls.hx",562,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_588_addIfValid,"flixel.addons.input.FlxControls","addIfValid",0x70636eb1,"flixel.addons.input.FlxControls.addIfValid","flixel/addons/input/FlxControls.hx",588,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_605_remove,"flixel.addons.input.FlxControls","remove",0x277c41b7,"flixel.addons.input.FlxControls.remove","flixel/addons/input/FlxControls.hx",605,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_626_getAnalogSet,"flixel.addons.input.FlxControls","getAnalogSet",0x0d59d58f,"flixel.addons.input.FlxControls.getAnalogSet","flixel/addons/input/FlxControls.hx",626,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_641_getExistingInput,"flixel.addons.input.FlxControls","getExistingInput",0x1694423c,"flixel.addons.input.FlxControls.getExistingInput","flixel/addons/input/FlxControls.hx",641,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_634_getExistingInput,"flixel.addons.input.FlxControls","getExistingInput",0x1694423c,"flixel.addons.input.FlxControls.getExistingInput","flixel/addons/input/FlxControls.hx",634,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_652_getConflictingInput,"flixel.addons.input.FlxControls","getConflictingInput",0x15f5777d,"flixel.addons.input.FlxControls.getConflictingInput","flixel/addons/input/FlxControls.hx",652,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_645_getConflictingInput,"flixel.addons.input.FlxControls","getConflictingInput",0x15f5777d,"flixel.addons.input.FlxControls.getConflictingInput","flixel/addons/input/FlxControls.hx",645,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_662_listInputsFor,"flixel.addons.input.FlxControls","listInputsFor",0xdb63200f,"flixel.addons.input.FlxControls.listInputsFor","flixel/addons/input/FlxControls.hx",662,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_671_getInputsOf,"flixel.addons.input.FlxControls","getInputsOf",0x167ce303,"flixel.addons.input.FlxControls.getInputsOf","flixel/addons/input/FlxControls.hx",671,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_688_listMappedInputsFor,"flixel.addons.input.FlxControls","listMappedInputsFor",0x48284b1c,"flixel.addons.input.FlxControls.listMappedInputsFor","flixel/addons/input/FlxControls.hx",688,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_701_listInputLabelsFor,"flixel.addons.input.FlxControls","listInputLabelsFor",0x7a7349d1,"flixel.addons.input.FlxControls.listInputLabelsFor","flixel/addons/input/FlxControls.hx",701,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_709_reset,"flixel.addons.input.FlxControls","reset",0xca3d53bc,"flixel.addons.input.FlxControls.reset","flixel/addons/input/FlxControls.hx",709,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_712_onFocus,"flixel.addons.input.FlxControls","onFocus",0x0d041d66,"flixel.addons.input.FlxControls.onFocus","flixel/addons/input/FlxControls.hx",712,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_713_onFocusLost,"flixel.addons.input.FlxControls","onFocusLost",0x6b469e6a,"flixel.addons.input.FlxControls.onFocusLost","flixel/addons/input/FlxControls.hx",713,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_716_update,"flixel.addons.input.FlxControls","update",0xa9f92b7c,"flixel.addons.input.FlxControls.update","flixel/addons/input/FlxControls.hx",716,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_746_isDeviceActive,"flixel.addons.input.FlxControls","isDeviceActive",0x9ee7d679,"flixel.addons.input.FlxControls.isDeviceActive","flixel/addons/input/FlxControls.hx",746,0x03116ce4)
HX_LOCAL_STACK_FRAME(_hx_pos_4eae03e2a5c001b6_794_getActiveGamepad,"flixel.addons.input.FlxControls","getActiveGamepad",0x5b2de838,"flixel.addons.input.FlxControls.getActiveGamepad","flixel/addons/input/FlxControls.hx",794,0x03116ce4)
namespace flixel{
namespace addons{
namespace input{

void FlxControls_obj::__construct(::String __o_name){
            		::String name = __o_name;
            		if (::hx::IsNull(__o_name)) name = HX_("Main",59,64,2f,33);
            	HX_GC_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_181_new)
HXLINE( 237)		 ::haxe::ds::EnumValueMap _g =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN( 237)		_g->set(::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn(),::flixel::FlxG_obj::game->ticks);
HXDLIN( 237)		_g->set(::flixel::input::actions::FlxInputDevice_obj::MOUSE_dyn(),::flixel::FlxG_obj::game->ticks);
HXDLIN( 237)		_g->set(::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn(),::flixel::FlxG_obj::game->ticks);
HXDLIN( 237)		this->deviceActivity = _g;
HXLINE( 234)		this->lastActiveDevice = ::flixel::input::actions::FlxInputDevice_obj::NONE_dyn();
HXLINE( 232)		this->inputsByAction =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 230)		this->groupsLookup =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 228)		this->groups =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 216)		 ::haxe::ds::StringMap _g1 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 216)		_g1->set(HX_("up",5b,66,00,00), ::flixel::addons::input::_FlxControls::VirtualPadInputProxy_obj::__alloc( HX_CTX ));
HXDLIN( 216)		_g1->set(HX_("down",62,f8,6d,42), ::flixel::addons::input::_FlxControls::VirtualPadInputProxy_obj::__alloc( HX_CTX ));
HXDLIN( 216)		_g1->set(HX_("left",07,08,b0,47), ::flixel::addons::input::_FlxControls::VirtualPadInputProxy_obj::__alloc( HX_CTX ));
HXDLIN( 216)		_g1->set(HX_("right",dc,0b,64,e9), ::flixel::addons::input::_FlxControls::VirtualPadInputProxy_obj::__alloc( HX_CTX ));
HXDLIN( 216)		_g1->set(HX_("a",61,00,00,00), ::flixel::addons::input::_FlxControls::VirtualPadInputProxy_obj::__alloc( HX_CTX ));
HXDLIN( 216)		_g1->set(HX_("b",62,00,00,00), ::flixel::addons::input::_FlxControls::VirtualPadInputProxy_obj::__alloc( HX_CTX ));
HXDLIN( 216)		_g1->set(HX_("c",63,00,00,00), ::flixel::addons::input::_FlxControls::VirtualPadInputProxy_obj::__alloc( HX_CTX ));
HXDLIN( 216)		_g1->set(HX_("x",78,00,00,00), ::flixel::addons::input::_FlxControls::VirtualPadInputProxy_obj::__alloc( HX_CTX ));
HXDLIN( 216)		_g1->set(HX_("y",79,00,00,00), ::flixel::addons::input::_FlxControls::VirtualPadInputProxy_obj::__alloc( HX_CTX ));
HXDLIN( 216)		this->vPadProxies = _g1;
HXLINE( 212)		this->analogSets =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 211)		this->digitalSets =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 190)		this->virtualPad = null();
HXLINE( 187)		this->gamepadID = ::flixel::addons::input::FlxDeviceIDRaw_obj::ALL_dyn();
HXLINE( 245)		this->name = name;
HXLINE( 246)		this->manager =  ::flixel::addons::input::_FlxControls::ActionManager_obj::__alloc( HX_CTX );
HXLINE( 249)		{
HXLINE( 249)			int _g2 = 0;
HXDLIN( 249)			::Array< ::Dynamic> _g11 = ::Type_obj::allEnums(::hx::ClassOf< ::flixel::addons::input::DigitalEvent >());
HXDLIN( 249)			while((_g2 < _g11->length)){
HXLINE( 249)				 ::flixel::addons::input::DigitalEvent event = _g11->__get(_g2).StaticCast<  ::flixel::addons::input::DigitalEvent >();
HXDLIN( 249)				_g2 = (_g2 + 1);
HXLINE( 250)				{
HXLINE( 250)					::Dynamic this1 = this->digitalSets;
HXDLIN( 250)					 ::flixel::addons::input::FlxDigitalSet v =  ::flixel::addons::input::FlxDigitalSet_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),event);
HXDLIN( 250)					( ( ::haxe::ds::EnumValueMap)(this1) )->set(event,v);
            				}
            			}
            		}
HXLINE( 252)		this->addMappings(this->getDefaultMappings());
HXLINE( 254)		this->initGroups();
HXLINE( 256)		{
HXLINE( 256)			::Dynamic map = this->groups;
HXDLIN( 256)			::Dynamic _g_map = map;
HXDLIN( 256)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 256)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 256)				::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 256)				::cpp::VirtualArray _g_value = ( (::cpp::VirtualArray)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN( 256)				::String _g_key = key;
HXDLIN( 256)				::String name1 = _g_key;
HXDLIN( 256)				::cpp::VirtualArray actions = _g_value;
HXLINE( 258)				{
HXLINE( 258)					int _g21 = 0;
HXDLIN( 258)					while((_g21 < actions->get_length())){
HXLINE( 258)						 ::Dynamic action = actions->__get(_g21);
HXDLIN( 258)						_g21 = (_g21 + 1);
HXLINE( 259)						this->groupsOfRaw(action)->push(name1);
            					}
            				}
            			}
            		}
            	}

bool FlxControls_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x64be9eed;
}

static ::flixel::input::IFlxInputManager_obj _hx_flixel_addons_input_FlxControls__hx_flixel_input_IFlxInputManager= {
	( void (::hx::Object::*)())&::flixel::addons::input::FlxControls_obj::destroy,
	( void (::hx::Object::*)())&::flixel::addons::input::FlxControls_obj::reset,
	( void (::hx::Object::*)())&::flixel::addons::input::FlxControls_obj::update,
	( void (::hx::Object::*)())&::flixel::addons::input::FlxControls_obj::onFocus,
	( void (::hx::Object::*)())&::flixel::addons::input::FlxControls_obj::onFocusLost,
};

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_addons_input_FlxControls__hx_flixel_util_IFlxDestroyable= {
	( void (::hx::Object::*)())&::flixel::addons::input::FlxControls_obj::destroy,
};

void *FlxControls_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x65dd217a: return &_hx_flixel_addons_input_FlxControls__hx_flixel_input_IFlxInputManager;
		case (int)0xd4fe2fcd: return &_hx_flixel_addons_input_FlxControls__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxControls_obj::initGroups(){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_267_initGroups)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControls_obj,initGroups,(void))

void FlxControls_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_270_destroy)
HXLINE( 271)		this->manager->destroy();
HXLINE( 273)		{
HXLINE( 273)			 ::Dynamic list = this->digitalSets->iterator();
HXDLIN( 273)			while(( (bool)(list->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 273)				 ::flixel::addons::input::FlxDigitalSet list1 = ( ( ::flixel::addons::input::FlxDigitalSet)(list->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 274)				list1->destroy();
            			}
            		}
HXLINE( 276)		{
HXLINE( 276)			 ::Dynamic list2 = this->analogSets->iterator();
HXDLIN( 276)			while(( (bool)(list2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 276)				 ::flixel::addons::input::FlxAnalogSet list3 = ( ( ::flixel::addons::input::FlxAnalogSet)(list2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 277)				list3->destroy();
            			}
            		}
HXLINE( 279)		this->digitalSets->clear();
HXLINE( 280)		this->analogSets->clear();
HXLINE( 281)		this->inputsByAction->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControls_obj,destroy,(void))

void FlxControls_obj::throwAllGroupConflicts(){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_289_throwAllGroupConflicts)
HXDLIN( 289)		 ::flixel::addons::input::GroupConflictsResults _g = this->checkAllGroupConflicts();
HXDLIN( 289)		switch((int)(_g->_hx_getIndex())){
            			case (int)0: {
            			}
            			break;
            			case (int)1: {
HXLINE( 292)				::Array< ::Dynamic> list = _g->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 293)				::Array< ::String > result = ::Array_obj< ::String >::__new(list->length);
HXDLIN( 293)				{
HXLINE( 293)					int _g1 = 0;
HXDLIN( 293)					int _g2 = list->length;
HXDLIN( 293)					while((_g1 < _g2)){
HXLINE( 293)						_g1 = (_g1 + 1);
HXDLIN( 293)						int i = (_g1 - 1);
HXDLIN( 293)						{
HXLINE( 293)							::String inValue = ( ( ::flixel::addons::input::GroupConflict)(_hx_array_unsafe_get(list,i)) )->toString();
HXDLIN( 293)							result->__unsafe_set(i,inValue);
            						}
            					}
            				}
HXDLIN( 293)				::Array< ::String > strList = result;
HXLINE( 294)				strList->unshift(HX_("Found conflicting inputs in the default layout:",d0,a8,bb,0e));
HXLINE( 295)				HX_STACK_DO_THROW(strList->join(HX_("\n\t - ",14,28,0d,c8)));
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControls_obj,throwAllGroupConflicts,(void))

 ::flixel::addons::input::FlxAnalogSet FlxControls_obj::getAnalog2D( ::Dynamic action){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_301_getAnalog2D)
HXDLIN( 301)		return this->analogSets->get(action).StaticCast<  ::flixel::addons::input::FlxAnalogSet >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControls_obj,getAnalog2D,return )

 ::flixel::addons::input::FlxAnalogSet FlxControls_obj::getAnalog1D( ::Dynamic action){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_306_getAnalog1D)
HXDLIN( 306)		return this->analogSets->get(action).StaticCast<  ::flixel::addons::input::FlxAnalogSet >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControls_obj,getAnalog1D,return )

void FlxControls_obj::setGamepadID( ::flixel::addons::input::FlxDeviceIDRaw id){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_316_setGamepadID)
HXLINE( 317)		if (::hx::IsPointerEq( this->gamepadID,id )) {
HXLINE( 318)			return;
            		}
HXLINE( 320)		this->gamepadID = id;
HXLINE( 322)		{
HXLINE( 322)			 ::Dynamic set = this->digitalSets->iterator();
HXDLIN( 322)			while(( (bool)(set->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 322)				 ::flixel::addons::input::FlxDigitalSet set1 = ( ( ::flixel::addons::input::FlxDigitalSet)(set->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 323)				set1->setGamepadID(id);
            			}
            		}
HXLINE( 325)		{
HXLINE( 325)			 ::Dynamic set2 = this->analogSets->iterator();
HXDLIN( 325)			while(( (bool)(set2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 325)				 ::flixel::addons::input::FlxAnalogSet set3 = ( ( ::flixel::addons::input::FlxAnalogSet)(set2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 326)				set3->setGamepadID(id);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControls_obj,setGamepadID,(void))

HX_DEFINE_DYNAMIC_FUNC0(FlxControls_obj,getDefaultMappings,return )

void FlxControls_obj::clearMappings(){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_335_clearMappings)
HXLINE( 337)		{
HXLINE( 337)			 ::Dynamic set = this->digitalSets->iterator();
HXDLIN( 337)			while(( (bool)(set->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 337)				 ::flixel::addons::input::FlxDigitalSet set1 = ( ( ::flixel::addons::input::FlxDigitalSet)(set->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 338)				set1->clear();
            			}
            		}
HXLINE( 341)		{
HXLINE( 341)			 ::Dynamic list = this->analogSets->iterator();
HXDLIN( 341)			while(( (bool)(list->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 341)				 ::flixel::addons::input::FlxAnalogSet list1 = ( ( ::flixel::addons::input::FlxAnalogSet)(list->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 342)				list1->destroy();
            			}
            		}
HXLINE( 344)		this->analogSets->clear();
HXLINE( 345)		this->inputsByAction->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControls_obj,clearMappings,(void))

void FlxControls_obj::resetMappings( ::haxe::ds::EnumValueMap mappings){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_352_resetMappings)
HXLINE( 353)		this->clearMappings();
HXLINE( 354)		this->addMappings(mappings);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControls_obj,resetMappings,(void))

void FlxControls_obj::addMappings( ::haxe::ds::EnumValueMap mappings){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_359_addMappings)
HXDLIN( 359)		::Dynamic map = mappings;
HXDLIN( 359)		::Dynamic _g_map = map;
HXDLIN( 359)		 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 359)		while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN( 359)			 ::Dynamic key = _g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 359)			::Array< ::Dynamic> _g_value = ( (::Array< ::Dynamic>)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN( 359)			 ::Dynamic _g_key = key;
HXDLIN( 359)			 ::Dynamic action = _g_key;
HXDLIN( 359)			::Array< ::Dynamic> inputs = _g_value;
HXLINE( 360)			{
HXLINE( 361)				if (::hx::IsNull( inputs )) {
HXLINE( 362)					HX_STACK_DO_THROW((HX_("Unexpected null inputs for ",44,3f,cd,0a) + ::Std_obj::string(action)));
            				}
HXLINE( 364)				{
HXLINE( 364)					::Array< ::Dynamic> v = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 364)					this->inputsByAction->set(action,v);
            				}
HXLINE( 366)				{
HXLINE( 366)					int _g = 0;
HXDLIN( 366)					while((_g < inputs->length)){
HXLINE( 366)						 ::flixel::addons::input::FlxControlInputTypeRaw input = inputs->__get(_g).StaticCast<  ::flixel::addons::input::FlxControlInputTypeRaw >();
HXDLIN( 366)						_g = (_g + 1);
HXLINE( 367)						this->add(action,input);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControls_obj,addMappings,(void))

void FlxControls_obj::clearGroups(){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_375_clearGroups)
HXLINE( 376)		this->groups->clear();
HXLINE( 377)		this->groupsLookup->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControls_obj,clearGroups,(void))

void FlxControls_obj::addGroup(::String name,::cpp::VirtualArray actions){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_389_addGroup)
HXLINE( 390)		if (this->groups->exists(name)) {
HXLINE( 391)			this->removeGroup(name);
            		}
HXLINE( 394)		this->groups->set(name,actions);
HXLINE( 397)		{
HXLINE( 397)			int _g = 0;
HXDLIN( 397)			while((_g < actions->get_length())){
HXLINE( 397)				 ::Dynamic action = actions->__get(_g);
HXDLIN( 397)				_g = (_g + 1);
HXLINE( 398)				this->groupsOfRaw(action)->push(name);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControls_obj,addGroup,(void))

void FlxControls_obj::removeGroup(::String name){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_405_removeGroup)
HXLINE( 406)		if (this->groups->exists(name)) {
HXLINE( 408)			int _g = 0;
HXDLIN( 408)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)(this->groups->get(name)) );
HXDLIN( 408)			while((_g < _g1->get_length())){
HXLINE( 408)				 ::Dynamic action = _g1->__get(_g);
HXDLIN( 408)				_g = (_g + 1);
HXLINE( 409)				this->groupsOfRaw(action)->remove(name);
            			}
            		}
HXLINE( 411)		this->groups->remove(name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControls_obj,removeGroup,(void))

::Array< ::String > FlxControls_obj::groupsOf( ::Dynamic action){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_419_groupsOf)
HXDLIN( 419)		return this->groupsOfRaw(action)->copy();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControls_obj,groupsOf,return )

::Array< ::String > FlxControls_obj::groupsOfRaw( ::Dynamic action){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_427_groupsOfRaw)
HXLINE( 428)		if ((this->groupsLookup->exists(action) == false)) {
HXLINE( 429)			::Array< ::String > v = ::Array_obj< ::String >::__new(0);
HXDLIN( 429)			this->groupsLookup->set(action,v);
            		}
HXLINE( 431)		return ( (::Array< ::String >)(this->groupsLookup->get(action)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControls_obj,groupsOfRaw,return )

::Array< ::Dynamic> FlxControls_obj::groupInstancesOf( ::Dynamic action){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_435_groupInstancesOf)
HXDLIN( 435)		 ::flixel::addons::input::FlxControls _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 436)		::Array< ::String > _this = this->groupsOfRaw(action);
HXDLIN( 436)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(_this->length);
HXDLIN( 436)		{
HXLINE( 436)			int _g = 0;
HXDLIN( 436)			int _g1 = _this->length;
HXDLIN( 436)			while((_g < _g1)){
HXLINE( 436)				_g = (_g + 1);
HXDLIN( 436)				int i = (_g - 1);
HXDLIN( 436)				{
HXLINE( 436)					::String g = ( (::String)(_hx_array_unsafe_get(_this,i)) );
HXDLIN( 436)					::cpp::VirtualArray inValue = ( (::cpp::VirtualArray)(_gthis->groups->get(g)) );
HXDLIN( 436)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN( 436)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControls_obj,groupInstancesOf,return )

 ::flixel::addons::input::GroupConflictsResults FlxControls_obj::checkAllGroupConflicts(){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_444_checkAllGroupConflicts)
HXLINE( 445)		::Array< ::Dynamic> list = ::Array_obj< ::Dynamic>::__new();
HXLINE( 446)		{
HXLINE( 446)			::Dynamic map = this->groups;
HXDLIN( 446)			::Dynamic _g_map = map;
HXDLIN( 446)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 446)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 446)				::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 446)				::cpp::VirtualArray _g_value = ( (::cpp::VirtualArray)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN( 446)				::String _g_key = key;
HXDLIN( 446)				::String name = _g_key;
HXDLIN( 446)				::cpp::VirtualArray group = _g_value;
HXLINE( 447)				::flixel::addons::input::_FlxControls::GroupTools_obj::addAllConflicts(::hx::ObjectPtr<OBJ_>(this),name,group,list);
            			}
            		}
HXLINE( 449)		if ((list->length > 0)) {
HXLINE( 449)			return ::flixel::addons::input::GroupConflictsResults_obj::Found(list);
            		}
            		else {
HXLINE( 449)			return ::flixel::addons::input::GroupConflictsResults_obj::None_dyn();
            		}
HXDLIN( 449)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControls_obj,checkAllGroupConflicts,return )

 ::flixel::addons::input::GroupConflictsResults FlxControls_obj::checkGroupConflicts(::String group){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_457_checkGroupConflicts)
HXLINE( 458)		::Array< ::Dynamic> list = ::Array_obj< ::Dynamic>::__new();
HXLINE( 459)		::flixel::addons::input::_FlxControls::GroupTools_obj::addAllConflicts(::hx::ObjectPtr<OBJ_>(this),group,( (::cpp::VirtualArray)(this->groups->get(group)) ),list);
HXLINE( 460)		if ((list->length > 0)) {
HXLINE( 460)			return ::flixel::addons::input::GroupConflictsResults_obj::Found(list);
            		}
            		else {
HXLINE( 460)			return ::flixel::addons::input::GroupConflictsResults_obj::None_dyn();
            		}
HXDLIN( 460)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControls_obj,checkGroupConflicts,return )

void FlxControls_obj::setVirtualPad( ::flixel::ui::FlxVirtualPad pad){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_465_setVirtualPad)
HXLINE( 466)		this->virtualPad = pad;
HXLINE( 467)		( ( ::flixel::addons::input::_FlxControls::VirtualPadInputProxy)(this->vPadProxies->get(HX_("a",61,00,00,00))) )->target = pad->buttonA;
HXLINE( 468)		( ( ::flixel::addons::input::_FlxControls::VirtualPadInputProxy)(this->vPadProxies->get(HX_("b",62,00,00,00))) )->target = pad->buttonB;
HXLINE( 469)		( ( ::flixel::addons::input::_FlxControls::VirtualPadInputProxy)(this->vPadProxies->get(HX_("c",63,00,00,00))) )->target = pad->buttonC;
HXLINE( 470)		( ( ::flixel::addons::input::_FlxControls::VirtualPadInputProxy)(this->vPadProxies->get(HX_("y",79,00,00,00))) )->target = pad->buttonY;
HXLINE( 471)		( ( ::flixel::addons::input::_FlxControls::VirtualPadInputProxy)(this->vPadProxies->get(HX_("x",78,00,00,00))) )->target = pad->buttonX;
HXLINE( 472)		( ( ::flixel::addons::input::_FlxControls::VirtualPadInputProxy)(this->vPadProxies->get(HX_("left",07,08,b0,47))) )->target = pad->buttonLeft;
HXLINE( 473)		( ( ::flixel::addons::input::_FlxControls::VirtualPadInputProxy)(this->vPadProxies->get(HX_("up",5b,66,00,00))) )->target = pad->buttonUp;
HXLINE( 474)		( ( ::flixel::addons::input::_FlxControls::VirtualPadInputProxy)(this->vPadProxies->get(HX_("right",dc,0b,64,e9))) )->target = pad->buttonRight;
HXLINE( 475)		( ( ::flixel::addons::input::_FlxControls::VirtualPadInputProxy)(this->vPadProxies->get(HX_("down",62,f8,6d,42))) )->target = pad->buttonDown;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControls_obj,setVirtualPad,(void))

void FlxControls_obj::removeVirtualPad(){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_482_removeVirtualPad)
HXLINE( 483)		this->virtualPad = null();
HXLINE( 484)		{
HXLINE( 484)			 ::Dynamic proxy = this->vPadProxies->iterator();
HXDLIN( 484)			while(( (bool)(proxy->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 484)				 ::flixel::addons::input::_FlxControls::VirtualPadInputProxy proxy1 = ( ( ::flixel::addons::input::_FlxControls::VirtualPadInputProxy)(proxy->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 485)				proxy1->target = null();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControls_obj,removeVirtualPad,(void))

void FlxControls_obj::checkDigital( ::Dynamic action, ::flixel::addons::input::DigitalEvent event){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_499_checkDigital)
HXDLIN( 499)		this->digitalSets->get(event).StaticCast<  ::flixel::addons::input::FlxDigitalSet >()->check(action);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControls_obj,checkDigital,(void))

bool FlxControls_obj::canAdd( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_512_canAdd)
HXDLIN( 512)		if ((this->canAddHelper(action,input,true)->_hx_getIndex() == 0)) {
HXDLIN( 512)			return true;
            		}
            		else {
HXDLIN( 512)			return false;
            		}
HXDLIN( 512)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControls_obj,canAdd,return )

 ::flixel::addons::input::GroupConflictsResults FlxControls_obj::listConflictingActions( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_525_listConflictingActions)
HXDLIN( 525)		return this->canAddHelper(action,input,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControls_obj,listConflictingActions,return )

 ::flixel::addons::input::GroupConflictsResults FlxControls_obj::canAddHelper( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input,::hx::Null< bool >  __o_firstOnly){
            		bool firstOnly = __o_firstOnly.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_529_canAddHelper)
HXLINE( 530)		::Array< ::Dynamic> conflicts = ::Array_obj< ::Dynamic>::__new();
HXLINE( 531)		{
HXLINE( 531)			int _g = 0;
HXDLIN( 531)			::Array< ::String > _g1 = this->groupsOfRaw(action);
HXDLIN( 531)			while((_g < _g1->length)){
HXLINE( 531)				::String groupName = _g1->__get(_g);
HXDLIN( 531)				_g = (_g + 1);
HXLINE( 533)				::cpp::VirtualArray actionConflicts = ::flixel::addons::input::_FlxControls::GroupTools_obj::getConflictingActions(::hx::ObjectPtr<OBJ_>(this),( (::cpp::VirtualArray)(this->groups->get(groupName)) ),input);
HXLINE( 534)				{
HXLINE( 534)					int _g2 = 0;
HXDLIN( 534)					while((_g2 < actionConflicts->get_length())){
HXLINE( 534)						 ::Dynamic action1 = actionConflicts->__get(_g2);
HXDLIN( 534)						_g2 = (_g2 + 1);
HXLINE( 536)						if (::hx::IsNotEq( action1,action )) {
HXLINE( 538)							conflicts->push( ::flixel::addons::input::GroupConflict_obj::__alloc( HX_CTX ,groupName,action1,action,input));
HXLINE( 539)							if (firstOnly) {
HXLINE( 540)								return ::flixel::addons::input::_FlxControls::GroupTools_obj::resultsFromArray(conflicts);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 545)		return ::flixel::addons::input::_FlxControls::GroupTools_obj::resultsFromArray(conflicts);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxControls_obj,canAddHelper,return )

void FlxControls_obj::add( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_562_add)
HXLINE( 564)		 ::flixel::addons::input::FlxControlInputTypeRaw existingInput = this->getExistingInput(action,input);
HXLINE( 565)		if (::hx::IsNotNull( existingInput )) {
HXLINE( 566)			this->remove(action,existingInput);
            		}
HXLINE( 568)		this->getInputsOf(action)->push(input);
HXLINE( 570)		if (::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::isDigital(input)) {
HXLINE( 572)			 ::Dynamic list = this->digitalSets->iterator();
HXDLIN( 572)			while(( (bool)(list->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 572)				 ::flixel::addons::input::FlxDigitalSet list1 = ( ( ::flixel::addons::input::FlxDigitalSet)(list->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 573)				 ::flixel::input::actions::FlxActionDigital _hx_tmp = list1->get(action);
HXDLIN( 573)				 ::flixel::addons::input::FlxControls list2 = list1->parent;
HXDLIN( 573)				::flixel::addons::input::_FlxDigitalSet::FlxControlDigital_Impl__obj::add(_hx_tmp,list2,input,::flixel::addons::input::_FlxControls::DigitalEventTools_obj::toState(list1->event));
            			}
            		}
HXLINE( 576)		if (::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::isAnalog(input)) {
HXLINE( 577)			this->getAnalogSet(action)->add(input);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControls_obj,add,(void))

 ::flixel::addons::input::GroupConflictsResults FlxControls_obj::addIfValid( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_588_addIfValid)
HXLINE( 589)		 ::flixel::addons::input::GroupConflictsResults conflicts = this->canAddHelper(action,input,null());
HXLINE( 590)		bool _hx_tmp;
HXDLIN( 590)		if ((conflicts->_hx_getIndex() == 0)) {
HXLINE( 590)			_hx_tmp = true;
            		}
            		else {
HXLINE( 590)			_hx_tmp = false;
            		}
HXDLIN( 590)		if (_hx_tmp) {
HXLINE( 591)			this->add(action,input);
            		}
HXLINE( 593)		return conflicts;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControls_obj,addIfValid,return )

bool FlxControls_obj::remove( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_605_remove)
HXLINE( 607)		 ::flixel::addons::input::FlxControlInputTypeRaw input1 = this->getExistingInput(action,input);
HXLINE( 608)		if (::hx::IsNull( input1 )) {
HXLINE( 609)			return false;
            		}
HXLINE( 611)		this->getInputsOf(action)->remove(input1);
HXLINE( 613)		if (::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::isDigital(input1)) {
HXLINE( 615)			 ::Dynamic list = this->digitalSets->iterator();
HXDLIN( 615)			while(( (bool)(list->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 615)				 ::flixel::addons::input::FlxDigitalSet list1 = ( ( ::flixel::addons::input::FlxDigitalSet)(list->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 616)				 ::flixel::input::actions::FlxActionDigital _hx_tmp = list1->get(action);
HXDLIN( 616)				::flixel::addons::input::_FlxDigitalSet::FlxControlDigital_Impl__obj::remove(_hx_tmp,list1->parent,input1);
            			}
            		}
HXLINE( 619)		if (::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::isAnalog(input1)) {
HXLINE( 620)			this->getAnalogSet(action)->remove(input1);
            		}
HXLINE( 622)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControls_obj,remove,return )

 ::flixel::addons::input::FlxAnalogSet FlxControls_obj::getAnalogSet( ::Dynamic action){
            	HX_GC_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_626_getAnalogSet)
HXLINE( 627)		if ((this->analogSets->exists(action) == false)) {
HXLINE( 628)			::Dynamic this1 = this->analogSets;
HXDLIN( 628)			 ::flixel::addons::input::FlxAnalogSet v =  ::flixel::addons::input::FlxAnalogSet_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),action);
HXDLIN( 628)			( ( ::haxe::ds::EnumValueMap)(this1) )->set(action,v);
            		}
HXLINE( 630)		return this->analogSets->get(action).StaticCast<  ::flixel::addons::input::FlxAnalogSet >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControls_obj,getAnalogSet,return )

 ::flixel::addons::input::FlxControlInputTypeRaw FlxControls_obj::getExistingInput( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::addons::input::FlxControlInputTypeRaw,_e) HXARGC(1)
            		bool _hx_run( ::flixel::addons::input::FlxControlInputTypeRaw input){
            			HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_641_getExistingInput)
HXLINE( 641)			return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(_e,input);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_634_getExistingInput)
HXLINE( 635)		::Array< ::Dynamic> inputs = this->getInputsOf(action);
HXLINE( 637)		if (inputs->contains(input)) {
HXLINE( 638)			return input;
            		}
HXLINE( 641)		 ::flixel::addons::input::FlxControlInputTypeRaw _e = input;
HXDLIN( 641)		return ::Lambda_obj::find(inputs, ::Dynamic(new _hx_Closure_0(_e)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControls_obj,getExistingInput,return )

 ::flixel::addons::input::FlxControlInputTypeRaw FlxControls_obj::getConflictingInput( ::Dynamic action, ::flixel::addons::input::FlxControlInputTypeRaw input){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::addons::input::FlxControlInputTypeRaw,_e) HXARGC(1)
            		bool _hx_run( ::flixel::addons::input::FlxControlInputTypeRaw input){
            			HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_652_getConflictingInput)
HXLINE( 652)			return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::conflicts(_e,input);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_645_getConflictingInput)
HXLINE( 646)		::Array< ::Dynamic> inputs = this->getInputsOf(action);
HXLINE( 648)		if (inputs->contains(input)) {
HXLINE( 649)			return input;
            		}
HXLINE( 652)		 ::flixel::addons::input::FlxControlInputTypeRaw _e = input;
HXDLIN( 652)		return ::Lambda_obj::find(inputs, ::Dynamic(new _hx_Closure_0(_e)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControls_obj,getConflictingInput,return )

::Array< ::Dynamic> FlxControls_obj::listInputsFor( ::Dynamic action, ::flixel::input::actions::FlxInputDevice __o_device){
            		 ::flixel::input::actions::FlxInputDevice device = __o_device;
            		if (::hx::IsNull(__o_device)) device = ::flixel::input::actions::FlxInputDevice_obj::ALL_dyn();
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_662_listInputsFor)
HXLINE( 663)		::Array< ::Dynamic> inputs = this->getInputsOf(action);
HXLINE( 664)		if (::hx::IsPointerEq( device,::flixel::input::actions::FlxInputDevice_obj::ALL_dyn() )) {
HXLINE( 665)			return inputs->copy();
            		}
HXLINE( 667)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 667)		{
HXLINE( 667)			int _g1 = 0;
HXDLIN( 667)			::Array< ::Dynamic> _g2 = inputs;
HXDLIN( 667)			while((_g1 < _g2->length)){
HXLINE( 667)				 ::flixel::addons::input::FlxControlInputTypeRaw v = _g2->__get(_g1).StaticCast<  ::flixel::addons::input::FlxControlInputTypeRaw >();
HXDLIN( 667)				_g1 = (_g1 + 1);
HXDLIN( 667)				if (::hx::IsPointerEq( ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::getDevice(v),device )) {
HXLINE( 667)					_g->push(v);
            				}
            			}
            		}
HXDLIN( 667)		return _g;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControls_obj,listInputsFor,return )

::Array< ::Dynamic> FlxControls_obj::getInputsOf( ::Dynamic action){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_671_getInputsOf)
HXLINE( 672)		if ((this->inputsByAction->exists(action) == false)) {
HXLINE( 673)			::Array< ::Dynamic> v = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 673)			this->inputsByAction->set(action,v);
            		}
HXLINE( 675)		return ( (::Array< ::Dynamic>)(this->inputsByAction->get(action)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControls_obj,getInputsOf,return )

::Array< ::Dynamic> FlxControls_obj::listMappedInputsFor( ::Dynamic action, ::flixel::input::actions::FlxInputDevice __o_device){
            		 ::flixel::input::actions::FlxInputDevice device = __o_device;
            		if (::hx::IsNull(__o_device)) device = ::flixel::input::actions::FlxInputDevice_obj::ALL_dyn();
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_688_listMappedInputsFor)
HXLINE( 689)		 ::flixel::input::gamepad::FlxGamepad gamepad = this->getActiveGamepad();
HXLINE( 690)		::Array< ::Dynamic> _this = this->listInputsFor(action,device);
HXDLIN( 690)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(_this->length);
HXDLIN( 690)		{
HXLINE( 690)			int _g = 0;
HXDLIN( 690)			int _g1 = _this->length;
HXDLIN( 690)			while((_g < _g1)){
HXLINE( 690)				_g = (_g + 1);
HXDLIN( 690)				int i = (_g - 1);
HXDLIN( 690)				{
HXLINE( 690)					 ::flixel::addons::input::FlxControlMappedInput inValue = ::flixel::addons::input::FlxControlMappedInputTools_obj::toMappedInput(_hx_array_unsafe_get(_this,i),gamepad);
HXDLIN( 690)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN( 690)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControls_obj,listMappedInputsFor,return )

::Array< ::String > FlxControls_obj::listInputLabelsFor( ::Dynamic action, ::flixel::input::actions::FlxInputDevice __o_device){
            		 ::flixel::input::actions::FlxInputDevice device = __o_device;
            		if (::hx::IsNull(__o_device)) device = ::flixel::input::actions::FlxInputDevice_obj::ALL_dyn();
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_701_listInputLabelsFor)
HXLINE( 702)		 ::flixel::input::gamepad::FlxGamepad gamepad = this->getActiveGamepad();
HXLINE( 703)		::Array< ::Dynamic> _this = this->listInputsFor(action,device);
HXDLIN( 703)		::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 703)		{
HXLINE( 703)			int _g = 0;
HXDLIN( 703)			int _g1 = _this->length;
HXDLIN( 703)			while((_g < _g1)){
HXLINE( 703)				_g = (_g + 1);
HXDLIN( 703)				int i = (_g - 1);
HXDLIN( 703)				{
HXLINE( 703)					::String inValue = ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::getLabel(_hx_array_unsafe_get(_this,i),gamepad);
HXDLIN( 703)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN( 703)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControls_obj,listInputLabelsFor,return )

void FlxControls_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_709_reset)
HXDLIN( 709)		this->manager->reset();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControls_obj,reset,(void))

void FlxControls_obj::onFocus(){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_712_onFocus)
HXDLIN( 712)		this->manager->onFocus();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControls_obj,onFocus,(void))

void FlxControls_obj::onFocusLost(){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_713_onFocusLost)
HXDLIN( 713)		this->manager->onFocusLost();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControls_obj,onFocusLost,(void))

void FlxControls_obj::update(){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_716_update)
HXLINE( 717)		this->manager->update();
HXLINE( 719)		{
HXLINE( 719)			 ::Dynamic set = this->analogSets->iterator();
HXDLIN( 719)			while(( (bool)(set->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 719)				 ::flixel::addons::input::FlxAnalogSet set1 = ( ( ::flixel::addons::input::FlxAnalogSet)(set->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 720)				set1->update();
            			}
            		}
HXLINE( 722)		{
HXLINE( 722)			 ::Dynamic set2 = this->digitalSets->iterator();
HXDLIN( 722)			while(( (bool)(set2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 722)				 ::flixel::addons::input::FlxDigitalSet set3 = ( ( ::flixel::addons::input::FlxDigitalSet)(set2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 723)				set3->update();
            			}
            		}
HXLINE( 726)		{
HXLINE( 726)			 ::Dynamic device = this->deviceActivity->keys();
HXDLIN( 726)			while(( (bool)(device->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 726)				 ::flixel::input::actions::FlxInputDevice device1 = device->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXLINE( 728)				if (this->isDeviceActive(device1)) {
HXLINE( 729)					int v = ::flixel::FlxG_obj::game->ticks;
HXDLIN( 729)					this->deviceActivity->set(device1,v);
            				}
            			}
            		}
HXLINE( 733)		 ::Dynamic latestTicks = this->deviceActivity->get(this->lastActiveDevice);
HXLINE( 734)		{
HXLINE( 734)			::Dynamic map = this->deviceActivity;
HXDLIN( 734)			::Dynamic _g_map = map;
HXDLIN( 734)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 734)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 734)				 ::flixel::input::actions::FlxInputDevice key = _g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 734)				int _g_value = ( (int)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN( 734)				 ::flixel::input::actions::FlxInputDevice _g_key = key;
HXDLIN( 734)				 ::flixel::input::actions::FlxInputDevice device2 = _g_key;
HXDLIN( 734)				int ticks = _g_value;
HXLINE( 736)				if (::hx::IsGreater( ticks,latestTicks )) {
HXLINE( 738)					latestTicks = ticks;
HXLINE( 739)					this->lastActiveDevice = device2;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControls_obj,update,(void))

bool FlxControls_obj::isDeviceActive( ::flixel::input::actions::FlxInputDevice device){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_746_isDeviceActive)
HXDLIN( 746)		switch((int)(device->_hx_getIndex())){
            			case (int)1: {
HXLINE( 757)				bool _hx_tmp;
HXDLIN( 757)				bool _hx_tmp1;
HXDLIN( 757)				bool _hx_tmp2;
HXDLIN( 757)				bool _hx_tmp3;
HXDLIN( 757)				bool _hx_tmp4;
HXDLIN( 757)				bool _hx_tmp5;
HXDLIN( 757)				bool _hx_tmp6;
HXDLIN( 757)				 ::flixel::input::mouse::FlxMouse _this = ::flixel::FlxG_obj::mouse;
HXDLIN( 757)				if (((_this->viewX - _this->_prevViewX) == 0)) {
HXLINE( 757)					 ::flixel::input::mouse::FlxMouse _this1 = ::flixel::FlxG_obj::mouse;
HXDLIN( 757)					_hx_tmp6 = ((_this1->viewY - _this1->_prevViewY) != 0);
            				}
            				else {
HXLINE( 757)					_hx_tmp6 = true;
            				}
HXDLIN( 757)				if (!(_hx_tmp6)) {
HXLINE( 759)					 ::flixel::input::mouse::FlxMouseButton _this2 = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 759)					if ((_this2->current != 1)) {
HXLINE( 757)						_hx_tmp5 = (_this2->current == 2);
            					}
            					else {
HXLINE( 757)						_hx_tmp5 = true;
            					}
            				}
            				else {
HXLINE( 757)					_hx_tmp5 = true;
            				}
HXDLIN( 757)				if (!(_hx_tmp5)) {
HXLINE( 757)					_hx_tmp4 = (::flixel::FlxG_obj::mouse->_leftButton->current == -1);
            				}
            				else {
HXLINE( 757)					_hx_tmp4 = true;
            				}
HXDLIN( 757)				if (!(_hx_tmp4)) {
HXLINE( 761)					 ::flixel::input::mouse::FlxMouseButton _this3 = ::flixel::FlxG_obj::mouse->_middleButton;
HXDLIN( 761)					if ((_this3->current != 1)) {
HXLINE( 757)						_hx_tmp3 = (_this3->current == 2);
            					}
            					else {
HXLINE( 757)						_hx_tmp3 = true;
            					}
            				}
            				else {
HXLINE( 757)					_hx_tmp3 = true;
            				}
HXDLIN( 757)				if (!(_hx_tmp3)) {
HXLINE( 757)					_hx_tmp2 = (::flixel::FlxG_obj::mouse->_middleButton->current == -1);
            				}
            				else {
HXLINE( 757)					_hx_tmp2 = true;
            				}
HXDLIN( 757)				if (!(_hx_tmp2)) {
HXLINE( 762)					 ::flixel::input::mouse::FlxMouseButton _this4 = ::flixel::FlxG_obj::mouse->_rightButton;
HXDLIN( 762)					if ((_this4->current != 1)) {
HXLINE( 757)						_hx_tmp1 = (_this4->current == 2);
            					}
            					else {
HXLINE( 757)						_hx_tmp1 = true;
            					}
            				}
            				else {
HXLINE( 757)					_hx_tmp1 = true;
            				}
HXDLIN( 757)				if (!(_hx_tmp1)) {
HXLINE( 757)					_hx_tmp = (::flixel::FlxG_obj::mouse->_rightButton->current == -1);
            				}
            				else {
HXLINE( 757)					_hx_tmp = true;
            				}
HXDLIN( 757)				if (!(_hx_tmp)) {
HXLINE( 764)					return (::flixel::FlxG_obj::mouse->wheel != 0);
            				}
            				else {
HXLINE( 757)					return true;
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 751)				return ( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->pressed) )->get_ANY();
            			}
            			break;
            			case (int)4: {
HXLINE( 770)				 ::flixel::addons::input::FlxDeviceIDRaw _g = this->gamepadID;
HXDLIN( 770)				switch((int)(_g->_hx_getIndex())){
            					case (int)0: {
HXLINE( 776)						 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->getFirstActiveGamepad();
HXLINE( 777)						if (::hx::IsNotNull( gamepad )) {
HXLINE( 777)							if (!(gamepad->pressed->get_ANY())) {
HXLINE( 777)								return gamepad->justReleased->get_ANY();
            							}
            							else {
HXLINE( 777)								return true;
            							}
            						}
            						else {
HXLINE( 777)							return false;
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 779)						return ::flixel::FlxG_obj::gamepads->anyHasState(-2,1);
            					}
            					break;
            					case (int)2: {
HXLINE( 781)						return false;
            					}
            					break;
            					case (int)3: {
HXLINE( 772)						int id = _g->_hx_getInt(0);
HXLINE( 773)						 ::flixel::input::gamepad::FlxGamepad gamepad1 = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 774)						if (::hx::IsNotNull( gamepad1 )) {
HXLINE( 774)							if (!(gamepad1->pressed->get_ANY())) {
HXLINE( 774)								return gamepad1->justReleased->get_ANY();
            							}
            							else {
HXLINE( 774)								return true;
            							}
            						}
            						else {
HXLINE( 774)							return false;
            						}
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXLINE( 786)				 ::flixel::input::actions::FlxInputDevice found = device;
HXLINE( 787)				HX_STACK_DO_THROW((HX_("Unhandled device: ",19,06,e5,58) + ::Type_obj::enumConstructor(found)));
            			}
            		}
HXLINE( 746)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControls_obj,isDeviceActive,return )

 ::flixel::input::gamepad::FlxGamepad FlxControls_obj::getActiveGamepad(){
            	HX_STACKFRAME(&_hx_pos_4eae03e2a5c001b6_794_getActiveGamepad)
HXDLIN( 794)		 ::flixel::addons::input::FlxDeviceIDRaw _g = this->gamepadID;
HXDLIN( 794)		switch((int)(_g->_hx_getIndex())){
            			case (int)0: case (int)1: {
HXLINE( 799)				return ::flixel::FlxG_obj::gamepads->getFirstActiveGamepad();
            			}
            			break;
            			case (int)2: {
HXLINE( 801)				return null();
            			}
            			break;
            			case (int)3: {
HXLINE( 796)				int id = _g->_hx_getInt(0);
HXLINE( 797)				return ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
            			}
            			break;
            		}
HXLINE( 794)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControls_obj,getActiveGamepad,return )


FlxControls_obj::FlxControls_obj()
{
}

void FlxControls_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxControls);
	HX_MARK_MEMBER_NAME(gamepadID,"gamepadID");
	HX_MARK_MEMBER_NAME(virtualPad,"virtualPad");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(manager,"manager");
	HX_MARK_MEMBER_NAME(digitalSets,"digitalSets");
	HX_MARK_MEMBER_NAME(analogSets,"analogSets");
	HX_MARK_MEMBER_NAME(vPadProxies,"vPadProxies");
	HX_MARK_MEMBER_NAME(groups,"groups");
	HX_MARK_MEMBER_NAME(groupsLookup,"groupsLookup");
	HX_MARK_MEMBER_NAME(inputsByAction,"inputsByAction");
	HX_MARK_MEMBER_NAME(lastActiveDevice,"lastActiveDevice");
	HX_MARK_MEMBER_NAME(deviceActivity,"deviceActivity");
	HX_MARK_END_CLASS();
}

void FlxControls_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gamepadID,"gamepadID");
	HX_VISIT_MEMBER_NAME(virtualPad,"virtualPad");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(manager,"manager");
	HX_VISIT_MEMBER_NAME(digitalSets,"digitalSets");
	HX_VISIT_MEMBER_NAME(analogSets,"analogSets");
	HX_VISIT_MEMBER_NAME(vPadProxies,"vPadProxies");
	HX_VISIT_MEMBER_NAME(groups,"groups");
	HX_VISIT_MEMBER_NAME(groupsLookup,"groupsLookup");
	HX_VISIT_MEMBER_NAME(inputsByAction,"inputsByAction");
	HX_VISIT_MEMBER_NAME(lastActiveDevice,"lastActiveDevice");
	HX_VISIT_MEMBER_NAME(deviceActivity,"deviceActivity");
}

::hx::Val FlxControls_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"groups") ) { return ::hx::Val( groups ); }
		if (HX_FIELD_EQ(inName,"canAdd") ) { return ::hx::Val( canAdd_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"manager") ) { return ::hx::Val( manager ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return ::hx::Val( onFocus_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addGroup") ) { return ::hx::Val( addGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"groupsOf") ) { return ::hx::Val( groupsOf_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gamepadID") ) { return ::hx::Val( gamepadID ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"virtualPad") ) { return ::hx::Val( virtualPad ); }
		if (HX_FIELD_EQ(inName,"analogSets") ) { return ::hx::Val( analogSets ); }
		if (HX_FIELD_EQ(inName,"initGroups") ) { return ::hx::Val( initGroups_dyn() ); }
		if (HX_FIELD_EQ(inName,"addIfValid") ) { return ::hx::Val( addIfValid_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"digitalSets") ) { return ::hx::Val( digitalSets ); }
		if (HX_FIELD_EQ(inName,"vPadProxies") ) { return ::hx::Val( vPadProxies ); }
		if (HX_FIELD_EQ(inName,"getAnalog2D") ) { return ::hx::Val( getAnalog2D_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnalog1D") ) { return ::hx::Val( getAnalog1D_dyn() ); }
		if (HX_FIELD_EQ(inName,"addMappings") ) { return ::hx::Val( addMappings_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearGroups") ) { return ::hx::Val( clearGroups_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeGroup") ) { return ::hx::Val( removeGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"groupsOfRaw") ) { return ::hx::Val( groupsOfRaw_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInputsOf") ) { return ::hx::Val( getInputsOf_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return ::hx::Val( onFocusLost_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"groupsLookup") ) { return ::hx::Val( groupsLookup ); }
		if (HX_FIELD_EQ(inName,"setGamepadID") ) { return ::hx::Val( setGamepadID_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkDigital") ) { return ::hx::Val( checkDigital_dyn() ); }
		if (HX_FIELD_EQ(inName,"canAddHelper") ) { return ::hx::Val( canAddHelper_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnalogSet") ) { return ::hx::Val( getAnalogSet_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"clearMappings") ) { return ::hx::Val( clearMappings_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetMappings") ) { return ::hx::Val( resetMappings_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVirtualPad") ) { return ::hx::Val( setVirtualPad_dyn() ); }
		if (HX_FIELD_EQ(inName,"listInputsFor") ) { return ::hx::Val( listInputsFor_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inputsByAction") ) { return ::hx::Val( inputsByAction ); }
		if (HX_FIELD_EQ(inName,"deviceActivity") ) { return ::hx::Val( deviceActivity ); }
		if (HX_FIELD_EQ(inName,"isDeviceActive") ) { return ::hx::Val( isDeviceActive_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"lastActiveDevice") ) { return ::hx::Val( lastActiveDevice ); }
		if (HX_FIELD_EQ(inName,"groupInstancesOf") ) { return ::hx::Val( groupInstancesOf_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeVirtualPad") ) { return ::hx::Val( removeVirtualPad_dyn() ); }
		if (HX_FIELD_EQ(inName,"getExistingInput") ) { return ::hx::Val( getExistingInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"getActiveGamepad") ) { return ::hx::Val( getActiveGamepad_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getDefaultMappings") ) { return ::hx::Val( getDefaultMappings_dyn() ); }
		if (HX_FIELD_EQ(inName,"listInputLabelsFor") ) { return ::hx::Val( listInputLabelsFor_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"checkGroupConflicts") ) { return ::hx::Val( checkGroupConflicts_dyn() ); }
		if (HX_FIELD_EQ(inName,"getConflictingInput") ) { return ::hx::Val( getConflictingInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"listMappedInputsFor") ) { return ::hx::Val( listMappedInputsFor_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"throwAllGroupConflicts") ) { return ::hx::Val( throwAllGroupConflicts_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkAllGroupConflicts") ) { return ::hx::Val( checkAllGroupConflicts_dyn() ); }
		if (HX_FIELD_EQ(inName,"listConflictingActions") ) { return ::hx::Val( listConflictingActions_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxControls_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"groups") ) { groups=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"manager") ) { manager=inValue.Cast<  ::flixel::addons::input::_FlxControls::ActionManager >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gamepadID") ) { gamepadID=inValue.Cast<  ::flixel::addons::input::FlxDeviceIDRaw >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"virtualPad") ) { virtualPad=inValue.Cast<  ::flixel::ui::FlxVirtualPad >(); return inValue; }
		if (HX_FIELD_EQ(inName,"analogSets") ) { analogSets=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"digitalSets") ) { digitalSets=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vPadProxies") ) { vPadProxies=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"groupsLookup") ) { groupsLookup=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inputsByAction") ) { inputsByAction=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"deviceActivity") ) { deviceActivity=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"lastActiveDevice") ) { lastActiveDevice=inValue.Cast<  ::flixel::input::actions::FlxInputDevice >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxControls_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("gamepadID",bc,4a,38,5f));
	outFields->push(HX_("virtualPad",08,84,c7,60));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("manager",6d,92,c1,13));
	outFields->push(HX_("digitalSets",89,52,07,91));
	outFields->push(HX_("analogSets",e1,6c,2a,9e));
	outFields->push(HX_("vPadProxies",4f,85,78,8f));
	outFields->push(HX_("groups",54,24,28,1c));
	outFields->push(HX_("groupsLookup",ee,31,30,ea));
	outFields->push(HX_("inputsByAction",36,d3,e5,10));
	outFields->push(HX_("lastActiveDevice",72,aa,63,24));
	outFields->push(HX_("deviceActivity",85,4c,8b,0f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxControls_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::addons::input::FlxDeviceIDRaw */ ,(int)offsetof(FlxControls_obj,gamepadID),HX_("gamepadID",bc,4a,38,5f)},
	{::hx::fsObject /*  ::flixel::ui::FlxVirtualPad */ ,(int)offsetof(FlxControls_obj,virtualPad),HX_("virtualPad",08,84,c7,60)},
	{::hx::fsString,(int)offsetof(FlxControls_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /*  ::flixel::addons::input::_FlxControls::ActionManager */ ,(int)offsetof(FlxControls_obj,manager),HX_("manager",6d,92,c1,13)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(FlxControls_obj,digitalSets),HX_("digitalSets",89,52,07,91)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(FlxControls_obj,analogSets),HX_("analogSets",e1,6c,2a,9e)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxControls_obj,vPadProxies),HX_("vPadProxies",4f,85,78,8f)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxControls_obj,groups),HX_("groups",54,24,28,1c)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(FlxControls_obj,groupsLookup),HX_("groupsLookup",ee,31,30,ea)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(FlxControls_obj,inputsByAction),HX_("inputsByAction",36,d3,e5,10)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxInputDevice */ ,(int)offsetof(FlxControls_obj,lastActiveDevice),HX_("lastActiveDevice",72,aa,63,24)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(FlxControls_obj,deviceActivity),HX_("deviceActivity",85,4c,8b,0f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxControls_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxControls_obj_sMemberFields[] = {
	HX_("gamepadID",bc,4a,38,5f),
	HX_("virtualPad",08,84,c7,60),
	HX_("name",4b,72,ff,48),
	HX_("manager",6d,92,c1,13),
	HX_("digitalSets",89,52,07,91),
	HX_("analogSets",e1,6c,2a,9e),
	HX_("vPadProxies",4f,85,78,8f),
	HX_("groups",54,24,28,1c),
	HX_("groupsLookup",ee,31,30,ea),
	HX_("inputsByAction",36,d3,e5,10),
	HX_("lastActiveDevice",72,aa,63,24),
	HX_("deviceActivity",85,4c,8b,0f),
	HX_("initGroups",84,7f,6d,20),
	HX_("destroy",fa,2c,86,24),
	HX_("throwAllGroupConflicts",9d,e7,1a,4d),
	HX_("getAnalog2D",b8,b0,db,f1),
	HX_("getAnalog1D",d9,af,db,f1),
	HX_("setGamepadID",ba,0a,88,83),
	HX_("getDefaultMappings",90,8f,84,82),
	HX_("clearMappings",52,34,0e,da),
	HX_("resetMappings",94,1e,50,d7),
	HX_("addMappings",e6,68,0d,d8),
	HX_("clearGroups",c1,31,15,b0),
	HX_("addGroup",5e,d9,51,13),
	HX_("removeGroup",5b,90,28,98),
	HX_("groupsOf",8b,26,b9,91),
	HX_("groupsOfRaw",1d,d0,21,02),
	HX_("groupInstancesOf",f6,52,b1,97),
	HX_("checkAllGroupConflicts",bb,75,7f,77),
	HX_("checkGroupConflicts",8a,c5,52,17),
	HX_("setVirtualPad",4a,c2,3f,02),
	HX_("removeVirtualPad",6c,a1,70,1a),
	HX_("checkDigital",f0,7f,67,bb),
	HX_("canAdd",f1,1f,1a,b8),
	HX_("listConflictingActions",0b,74,3e,4d),
	HX_("canAddHelper",3f,1c,93,3f),
	HX_("add",21,f2,49,00),
	HX_("addIfValid",be,93,24,03),
	HX_("remove",44,9c,88,04),
	HX_("getAnalogSet",dc,17,78,ae),
	HX_("getExistingInput",09,2f,d6,66),
	HX_("getConflictingInput",d0,c8,2f,2a),
	HX_("listInputsFor",22,e1,be,34),
	HX_("getInputsOf",56,29,bc,ec),
	HX_("listMappedInputsFor",6f,9c,62,5c),
	HX_("listInputLabelsFor",de,c3,a3,d0),
	HX_("reset",cf,49,c8,e6),
	HX_("onFocus",39,fe,c6,9a),
	HX_("onFocusLost",bd,e4,85,41),
	HX_("update",09,86,05,87),
	HX_("isDeviceActive",06,06,d5,75),
	HX_("getActiveGamepad",05,d5,6f,ab),
	::String(null()) };

::hx::Class FlxControls_obj::__mClass;

void FlxControls_obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input.FlxControls",9b,0a,e8,dc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxControls_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxControls_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxControls_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxControls_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
