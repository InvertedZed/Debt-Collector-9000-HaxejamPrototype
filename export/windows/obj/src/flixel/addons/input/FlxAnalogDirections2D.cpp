// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxAnalogDirections2D
#include <flixel/addons/input/FlxAnalogDirections2D.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxAnalogSet
#include <flixel/addons/input/FlxAnalogSet.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxRepeatInput
#include <flixel/addons/input/FlxRepeatInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_54e985d78aa7cfb9_239_new,"flixel.addons.input.FlxAnalogDirections2D","new",0x385a174d,"flixel.addons.input.FlxAnalogDirections2D.new","flixel/addons/input/FlxAnalogSet.hx",239,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_54e985d78aa7cfb9_221_get_up,"flixel.addons.input.FlxAnalogDirections2D","get_up",0x948108d7,"flixel.addons.input.FlxAnalogDirections2D.get_up","flixel/addons/input/FlxAnalogSet.hx",221,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_54e985d78aa7cfb9_225_get_down,"flixel.addons.input.FlxAnalogDirections2D","get_down",0x723931de,"flixel.addons.input.FlxAnalogDirections2D.get_down","flixel/addons/input/FlxAnalogSet.hx",225,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_54e985d78aa7cfb9_229_get_left,"flixel.addons.input.FlxAnalogDirections2D","get_left",0x777b4183,"flixel.addons.input.FlxAnalogDirections2D.get_left","flixel/addons/input/FlxAnalogSet.hx",229,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_54e985d78aa7cfb9_233_get_right,"flixel.addons.input.FlxAnalogDirections2D","get_right",0x8b6b1ee0,"flixel.addons.input.FlxAnalogDirections2D.get_right","flixel/addons/input/FlxAnalogSet.hx",233,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_54e985d78aa7cfb9_245_destroy,"flixel.addons.input.FlxAnalogDirections2D","destroy",0x5a1eee67,"flixel.addons.input.FlxAnalogDirections2D.destroy","flixel/addons/input/FlxAnalogSet.hx",245,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_54e985d78aa7cfb9_252_toString,"flixel.addons.input.FlxAnalogDirections2D","toString",0xe87f4e9f,"flixel.addons.input.FlxAnalogDirections2D.toString","flixel/addons/input/FlxAnalogSet.hx",252,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_54e985d78aa7cfb9_260_check,"flixel.addons.input.FlxAnalogDirections2D","check",0x410e34f5,"flixel.addons.input.FlxAnalogDirections2D.check","flixel/addons/input/FlxAnalogSet.hx",260,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_54e985d78aa7cfb9_275_any,"flixel.addons.input.FlxAnalogDirections2D","any",0x385041d9,"flixel.addons.input.FlxAnalogDirections2D.any","flixel/addons/input/FlxAnalogSet.hx",275,0x73cae450)
namespace flixel{
namespace addons{
namespace input{

void FlxAnalogDirections2D_obj::__construct( ::flixel::addons::input::FlxAnalogSet set, ::Dynamic func){
            	HX_STACKFRAME(&_hx_pos_54e985d78aa7cfb9_239_new)
HXLINE( 240)		this->set = set;
HXLINE( 241)		this->func = func;
            	}

Dynamic FlxAnalogDirections2D_obj::__CreateEmpty() { return new FlxAnalogDirections2D_obj; }

void *FlxAnalogDirections2D_obj::_hx_vtable = 0;

Dynamic FlxAnalogDirections2D_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxAnalogDirections2D_obj > _hx_result = new FlxAnalogDirections2D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxAnalogDirections2D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5f4d5bad;
}

bool FlxAnalogDirections2D_obj::get_up(){
            	HX_STACKFRAME(&_hx_pos_54e985d78aa7cfb9_221_get_up)
HXDLIN( 221)		return ( (bool)(this->func(this->set->upInput)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnalogDirections2D_obj,get_up,return )

bool FlxAnalogDirections2D_obj::get_down(){
            	HX_STACKFRAME(&_hx_pos_54e985d78aa7cfb9_225_get_down)
HXDLIN( 225)		return ( (bool)(this->func(this->set->downInput)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnalogDirections2D_obj,get_down,return )

bool FlxAnalogDirections2D_obj::get_left(){
            	HX_STACKFRAME(&_hx_pos_54e985d78aa7cfb9_229_get_left)
HXDLIN( 229)		return ( (bool)(this->func(this->set->leftInput)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnalogDirections2D_obj,get_left,return )

bool FlxAnalogDirections2D_obj::get_right(){
            	HX_STACKFRAME(&_hx_pos_54e985d78aa7cfb9_233_get_right)
HXDLIN( 233)		return ( (bool)(this->func(this->set->rightInput)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnalogDirections2D_obj,get_right,return )

void FlxAnalogDirections2D_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_54e985d78aa7cfb9_245_destroy)
HXLINE( 246)		this->set = null();
HXLINE( 247)		this->func = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnalogDirections2D_obj,destroy,(void))

::String FlxAnalogDirections2D_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_54e985d78aa7cfb9_252_toString)
HXDLIN( 252)		::String _hx_tmp = ((HX_("( u: ",63,02,87,1d) + ::Std_obj::string(this->func(this->set->upInput))) + HX_(" | d: ",46,62,8e,46));
HXDLIN( 252)		::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(this->func(this->set->downInput))) + HX_(" | l: ",4e,74,94,46));
HXDLIN( 252)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(this->func(this->set->leftInput))) + HX_(" | r: ",d4,01,99,46));
HXDLIN( 252)		return ((_hx_tmp2 + ::Std_obj::string(this->func(this->set->rightInput))) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnalogDirections2D_obj,toString,return )

bool FlxAnalogDirections2D_obj::check(int dir){
            	HX_STACKFRAME(&_hx_pos_54e985d78aa7cfb9_260_check)
HXDLIN( 260)		switch((int)(dir)){
            			case (int)1: {
HXLINE( 264)				return ( (bool)(this->func(this->set->leftInput)) );
            			}
            			break;
            			case (int)16: {
HXLINE( 265)				return ( (bool)(this->func(this->set->rightInput)) );
            			}
            			break;
            			case (int)256: {
HXLINE( 262)				return ( (bool)(this->func(this->set->upInput)) );
            			}
            			break;
            			case (int)4096: {
HXLINE( 263)				return ( (bool)(this->func(this->set->downInput)) );
            			}
            			break;
            		}
HXLINE( 260)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnalogDirections2D_obj,check,return )

bool FlxAnalogDirections2D_obj::any(int dir){
            	HX_STACKFRAME(&_hx_pos_54e985d78aa7cfb9_275_any)
HXDLIN( 275)		bool _hx_tmp;
HXDLIN( 275)		bool _hx_tmp1;
HXDLIN( 275)		bool _hx_tmp2;
HXDLIN( 275)		int dir1 = 256;
HXDLIN( 275)		if (((dir & dir1) == dir1)) {
HXDLIN( 275)			_hx_tmp2 = ( (bool)(this->func(this->set->upInput)) );
            		}
            		else {
HXDLIN( 275)			_hx_tmp2 = false;
            		}
HXDLIN( 275)		if (!(_hx_tmp2)) {
HXLINE( 276)			int dir2 = 4096;
HXDLIN( 276)			if (((dir & dir2) == dir2)) {
HXDLIN( 275)				_hx_tmp1 = ( (bool)(this->func(this->set->downInput)) );
            			}
            			else {
HXDLIN( 275)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXDLIN( 275)			_hx_tmp1 = true;
            		}
HXDLIN( 275)		if (!(_hx_tmp1)) {
HXLINE( 277)			int dir3 = 1;
HXDLIN( 277)			if (((dir & dir3) == dir3)) {
HXDLIN( 275)				_hx_tmp = ( (bool)(this->func(this->set->leftInput)) );
            			}
            			else {
HXDLIN( 275)				_hx_tmp = false;
            			}
            		}
            		else {
HXDLIN( 275)			_hx_tmp = true;
            		}
HXDLIN( 275)		if (!(_hx_tmp)) {
HXLINE( 278)			int dir4 = 16;
HXDLIN( 278)			if (((dir & dir4) == dir4)) {
HXLINE( 278)				return ( (bool)(this->func(this->set->rightInput)) );
            			}
            			else {
HXLINE( 278)				return false;
            			}
            		}
            		else {
HXDLIN( 275)			return true;
            		}
HXDLIN( 275)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnalogDirections2D_obj,any,return )


::hx::ObjectPtr< FlxAnalogDirections2D_obj > FlxAnalogDirections2D_obj::__new( ::flixel::addons::input::FlxAnalogSet set, ::Dynamic func) {
	::hx::ObjectPtr< FlxAnalogDirections2D_obj > __this = new FlxAnalogDirections2D_obj();
	__this->__construct(set,func);
	return __this;
}

::hx::ObjectPtr< FlxAnalogDirections2D_obj > FlxAnalogDirections2D_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::input::FlxAnalogSet set, ::Dynamic func) {
	FlxAnalogDirections2D_obj *__this = (FlxAnalogDirections2D_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxAnalogDirections2D_obj), true, "flixel.addons.input.FlxAnalogDirections2D"));
	*(void **)__this = FlxAnalogDirections2D_obj::_hx_vtable;
	__this->__construct(set,func);
	return __this;
}

FlxAnalogDirections2D_obj::FlxAnalogDirections2D_obj()
{
}

void FlxAnalogDirections2D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxAnalogDirections2D);
	HX_MARK_MEMBER_NAME(set,"set");
	HX_MARK_MEMBER_NAME(func,"func");
	HX_MARK_END_CLASS();
}

void FlxAnalogDirections2D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(set,"set");
	HX_VISIT_MEMBER_NAME(func,"func");
}

::hx::Val FlxAnalogDirections2D_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_up() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set ); }
		if (HX_FIELD_EQ(inName,"any") ) { return ::hx::Val( any_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_down() ); }
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_left() ); }
		if (HX_FIELD_EQ(inName,"func") ) { return ::hx::Val( func ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_right() ); }
		if (HX_FIELD_EQ(inName,"check") ) { return ::hx::Val( check_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"get_up") ) { return ::hx::Val( get_up_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_down") ) { return ::hx::Val( get_down_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_left") ) { return ::hx::Val( get_left_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_right") ) { return ::hx::Val( get_right_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxAnalogDirections2D_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { set=inValue.Cast<  ::flixel::addons::input::FlxAnalogSet >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"func") ) { func=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxAnalogDirections2D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("up",5b,66,00,00));
	outFields->push(HX_("down",62,f8,6d,42));
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("right",dc,0b,64,e9));
	outFields->push(HX_("set",a2,9b,57,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxAnalogDirections2D_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::addons::input::FlxAnalogSet */ ,(int)offsetof(FlxAnalogDirections2D_obj,set),HX_("set",a2,9b,57,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxAnalogDirections2D_obj,func),HX_("func",44,eb,c4,43)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxAnalogDirections2D_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxAnalogDirections2D_obj_sMemberFields[] = {
	HX_("get_up",a4,fd,2f,a3),
	HX_("get_down",eb,b3,28,c2),
	HX_("get_left",90,c3,6a,c7),
	HX_("get_right",33,68,0d,2d),
	HX_("set",a2,9b,57,00),
	HX_("func",44,eb,c4,43),
	HX_("destroy",fa,2c,86,24),
	HX_("toString",ac,d0,6e,38),
	HX_("check",c8,98,b6,45),
	HX_("any",ec,fa,49,00),
	::String(null()) };

::hx::Class FlxAnalogDirections2D_obj::__mClass;

void FlxAnalogDirections2D_obj::__register()
{
	FlxAnalogDirections2D_obj _hx_dummy;
	FlxAnalogDirections2D_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input.FlxAnalogDirections2D",db,6c,b7,92);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxAnalogDirections2D_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxAnalogDirections2D_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxAnalogDirections2D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxAnalogDirections2D_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
