// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlInputTypeRaw
#include <flixel/addons/input/FlxControlInputTypeRaw.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlMappedInput
#include <flixel/addons/input/FlxControlMappedInput.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlMappedInputTools
#include <flixel/addons/input/FlxControlMappedInputTools.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxGamepadInputType
#include <flixel/addons/input/FlxGamepadInputType.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxKeyInputType
#include <flixel/addons/input/FlxKeyInputType.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxMappedInputType
#include <flixel/addons/input/FlxMappedInputType.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxMouseInputType
#include <flixel/addons/input/FlxMouseInputType.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxVirtualPadInputType
#include <flixel/addons/input/FlxVirtualPadInputType.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadMappedInput
#include <flixel/input/gamepad/FlxGamepadMappedInput.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_2fc7585576d133d0_43_toMappedInput,"flixel.addons.input.FlxControlMappedInputTools","toMappedInput",0xc5986fea,"flixel.addons.input.FlxControlMappedInputTools.toMappedInput","flixel/addons/input/FlxControlMappedInput.hx",43,0x6842d1e0)
HX_LOCAL_STACK_FRAME(_hx_pos_2fc7585576d133d0_51_toMappedInput,"flixel.addons.input.FlxControlMappedInputTools","toMappedInput",0xc5986fea,"flixel.addons.input.FlxControlMappedInputTools.toMappedInput","flixel/addons/input/FlxControlMappedInput.hx",51,0x6842d1e0)
HX_LOCAL_STACK_FRAME(_hx_pos_2fc7585576d133d0_40_toMappedInput,"flixel.addons.input.FlxControlMappedInputTools","toMappedInput",0xc5986fea,"flixel.addons.input.FlxControlMappedInputTools.toMappedInput","flixel/addons/input/FlxControlMappedInput.hx",40,0x6842d1e0)
static const ::String _hx_array_data_c69b6e3c_4[] = {
	HX_("up",5b,66,00,00),HX_("down",62,f8,6d,42),HX_("right",dc,0b,64,e9),HX_("left",07,08,b0,47),
};
namespace flixel{
namespace addons{
namespace input{

void FlxControlMappedInputTools_obj::__construct() { }

Dynamic FlxControlMappedInputTools_obj::__CreateEmpty() { return new FlxControlMappedInputTools_obj; }

void *FlxControlMappedInputTools_obj::_hx_vtable = 0;

Dynamic FlxControlMappedInputTools_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxControlMappedInputTools_obj > _hx_result = new FlxControlMappedInputTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxControlMappedInputTools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x24b8862a;
}

 ::flixel::addons::input::FlxControlMappedInput FlxControlMappedInputTools_obj::toMappedInput( ::flixel::addons::input::FlxControlInputTypeRaw input, ::flixel::input::gamepad::FlxGamepad activeGamepad){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::input::gamepad::FlxGamepad,activeGamepad) HXARGC(1)
            		 ::flixel::input::gamepad::FlxGamepadMappedInput _hx_run(int id){
            			HX_STACKFRAME(&_hx_pos_2fc7585576d133d0_43_toMappedInput)
HXLINE(  43)			if (::hx::IsNotNull( activeGamepad )) {
HXLINE(  44)				return activeGamepad->getMappedInput(id);
            			}
            			else {
HXLINE(  45)				return ::flixel::input::gamepad::FlxGamepadMappedInput_obj::UNKNOWN(id);
            			}
HXLINE(  43)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		::String _hx_run(int id){
            			HX_STACKFRAME(&_hx_pos_2fc7585576d133d0_51_toMappedInput)
HXLINE(  51)			return ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(id);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_2fc7585576d133d0_40_toMappedInput)
HXLINE(  41)		 ::Dynamic gPad =  ::Dynamic(new _hx_Closure_0(activeGamepad));
HXLINE(  48)		 ::Dynamic key =  ::Dynamic(new _hx_Closure_1());
HXLINE(  54)		switch((int)(input->_hx_getIndex())){
            			case (int)0: {
HXLINE(  77)				 ::flixel::addons::input::FlxKeyInputType _g = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >();
HXDLIN(  77)				switch((int)(_g->_hx_getIndex())){
            					case (int)0: {
HXLINE(  69)						int id = _g->_hx_getInt(0);
HXLINE(  70)						return ::flixel::addons::input::FlxControlMappedInput_obj::Keyboard(::flixel::addons::input::FlxMappedInputType_obj::Lone(key(id)));
            					}
            					break;
            					case (int)1: {
HXLINE(  73)						int _g1 = _g->_hx_getInt(0);
HXDLIN(  73)						int _g2 = _g->_hx_getInt(1);
HXDLIN(  73)						 ::Dynamic _g3 = _g->_hx_getObject(2);
HXDLIN(  73)						 ::Dynamic _g4 = _g->_hx_getObject(3);
HXLINE(  71)						if (::hx::IsNull( _g3 )) {
HXLINE(  71)							if (::hx::IsNull( _g4 )) {
HXLINE(  71)								int up = _g1;
HXDLIN(  71)								int down = _g2;
HXLINE(  72)								::String _hx_tmp = ( (::String)(key(up)) );
HXDLIN(  72)								return ::flixel::addons::input::FlxControlMappedInput_obj::Keyboard(::flixel::addons::input::FlxMappedInputType_obj::Multi(::Array_obj< ::String >::__new(2)->init(0,_hx_tmp)->init(1,key(down))));
            							}
            							else {
HXLINE(  73)								 ::Dynamic right = _g3;
HXDLIN(  73)								 ::Dynamic left = _g4;
HXDLIN(  73)								int up1 = _g1;
HXDLIN(  73)								int down1 = _g2;
HXLINE(  74)								::String _hx_tmp1 = ( (::String)(key(up1)) );
HXDLIN(  74)								::String _hx_tmp2 = ( (::String)(key(down1)) );
HXDLIN(  74)								::String _hx_tmp3 = ( (::String)(key(right)) );
HXDLIN(  74)								return ::flixel::addons::input::FlxControlMappedInput_obj::Keyboard(::flixel::addons::input::FlxMappedInputType_obj::Multi(::Array_obj< ::String >::__new(4)->init(0,_hx_tmp1)->init(1,_hx_tmp2)->init(2,_hx_tmp3)->init(3,key(left))));
            							}
            						}
            						else {
HXLINE(  73)							 ::Dynamic right1 = _g3;
HXDLIN(  73)							int down2 = _g2;
HXDLIN(  73)							int up2 = _g1;
HXDLIN(  73)							 ::Dynamic left1 = _g4;
HXLINE(  74)							::String _hx_tmp4 = ( (::String)(key(up2)) );
HXDLIN(  74)							::String _hx_tmp5 = ( (::String)(key(down2)) );
HXDLIN(  74)							::String _hx_tmp6 = ( (::String)(key(right1)) );
HXDLIN(  74)							return ::flixel::addons::input::FlxControlMappedInput_obj::Keyboard(::flixel::addons::input::FlxMappedInputType_obj::Multi(::Array_obj< ::String >::__new(4)->init(0,_hx_tmp4)->init(1,_hx_tmp5)->init(2,_hx_tmp6)->init(3,key(left1))));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE(  78)						::String _hx_tmp7 = ( (::String)(key(38)) );
HXDLIN(  78)						::String _hx_tmp8 = ( (::String)(key(40)) );
HXDLIN(  78)						::String _hx_tmp9 = ( (::String)(key(39)) );
HXDLIN(  78)						return ::flixel::addons::input::FlxControlMappedInput_obj::Keyboard(::flixel::addons::input::FlxMappedInputType_obj::Multi(::Array_obj< ::String >::__new(4)->init(0,_hx_tmp7)->init(1,_hx_tmp8)->init(2,_hx_tmp9)->init(3,key(37))));
            					}
            					break;
            					case (int)3: {
HXLINE(  76)						::String _hx_tmp10 = ( (::String)(key(87)) );
HXDLIN(  76)						::String _hx_tmp11 = ( (::String)(key(83)) );
HXDLIN(  76)						::String _hx_tmp12 = ( (::String)(key(65)) );
HXDLIN(  76)						return ::flixel::addons::input::FlxControlMappedInput_obj::Keyboard(::flixel::addons::input::FlxMappedInputType_obj::Multi(::Array_obj< ::String >::__new(4)->init(0,_hx_tmp10)->init(1,_hx_tmp11)->init(2,_hx_tmp12)->init(3,key(37))));
            					}
            					break;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE(  65)				 ::flixel::addons::input::FlxGamepadInputType _g5 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >();
HXDLIN(  65)				switch((int)(_g5->_hx_getIndex())){
            					case (int)0: {
HXLINE(  57)						int id1 = _g5->_hx_getInt(0);
HXLINE(  58)						return ::flixel::addons::input::FlxControlMappedInput_obj::Gamepad(::flixel::addons::input::FlxMappedInputType_obj::Lone(gPad(id1)));
            					}
            					break;
            					case (int)1: {
HXLINE(  61)						int _g6 = _g5->_hx_getInt(0);
HXDLIN(  61)						int _g7 = _g5->_hx_getInt(1);
HXDLIN(  61)						 ::Dynamic _g8 = _g5->_hx_getObject(2);
HXDLIN(  61)						 ::Dynamic _g9 = _g5->_hx_getObject(3);
HXLINE(  59)						if (::hx::IsNull( _g8 )) {
HXLINE(  59)							if (::hx::IsNull( _g9 )) {
HXLINE(  59)								int up3 = _g6;
HXDLIN(  59)								int down3 = _g7;
HXLINE(  60)								 ::flixel::input::gamepad::FlxGamepadMappedInput _hx_tmp13 = gPad(up3);
HXDLIN(  60)								return ::flixel::addons::input::FlxControlMappedInput_obj::Gamepad(::flixel::addons::input::FlxMappedInputType_obj::Multi(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp13)->init(1,gPad(down3))));
            							}
            							else {
HXLINE(  61)								 ::Dynamic right2 = _g8;
HXDLIN(  61)								 ::Dynamic left2 = _g9;
HXDLIN(  61)								int up4 = _g6;
HXDLIN(  61)								int down4 = _g7;
HXLINE(  62)								 ::flixel::input::gamepad::FlxGamepadMappedInput _hx_tmp14 = gPad(up4);
HXDLIN(  62)								 ::flixel::input::gamepad::FlxGamepadMappedInput _hx_tmp15 = gPad(down4);
HXDLIN(  62)								 ::flixel::input::gamepad::FlxGamepadMappedInput _hx_tmp16 = gPad(right2);
HXDLIN(  62)								return ::flixel::addons::input::FlxControlMappedInput_obj::Gamepad(::flixel::addons::input::FlxMappedInputType_obj::Multi(::Array_obj< ::Dynamic>::__new(4)->init(0,_hx_tmp14)->init(1,_hx_tmp15)->init(2,_hx_tmp16)->init(3,gPad(left2))));
            							}
            						}
            						else {
HXLINE(  61)							 ::Dynamic right3 = _g8;
HXDLIN(  61)							int down5 = _g7;
HXDLIN(  61)							int up5 = _g6;
HXDLIN(  61)							 ::Dynamic left3 = _g9;
HXLINE(  62)							 ::flixel::input::gamepad::FlxGamepadMappedInput _hx_tmp17 = gPad(up5);
HXDLIN(  62)							 ::flixel::input::gamepad::FlxGamepadMappedInput _hx_tmp18 = gPad(down5);
HXDLIN(  62)							 ::flixel::input::gamepad::FlxGamepadMappedInput _hx_tmp19 = gPad(right3);
HXDLIN(  62)							return ::flixel::addons::input::FlxControlMappedInput_obj::Gamepad(::flixel::addons::input::FlxMappedInputType_obj::Multi(::Array_obj< ::Dynamic>::__new(4)->init(0,_hx_tmp17)->init(1,_hx_tmp18)->init(2,_hx_tmp19)->init(3,gPad(left3))));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE(  64)						 ::flixel::input::gamepad::FlxGamepadMappedInput _hx_tmp20 = gPad(11);
HXDLIN(  64)						 ::flixel::input::gamepad::FlxGamepadMappedInput _hx_tmp21 = gPad(12);
HXDLIN(  64)						 ::flixel::input::gamepad::FlxGamepadMappedInput _hx_tmp22 = gPad(14);
HXDLIN(  64)						return ::flixel::addons::input::FlxControlMappedInput_obj::Gamepad(::flixel::addons::input::FlxMappedInputType_obj::Multi(::Array_obj< ::Dynamic>::__new(4)->init(0,_hx_tmp20)->init(1,_hx_tmp21)->init(2,_hx_tmp22)->init(3,gPad(13))));
            					}
            					break;
            					case (int)3: {
HXLINE(  66)						 ::flixel::input::gamepad::FlxGamepadMappedInput _hx_tmp23 = gPad(3);
HXDLIN(  66)						 ::flixel::input::gamepad::FlxGamepadMappedInput _hx_tmp24 = gPad(0);
HXDLIN(  66)						 ::flixel::input::gamepad::FlxGamepadMappedInput _hx_tmp25 = gPad(1);
HXDLIN(  66)						return ::flixel::addons::input::FlxControlMappedInput_obj::Gamepad(::flixel::addons::input::FlxMappedInputType_obj::Multi(::Array_obj< ::Dynamic>::__new(4)->init(0,_hx_tmp23)->init(1,_hx_tmp24)->init(2,_hx_tmp25)->init(3,gPad(2))));
            					}
            					break;
            					default:{
HXLINE( 104)						HX_STACK_DO_THROW(((HX_("Internal Error - unexpected input:\"",51,c9,a0,0d) + ::Std_obj::string(input)) + HX_("\"",22,00,00,00)));
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 101)				 ::flixel::addons::input::FlxMouseInputType _g10 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 101)				switch((int)(_g10->_hx_getIndex())){
            					case (int)0: {
HXLINE(  97)						 ::Dynamic axis = _g10->_hx_getObject(0);
HXLINE(  98)						return ::flixel::addons::input::FlxControlMappedInput_obj::Mouse(::flixel::addons::input::FlxMouseInputType_obj::Position(axis));
            					}
            					break;
            					case (int)1: {
HXLINE(  99)						 ::Dynamic axis1 = _g10->_hx_getObject(0);
HXDLIN(  99)						 ::Dynamic scale = _g10->_hx_getObject(1);
HXDLIN(  99)						 ::Dynamic deadzone = _g10->_hx_getObject(2);
HXDLIN(  99)						 ::Dynamic invert = _g10->_hx_getObject(3);
HXLINE( 100)						return ::flixel::addons::input::FlxControlMappedInput_obj::Mouse(::flixel::addons::input::FlxMouseInputType_obj::Motion(axis1,scale,deadzone,invert));
            					}
            					break;
            					case (int)2: {
HXLINE( 101)						 ::Dynamic id2 = _g10->_hx_getObject(0);
HXDLIN( 101)						 ::Dynamic axis2 = _g10->_hx_getObject(1);
HXDLIN( 101)						 ::Dynamic scale1 = _g10->_hx_getObject(2);
HXDLIN( 101)						 ::Dynamic deadzone1 = _g10->_hx_getObject(3);
HXDLIN( 101)						 ::Dynamic invert1 = _g10->_hx_getObject(4);
HXLINE( 102)						return ::flixel::addons::input::FlxControlMappedInput_obj::Mouse(::flixel::addons::input::FlxMouseInputType_obj::Drag(id2,axis2,scale1,deadzone1,invert1));
            					}
            					break;
            					case (int)3: {
HXLINE(  95)						 ::Dynamic _g11 = _g10->_hx_getObject(0);
HXDLIN(  95)						if (::hx::IsNull( _g11 )) {
HXLINE( 104)							HX_STACK_DO_THROW(((HX_("Internal Error - unexpected input:\"",51,c9,a0,0d) + ::Std_obj::string(input)) + HX_("\"",22,00,00,00)));
            						}
            						else {
HXLINE(  95)							 ::Dynamic _hx_switch_0 = _g11;
            							if (  (_hx_switch_0==-3) ){
HXLINE(  94)								return ::flixel::addons::input::FlxControlMappedInput_obj::Mouse(::flixel::addons::input::FlxMouseInputType_obj::Button(-3));
HXDLIN(  94)								goto _hx_goto_0;
            							}
            							if (  (_hx_switch_0==-2) ){
HXLINE(  96)								return ::flixel::addons::input::FlxControlMappedInput_obj::Mouse(::flixel::addons::input::FlxMouseInputType_obj::Button(-2));
HXDLIN(  96)								goto _hx_goto_0;
            							}
            							if (  (_hx_switch_0==-1) ){
HXLINE(  92)								return ::flixel::addons::input::FlxControlMappedInput_obj::Mouse(::flixel::addons::input::FlxMouseInputType_obj::Button(-1));
HXDLIN(  92)								goto _hx_goto_0;
            							}
            							/* default */{
HXLINE( 104)								HX_STACK_DO_THROW(((HX_("Internal Error - unexpected input:\"",51,c9,a0,0d) + ::Std_obj::string(input)) + HX_("\"",22,00,00,00)));
            							}
            							_hx_goto_0:;
            						}
            					}
            					break;
            					default:{
HXLINE( 104)						HX_STACK_DO_THROW(((HX_("Internal Error - unexpected input:\"",51,c9,a0,0d) + ::Std_obj::string(input)) + HX_("\"",22,00,00,00)));
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXLINE(  87)				 ::flixel::addons::input::FlxVirtualPadInputType _g12 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxVirtualPadInputType >();
HXDLIN(  87)				switch((int)(_g12->_hx_getIndex())){
            					case (int)0: {
HXLINE(  81)						::String id3 = _g12->_hx_getString(0);
HXLINE(  82)						return ::flixel::addons::input::FlxControlMappedInput_obj::VirtualPad(::flixel::addons::input::FlxMappedInputType_obj::Lone(id3));
            					}
            					break;
            					case (int)1: {
HXLINE(  85)						::String _g13 = _g12->_hx_getString(0);
HXDLIN(  85)						::String _g14 = _g12->_hx_getString(1);
HXDLIN(  85)						::String _g15 = _g12->_hx_getString(2);
HXDLIN(  85)						::String _g16 = _g12->_hx_getString(3);
HXLINE(  83)						if (::hx::IsNull( _g15 )) {
HXLINE(  83)							if (::hx::IsNull( _g16 )) {
HXLINE(  83)								::String up6 = _g13;
HXDLIN(  83)								::String down6 = _g14;
HXLINE(  84)								return ::flixel::addons::input::FlxControlMappedInput_obj::VirtualPad(::flixel::addons::input::FlxMappedInputType_obj::Multi(::Array_obj< ::String >::__new(2)->init(0,up6)->init(1,down6)));
            							}
            							else {
HXLINE(  85)								::String right4 = _g15;
HXDLIN(  85)								::String left4 = _g16;
HXDLIN(  85)								::String up7 = _g13;
HXDLIN(  85)								::String down7 = _g14;
HXLINE(  86)								return ::flixel::addons::input::FlxControlMappedInput_obj::VirtualPad(::flixel::addons::input::FlxMappedInputType_obj::Multi(::Array_obj< ::String >::__new(4)->init(0,up7)->init(1,down7)->init(2,right4)->init(3,left4)));
            							}
            						}
            						else {
HXLINE(  85)							::String right5 = _g15;
HXDLIN(  85)							::String down8 = _g14;
HXDLIN(  85)							::String up8 = _g13;
HXDLIN(  85)							::String left5 = _g16;
HXLINE(  86)							return ::flixel::addons::input::FlxControlMappedInput_obj::VirtualPad(::flixel::addons::input::FlxMappedInputType_obj::Multi(::Array_obj< ::String >::__new(4)->init(0,up8)->init(1,down8)->init(2,right5)->init(3,left5)));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE(  88)						return ::flixel::addons::input::FlxControlMappedInput_obj::VirtualPad(::flixel::addons::input::FlxMappedInputType_obj::Multi(::Array_obj< ::String >::fromData( _hx_array_data_c69b6e3c_4,4)));
            					}
            					break;
            				}
            			}
            			break;
            		}
HXLINE(  54)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxControlMappedInputTools_obj,toMappedInput,return )


FlxControlMappedInputTools_obj::FlxControlMappedInputTools_obj()
{
}

bool FlxControlMappedInputTools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"toMappedInput") ) { outValue = toMappedInput_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxControlMappedInputTools_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlxControlMappedInputTools_obj_sStaticStorageInfo = 0;
#endif

::hx::Class FlxControlMappedInputTools_obj::__mClass;

static ::String FlxControlMappedInputTools_obj_sStaticFields[] = {
	HX_("toMappedInput",9c,15,fa,c0),
	::String(null())
};

void FlxControlMappedInputTools_obj::__register()
{
	FlxControlMappedInputTools_obj _hx_dummy;
	FlxControlMappedInputTools_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input.FlxControlMappedInputTools",3c,6e,9b,c6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxControlMappedInputTools_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxControlMappedInputTools_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxControlMappedInputTools_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxControlMappedInputTools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxControlMappedInputTools_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
