// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxAnalogDirections2D
#include <flixel/addons/input/FlxAnalogDirections2D.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxAnalogSet
#include <flixel/addons/input/FlxAnalogSet.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlAnalog
#include <flixel/addons/input/FlxControlAnalog.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlInputTypeRaw
#include <flixel/addons/input/FlxControlInputTypeRaw.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControls
#include <flixel/addons/input/FlxControls.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxDeviceIDRaw
#include <flixel/addons/input/FlxDeviceIDRaw.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxRepeatInput
#include <flixel/addons/input/FlxRepeatInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionAnalog
#include <flixel/input/actions/FlxActionAnalog.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_02980f0900834455_149_new,"flixel.addons.input.FlxAnalogSet","new",0x885c82ff,"flixel.addons.input.FlxAnalogSet.new","flixel/addons/input/FlxAnalogSet.hx",149,0x73cae450)
HX_DEFINE_STACK_FRAME(_hx_pos_02980f0900834455_150_new,"flixel.addons.input.FlxAnalogSet","new",0x885c82ff,"flixel.addons.input.FlxAnalogSet.new","flixel/addons/input/FlxAnalogSet.hx",150,0x73cae450)
HX_DEFINE_STACK_FRAME(_hx_pos_02980f0900834455_151_new,"flixel.addons.input.FlxAnalogSet","new",0x885c82ff,"flixel.addons.input.FlxAnalogSet.new","flixel/addons/input/FlxAnalogSet.hx",151,0x73cae450)
HX_DEFINE_STACK_FRAME(_hx_pos_02980f0900834455_152_new,"flixel.addons.input.FlxAnalogSet","new",0x885c82ff,"flixel.addons.input.FlxAnalogSet.new","flixel/addons/input/FlxAnalogSet.hx",152,0x73cae450)
HX_DEFINE_STACK_FRAME(_hx_pos_02980f0900834455_153_new,"flixel.addons.input.FlxAnalogSet","new",0x885c82ff,"flixel.addons.input.FlxAnalogSet.new","flixel/addons/input/FlxAnalogSet.hx",153,0x73cae450)
HX_DEFINE_STACK_FRAME(_hx_pos_02980f0900834455_125_new,"flixel.addons.input.FlxAnalogSet","new",0x885c82ff,"flixel.addons.input.FlxAnalogSet.new","flixel/addons/input/FlxAnalogSet.hx",125,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_02980f0900834455_157_destroy,"flixel.addons.input.FlxAnalogSet","destroy",0x30861b19,"flixel.addons.input.FlxAnalogSet.destroy","flixel/addons/input/FlxAnalogSet.hx",157,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_02980f0900834455_168_update,"flixel.addons.input.FlxAnalogSet","update",0xc51100ca,"flixel.addons.input.FlxAnalogSet.update","flixel/addons/input/FlxAnalogSet.hx",168,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_02980f0900834455_182_add,"flixel.addons.input.FlxAnalogSet","add",0x8852a4c0,"flixel.addons.input.FlxAnalogSet.add","flixel/addons/input/FlxAnalogSet.hx",182,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_02980f0900834455_190_remove,"flixel.addons.input.FlxAnalogSet","remove",0x42941705,"flixel.addons.input.FlxAnalogSet.remove","flixel/addons/input/FlxAnalogSet.hx",190,0x73cae450)
HX_LOCAL_STACK_FRAME(_hx_pos_02980f0900834455_195_setGamepadID,"flixel.addons.input.FlxAnalogSet","setGamepadID",0xf0198c3b,"flixel.addons.input.FlxAnalogSet.setGamepadID","flixel/addons/input/FlxAnalogSet.hx",195,0x73cae450)
namespace flixel{
namespace addons{
namespace input{

void FlxAnalogSet_obj::__construct( ::flixel::addons::input::FlxControls parent, ::Dynamic action){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		bool _hx_run( ::flixel::addons::input::FlxRepeatInput i){
            			HX_GC_STACKFRAME(&_hx_pos_02980f0900834455_149_new)
HXLINE( 149)			return i->hasState(1);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		bool _hx_run( ::flixel::addons::input::FlxRepeatInput i){
            			HX_GC_STACKFRAME(&_hx_pos_02980f0900834455_150_new)
HXLINE( 150)			return i->hasState(0);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            		bool _hx_run( ::flixel::addons::input::FlxRepeatInput i){
            			HX_GC_STACKFRAME(&_hx_pos_02980f0900834455_151_new)
HXLINE( 151)			return i->hasState(2);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            		bool _hx_run( ::flixel::addons::input::FlxRepeatInput i){
            			HX_GC_STACKFRAME(&_hx_pos_02980f0900834455_152_new)
HXLINE( 152)			return i->hasState(-1);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            		bool _hx_run( ::flixel::addons::input::FlxRepeatInput i){
            			HX_GC_STACKFRAME(&_hx_pos_02980f0900834455_153_new)
HXLINE( 153)			return i->triggerRepeat();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_02980f0900834455_125_new)
HXLINE( 136)		this->rightInput =  ::flixel::addons::input::FlxRepeatInput_obj::__alloc( HX_CTX ,16);
HXLINE( 135)		this->leftInput =  ::flixel::addons::input::FlxRepeatInput_obj::__alloc( HX_CTX ,1);
HXLINE( 134)		this->downInput =  ::flixel::addons::input::FlxRepeatInput_obj::__alloc( HX_CTX ,4096);
HXLINE( 133)		this->upInput =  ::flixel::addons::input::FlxRepeatInput_obj::__alloc( HX_CTX ,256);
HXLINE( 144)		this->parent = parent;
HXLINE( 145)		::String namePrefix = ((HX_("",00,00,00,00) + parent->name) + HX_(":",3a,00,00,00));
HXDLIN( 145)		::String namePrefix1 = (namePrefix + ::Type_obj::enumConstructor(action));
HXLINE( 146)		this->name = ((HX_("",00,00,00,00) + namePrefix1) + HX_("-analogSet",85,8d,38,6c));
HXLINE( 147)		this->control =  ::flixel::addons::input::FlxControlAnalog_obj::__alloc( HX_CTX ,((HX_("",00,00,00,00) + namePrefix1) + HX_("-control",d0,7a,5f,27)),1,null());
HXLINE( 149)		this->pressed =  ::flixel::addons::input::FlxAnalogDirections2D_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this), ::Dynamic(new _hx_Closure_0()));
HXLINE( 150)		this->released =  ::flixel::addons::input::FlxAnalogDirections2D_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this), ::Dynamic(new _hx_Closure_1()));
HXLINE( 151)		this->justPressed =  ::flixel::addons::input::FlxAnalogDirections2D_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this), ::Dynamic(new _hx_Closure_2()));
HXLINE( 152)		this->justReleased =  ::flixel::addons::input::FlxAnalogDirections2D_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this), ::Dynamic(new _hx_Closure_3()));
HXLINE( 153)		this->holdRepeat =  ::flixel::addons::input::FlxAnalogDirections2D_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this), ::Dynamic(new _hx_Closure_4()));
            	}

Dynamic FlxAnalogSet_obj::__CreateEmpty() { return new FlxAnalogSet_obj; }

void *FlxAnalogSet_obj::_hx_vtable = 0;

Dynamic FlxAnalogSet_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxAnalogSet_obj > _hx_result = new FlxAnalogSet_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxAnalogSet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x70ded017;
}

void FlxAnalogSet_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_02980f0900834455_157_destroy)
HXLINE( 158)		this->parent = null();
HXLINE( 160)		this->pressed->destroy();
HXLINE( 161)		this->justPressed->destroy();
HXLINE( 162)		this->released->destroy();
HXLINE( 163)		this->justReleased->destroy();
HXLINE( 164)		this->holdRepeat->destroy();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnalogSet_obj,destroy,(void))

void FlxAnalogSet_obj::update(){
            	HX_STACKFRAME(&_hx_pos_02980f0900834455_168_update)
HXLINE( 169)		this->control->update();
HXLINE( 171)		 ::flixel::addons::input::FlxRepeatInput _hx_tmp = this->upInput;
HXDLIN( 171)		_hx_tmp->updateWithState((this->control->get_y() > 0));
HXLINE( 172)		 ::flixel::addons::input::FlxRepeatInput _hx_tmp1 = this->downInput;
HXDLIN( 172)		_hx_tmp1->updateWithState((this->control->get_y() < 0));
HXLINE( 173)		 ::flixel::addons::input::FlxRepeatInput _hx_tmp2 = this->rightInput;
HXDLIN( 173)		_hx_tmp2->updateWithState((this->control->get_x() > 0));
HXLINE( 174)		 ::flixel::addons::input::FlxRepeatInput _hx_tmp3 = this->leftInput;
HXDLIN( 174)		_hx_tmp3->updateWithState((this->control->get_x() < 0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnalogSet_obj,update,(void))

void FlxAnalogSet_obj::add( ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_STACKFRAME(&_hx_pos_02980f0900834455_182_add)
HXDLIN( 182)		this->control->addInputType(this->parent,input);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnalogSet_obj,add,(void))

void FlxAnalogSet_obj::remove( ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_STACKFRAME(&_hx_pos_02980f0900834455_190_remove)
HXDLIN( 190)		this->control->removeInputType(input);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnalogSet_obj,remove,(void))

void FlxAnalogSet_obj::setGamepadID( ::flixel::addons::input::FlxDeviceIDRaw id){
            	HX_STACKFRAME(&_hx_pos_02980f0900834455_195_setGamepadID)
HXDLIN( 195)		this->control->setGamepadID(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnalogSet_obj,setGamepadID,(void))


::hx::ObjectPtr< FlxAnalogSet_obj > FlxAnalogSet_obj::__new( ::flixel::addons::input::FlxControls parent, ::Dynamic action) {
	::hx::ObjectPtr< FlxAnalogSet_obj > __this = new FlxAnalogSet_obj();
	__this->__construct(parent,action);
	return __this;
}

::hx::ObjectPtr< FlxAnalogSet_obj > FlxAnalogSet_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::input::FlxControls parent, ::Dynamic action) {
	FlxAnalogSet_obj *__this = (FlxAnalogSet_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxAnalogSet_obj), true, "flixel.addons.input.FlxAnalogSet"));
	*(void **)__this = FlxAnalogSet_obj::_hx_vtable;
	__this->__construct(parent,action);
	return __this;
}

FlxAnalogSet_obj::FlxAnalogSet_obj()
{
}

void FlxAnalogSet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxAnalogSet);
	HX_MARK_MEMBER_NAME(pressed,"pressed");
	HX_MARK_MEMBER_NAME(justPressed,"justPressed");
	HX_MARK_MEMBER_NAME(released,"released");
	HX_MARK_MEMBER_NAME(justReleased,"justReleased");
	HX_MARK_MEMBER_NAME(holdRepeat,"holdRepeat");
	HX_MARK_MEMBER_NAME(upInput,"upInput");
	HX_MARK_MEMBER_NAME(downInput,"downInput");
	HX_MARK_MEMBER_NAME(leftInput,"leftInput");
	HX_MARK_MEMBER_NAME(rightInput,"rightInput");
	HX_MARK_MEMBER_NAME(control,"control");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_END_CLASS();
}

void FlxAnalogSet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pressed,"pressed");
	HX_VISIT_MEMBER_NAME(justPressed,"justPressed");
	HX_VISIT_MEMBER_NAME(released,"released");
	HX_VISIT_MEMBER_NAME(justReleased,"justReleased");
	HX_VISIT_MEMBER_NAME(holdRepeat,"holdRepeat");
	HX_VISIT_MEMBER_NAME(upInput,"upInput");
	HX_VISIT_MEMBER_NAME(downInput,"downInput");
	HX_VISIT_MEMBER_NAME(leftInput,"leftInput");
	HX_VISIT_MEMBER_NAME(rightInput,"rightInput");
	HX_VISIT_MEMBER_NAME(control,"control");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(name,"name");
}

::hx::Val FlxAnalogSet_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return ::hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pressed") ) { return ::hx::Val( pressed ); }
		if (HX_FIELD_EQ(inName,"upInput") ) { return ::hx::Val( upInput ); }
		if (HX_FIELD_EQ(inName,"control") ) { return ::hx::Val( control ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"released") ) { return ::hx::Val( released ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downInput") ) { return ::hx::Val( downInput ); }
		if (HX_FIELD_EQ(inName,"leftInput") ) { return ::hx::Val( leftInput ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"holdRepeat") ) { return ::hx::Val( holdRepeat ); }
		if (HX_FIELD_EQ(inName,"rightInput") ) { return ::hx::Val( rightInput ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"justPressed") ) { return ::hx::Val( justPressed ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"justReleased") ) { return ::hx::Val( justReleased ); }
		if (HX_FIELD_EQ(inName,"setGamepadID") ) { return ::hx::Val( setGamepadID_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxAnalogSet_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::flixel::addons::input::FlxControls >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pressed") ) { pressed=inValue.Cast<  ::flixel::addons::input::FlxAnalogDirections2D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upInput") ) { upInput=inValue.Cast<  ::flixel::addons::input::FlxRepeatInput >(); return inValue; }
		if (HX_FIELD_EQ(inName,"control") ) { control=inValue.Cast<  ::flixel::addons::input::FlxControlAnalog >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"released") ) { released=inValue.Cast<  ::flixel::addons::input::FlxAnalogDirections2D >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downInput") ) { downInput=inValue.Cast<  ::flixel::addons::input::FlxRepeatInput >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftInput") ) { leftInput=inValue.Cast<  ::flixel::addons::input::FlxRepeatInput >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"holdRepeat") ) { holdRepeat=inValue.Cast<  ::flixel::addons::input::FlxAnalogDirections2D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightInput") ) { rightInput=inValue.Cast<  ::flixel::addons::input::FlxRepeatInput >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"justPressed") ) { justPressed=inValue.Cast<  ::flixel::addons::input::FlxAnalogDirections2D >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"justReleased") ) { justReleased=inValue.Cast<  ::flixel::addons::input::FlxAnalogDirections2D >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxAnalogSet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pressed",a2,d2,e6,39));
	outFields->push(HX_("justPressed",d6,0d,a7,f2));
	outFields->push(HX_("released",bd,88,e7,76));
	outFields->push(HX_("justReleased",09,1b,5b,66));
	outFields->push(HX_("holdRepeat",fa,cd,a8,2f));
	outFields->push(HX_("upInput",af,e3,92,1a));
	outFields->push(HX_("downInput",48,98,33,d4));
	outFields->push(HX_("leftInput",83,b2,fd,d2));
	outFields->push(HX_("rightInput",8e,aa,e2,c0));
	outFields->push(HX_("control",5d,6b,81,19));
	outFields->push(HX_("parent",2a,05,7e,ed));
	outFields->push(HX_("name",4b,72,ff,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxAnalogSet_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::addons::input::FlxAnalogDirections2D */ ,(int)offsetof(FlxAnalogSet_obj,pressed),HX_("pressed",a2,d2,e6,39)},
	{::hx::fsObject /*  ::flixel::addons::input::FlxAnalogDirections2D */ ,(int)offsetof(FlxAnalogSet_obj,justPressed),HX_("justPressed",d6,0d,a7,f2)},
	{::hx::fsObject /*  ::flixel::addons::input::FlxAnalogDirections2D */ ,(int)offsetof(FlxAnalogSet_obj,released),HX_("released",bd,88,e7,76)},
	{::hx::fsObject /*  ::flixel::addons::input::FlxAnalogDirections2D */ ,(int)offsetof(FlxAnalogSet_obj,justReleased),HX_("justReleased",09,1b,5b,66)},
	{::hx::fsObject /*  ::flixel::addons::input::FlxAnalogDirections2D */ ,(int)offsetof(FlxAnalogSet_obj,holdRepeat),HX_("holdRepeat",fa,cd,a8,2f)},
	{::hx::fsObject /*  ::flixel::addons::input::FlxRepeatInput */ ,(int)offsetof(FlxAnalogSet_obj,upInput),HX_("upInput",af,e3,92,1a)},
	{::hx::fsObject /*  ::flixel::addons::input::FlxRepeatInput */ ,(int)offsetof(FlxAnalogSet_obj,downInput),HX_("downInput",48,98,33,d4)},
	{::hx::fsObject /*  ::flixel::addons::input::FlxRepeatInput */ ,(int)offsetof(FlxAnalogSet_obj,leftInput),HX_("leftInput",83,b2,fd,d2)},
	{::hx::fsObject /*  ::flixel::addons::input::FlxRepeatInput */ ,(int)offsetof(FlxAnalogSet_obj,rightInput),HX_("rightInput",8e,aa,e2,c0)},
	{::hx::fsObject /*  ::flixel::addons::input::FlxControlAnalog */ ,(int)offsetof(FlxAnalogSet_obj,control),HX_("control",5d,6b,81,19)},
	{::hx::fsObject /*  ::flixel::addons::input::FlxControls */ ,(int)offsetof(FlxAnalogSet_obj,parent),HX_("parent",2a,05,7e,ed)},
	{::hx::fsString,(int)offsetof(FlxAnalogSet_obj,name),HX_("name",4b,72,ff,48)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxAnalogSet_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxAnalogSet_obj_sMemberFields[] = {
	HX_("pressed",a2,d2,e6,39),
	HX_("justPressed",d6,0d,a7,f2),
	HX_("released",bd,88,e7,76),
	HX_("justReleased",09,1b,5b,66),
	HX_("holdRepeat",fa,cd,a8,2f),
	HX_("upInput",af,e3,92,1a),
	HX_("downInput",48,98,33,d4),
	HX_("leftInput",83,b2,fd,d2),
	HX_("rightInput",8e,aa,e2,c0),
	HX_("control",5d,6b,81,19),
	HX_("parent",2a,05,7e,ed),
	HX_("name",4b,72,ff,48),
	HX_("destroy",fa,2c,86,24),
	HX_("update",09,86,05,87),
	HX_("add",21,f2,49,00),
	HX_("remove",44,9c,88,04),
	HX_("setGamepadID",ba,0a,88,83),
	::String(null()) };

::hx::Class FlxAnalogSet_obj::__mClass;

void FlxAnalogSet_obj::__register()
{
	FlxAnalogSet_obj _hx_dummy;
	FlxAnalogSet_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input.FlxAnalogSet",8d,97,09,80);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxAnalogSet_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxAnalogSet_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxAnalogSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxAnalogSet_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
