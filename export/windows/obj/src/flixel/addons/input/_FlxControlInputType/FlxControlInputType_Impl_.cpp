// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlInputTypeRaw
#include <flixel/addons/input/FlxControlInputTypeRaw.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlMappedInput
#include <flixel/addons/input/FlxControlMappedInput.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControlMappedInputTools
#include <flixel/addons/input/FlxControlMappedInputTools.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxGamepadInputType
#include <flixel/addons/input/FlxGamepadInputType.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxKeyInputType
#include <flixel/addons/input/FlxKeyInputType.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxMouseInputType
#include <flixel/addons/input/FlxMouseInputType.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxVirtualPadInputType
#include <flixel/addons/input/FlxVirtualPadInputType.h>
#endif
#ifndef INCLUDED_flixel_addons_input__FlxControlInputType_FlxControlInputType_Impl_
#include <flixel/addons/input/_FlxControlInputType/FlxControlInputType_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputDevice
#include <flixel/input/actions/FlxInputDevice.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad__FlxGamepadInputID_FlxGamepadInputID_Impl_
#include <flixel/input/gamepad/_FlxGamepadInputID/FlxGamepadInputID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxTypedGamepadMapping
#include <flixel/input/gamepad/mappings/FlxTypedGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_36_fromKey,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","fromKey",0x5d4d4779,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.fromKey","flixel/addons/input/FlxControlInputType.hx",36,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_41_fromKeyList,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","fromKeyList",0xd9054077,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.fromKeyList","flixel/addons/input/FlxControlInputType.hx",41,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_49_fromKeyType,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","fromKeyType",0xde5b16d3,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.fromKeyType","flixel/addons/input/FlxControlInputType.hx",49,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_55_fromGamepad,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","fromGamepad",0xc0fe937b,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.fromGamepad","flixel/addons/input/FlxControlInputType.hx",55,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_60_fromGamepadList,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","fromGamepadList",0x0419b579,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.fromGamepadList","flixel/addons/input/FlxControlInputType.hx",60,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_68_fromGamepadType,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","fromGamepadType",0x096f8bd5,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.fromGamepadType","flixel/addons/input/FlxControlInputType.hx",68,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_74_fromVirtualPad,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","fromVirtualPad",0x5c62956e,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.fromVirtualPad","flixel/addons/input/FlxControlInputType.hx",74,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_79_fromVirtualPadList,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","fromVirtualPadList",0x72712cec,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.fromVirtualPadList","flixel/addons/input/FlxControlInputType.hx",79,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_87_fromVirtualPadType,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","fromVirtualPadType",0x77c70348,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.fromVirtualPadType","flixel/addons/input/FlxControlInputType.hx",87,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_93_fromMouseButton,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","fromMouseButton",0xfb7cbdd1,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.fromMouseButton","flixel/addons/input/FlxControlInputType.hx",93,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_99_fromMouse,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","fromMouse",0x6e2f7e7f,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.fromMouse","flixel/addons/input/FlxControlInputType.hx",99,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_103_validateMulti,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","validateMulti",0x559aaa27,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.validateMulti","flixel/addons/input/FlxControlInputType.hx",103,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_122_isAnalog,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","isAnalog",0x590a0416,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.isAnalog","flixel/addons/input/FlxControlInputType.hx",122,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_161_isDigital,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","isDigital",0x7f20c332,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.isDigital","flixel/addons/input/FlxControlInputType.hx",161,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_200_simplify,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","simplify",0xbaefe965,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.simplify","flixel/addons/input/FlxControlInputType.hx",200,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_229_conflicts,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","conflicts",0x2915fc05,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.conflicts","flixel/addons/input/FlxControlInputType.hx",229,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_258_anyMatch,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","anyMatch",0x23543915,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.anyMatch","flixel/addons/input/FlxControlInputType.hx",258,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_274_compare,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","compare",0x88ba05c9,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.compare","flixel/addons/input/FlxControlInputType.hx",274,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_337_compareStrict,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","compareStrict",0xa7aa95f2,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.compareStrict","flixel/addons/input/FlxControlInputType.hx",337,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_359_getDevice,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","getDevice",0x9b0fe3f0,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.getDevice","flixel/addons/input/FlxControlInputType.hx",359,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_372_getLabel,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","getLabel",0x7104afda,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.getLabel","flixel/addons/input/FlxControlInputType.hx",372,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_379_getLabel,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","getLabel",0x7104afda,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.getLabel","flixel/addons/input/FlxControlInputType.hx",379,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_384_getLabel,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","getLabel",0x7104afda,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.getLabel","flixel/addons/input/FlxControlInputType.hx",384,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_369_getLabel,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","getLabel",0x7104afda,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.getLabel","flixel/addons/input/FlxControlInputType.hx",369,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_453_getMappedInput,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","getMappedInput",0x4a9b29bd,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.getMappedInput","flixel/addons/input/FlxControlInputType.hx",453,0x5bed6733)
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_115_boot,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","boot",0xcc12b88e,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.boot","flixel/addons/input/FlxControlInputType.hx",115,0x5bed6733)
static const int _hx_array_data_76618992_29[] = {
	(int)17,(int)18,
};
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_116_boot,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","boot",0xcc12b88e,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.boot","flixel/addons/input/FlxControlInputType.hx",116,0x5bed6733)
static const int _hx_array_data_76618992_31[] = {
	(int)19,(int)20,
};
HX_LOCAL_STACK_FRAME(_hx_pos_cf750096ea62de6c_117_boot,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_","boot",0xcc12b88e,"flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_.boot","flixel/addons/input/FlxControlInputType.hx",117,0x5bed6733)
static const int _hx_array_data_76618992_33[] = {
	(int)17,(int)18,(int)19,(int)20,
};
namespace flixel{
namespace addons{
namespace input{
namespace _FlxControlInputType{

void FlxControlInputType_Impl__obj::__construct() { }

Dynamic FlxControlInputType_Impl__obj::__CreateEmpty() { return new FlxControlInputType_Impl__obj; }

void *FlxControlInputType_Impl__obj::_hx_vtable = 0;

Dynamic FlxControlInputType_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxControlInputType_Impl__obj > _hx_result = new FlxControlInputType_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxControlInputType_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1f48e664;
}

 ::flixel::addons::input::FlxControlInputTypeRaw FlxControlInputType_Impl__obj::fromKey(int id){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_36_fromKey)
HXDLIN(  36)		return ::flixel::addons::input::FlxControlInputTypeRaw_obj::Keyboard(::flixel::addons::input::FlxKeyInputType_obj::Lone(id));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,fromKey,return )

 ::flixel::addons::input::FlxControlInputTypeRaw FlxControlInputType_Impl__obj::fromKeyList(::Array< int > ids){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_41_fromKeyList)
HXLINE(  42)		::Array< int > ids1 = ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::validateMulti(ids);
HXLINE(  43)		return ::flixel::addons::input::FlxControlInputTypeRaw_obj::Keyboard(::flixel::addons::input::FlxKeyInputType_obj::Multi(ids1->__get(0),ids1->__get(1),ids1->__get(2),ids1->__get(3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,fromKeyList,return )

 ::flixel::addons::input::FlxControlInputTypeRaw FlxControlInputType_Impl__obj::fromKeyType( ::flixel::addons::input::FlxKeyInputType type){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_49_fromKeyType)
HXDLIN(  49)		return ::flixel::addons::input::FlxControlInputTypeRaw_obj::Keyboard(type);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,fromKeyType,return )

 ::flixel::addons::input::FlxControlInputTypeRaw FlxControlInputType_Impl__obj::fromGamepad(int id){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_55_fromGamepad)
HXDLIN(  55)		return ::flixel::addons::input::FlxControlInputTypeRaw_obj::Gamepad(::flixel::addons::input::FlxGamepadInputType_obj::Lone(id));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,fromGamepad,return )

 ::flixel::addons::input::FlxControlInputTypeRaw FlxControlInputType_Impl__obj::fromGamepadList(::Array< int > ids){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_60_fromGamepadList)
HXLINE(  61)		::Array< int > ids1 = ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::validateMulti(ids);
HXLINE(  62)		return ::flixel::addons::input::FlxControlInputTypeRaw_obj::Gamepad(::flixel::addons::input::FlxGamepadInputType_obj::Multi(ids1->__get(0),ids1->__get(1),ids1->__get(2),ids1->__get(3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,fromGamepadList,return )

 ::flixel::addons::input::FlxControlInputTypeRaw FlxControlInputType_Impl__obj::fromGamepadType( ::flixel::addons::input::FlxGamepadInputType type){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_68_fromGamepadType)
HXDLIN(  68)		return ::flixel::addons::input::FlxControlInputTypeRaw_obj::Gamepad(type);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,fromGamepadType,return )

 ::flixel::addons::input::FlxControlInputTypeRaw FlxControlInputType_Impl__obj::fromVirtualPad(::String id){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_74_fromVirtualPad)
HXDLIN(  74)		return ::flixel::addons::input::FlxControlInputTypeRaw_obj::VirtualPad(::flixel::addons::input::FlxVirtualPadInputType_obj::Lone(id));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,fromVirtualPad,return )

 ::flixel::addons::input::FlxControlInputTypeRaw FlxControlInputType_Impl__obj::fromVirtualPadList(::Array< ::String > ids){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_79_fromVirtualPadList)
HXLINE(  80)		::Array< ::String > ids1 = ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::validateMulti(ids);
HXLINE(  81)		return ::flixel::addons::input::FlxControlInputTypeRaw_obj::VirtualPad(::flixel::addons::input::FlxVirtualPadInputType_obj::Multi(ids1->__get(0),ids1->__get(1),ids1->__get(2),ids1->__get(3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,fromVirtualPadList,return )

 ::flixel::addons::input::FlxControlInputTypeRaw FlxControlInputType_Impl__obj::fromVirtualPadType( ::flixel::addons::input::FlxVirtualPadInputType type){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_87_fromVirtualPadType)
HXDLIN(  87)		return ::flixel::addons::input::FlxControlInputTypeRaw_obj::VirtualPad(type);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,fromVirtualPadType,return )

 ::flixel::addons::input::FlxControlInputTypeRaw FlxControlInputType_Impl__obj::fromMouseButton(int id){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_93_fromMouseButton)
HXDLIN(  93)		return ::flixel::addons::input::FlxControlInputTypeRaw_obj::Mouse(::flixel::addons::input::FlxMouseInputType_obj::Button(id));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,fromMouseButton,return )

 ::flixel::addons::input::FlxControlInputTypeRaw FlxControlInputType_Impl__obj::fromMouse( ::flixel::addons::input::FlxMouseInputType type){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_99_fromMouse)
HXDLIN(  99)		return ::flixel::addons::input::FlxControlInputTypeRaw_obj::Mouse(type);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,fromMouse,return )

::cpp::VirtualArray FlxControlInputType_Impl__obj::validateMulti(::cpp::VirtualArray ids){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_103_validateMulti)
HXLINE( 104)		if ((ids->get_length() == 2)) {
HXLINE( 106)			ids->push(null());
HXLINE( 107)			ids->push(null());
            		}
            		else {
HXLINE( 109)			if ((ids->get_length() != 4)) {
HXLINE( 110)				HX_STACK_DO_THROW(((HX_("Invalid key list: ",8e,a9,53,12) + ::Std_obj::string(ids)) + HX_(", expected length of 4 or 2",44,f1,42,c3)));
            			}
            		}
HXLINE( 112)		return ids;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,validateMulti,return )

::Array< int > FlxControlInputType_Impl__obj::gamepadAnalogTriggers;

::Array< int > FlxControlInputType_Impl__obj::gamepadAnalogSticks;

::Array< int > FlxControlInputType_Impl__obj::gamepadAnalogInputs;

bool FlxControlInputType_Impl__obj::isAnalog( ::flixel::addons::input::FlxControlInputTypeRaw this1){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_122_isAnalog)
HXDLIN( 122)		switch((int)(this1->_hx_getIndex())){
            			case (int)0: {
HXLINE( 139)				 ::flixel::addons::input::FlxKeyInputType _g = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >();
HXDLIN( 139)				switch((int)(_g->_hx_getIndex())){
            					case (int)0: {
HXLINE( 135)						int _g1 = _g->_hx_getInt(0);
HXLINE( 136)						return false;
            					}
            					break;
            					case (int)1: {
HXLINE( 137)						int _g2 = _g->_hx_getInt(0);
HXDLIN( 137)						int _g3 = _g->_hx_getInt(1);
HXDLIN( 137)						 ::Dynamic _g4 = _g->_hx_getObject(2);
HXDLIN( 137)						 ::Dynamic _g5 = _g->_hx_getObject(3);
HXLINE( 140)						return true;
            					}
            					break;
            					case (int)2: case (int)3: {
HXLINE( 140)						return true;
            					}
            					break;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 132)				 ::flixel::addons::input::FlxGamepadInputType _g6 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >();
HXDLIN( 132)				switch((int)(_g6->_hx_getIndex())){
            					case (int)0: {
HXLINE( 124)						int id = _g6->_hx_getInt(0);
HXDLIN( 124)						if (::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::gamepadAnalogInputs->contains(id)) {
HXLINE( 125)							return true;
            						}
            						else {
HXLINE( 127)							return false;
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 128)						int _g7 = _g6->_hx_getInt(0);
HXDLIN( 128)						int _g8 = _g6->_hx_getInt(1);
HXDLIN( 128)						 ::Dynamic _g9 = _g6->_hx_getObject(2);
HXDLIN( 128)						 ::Dynamic _g10 = _g6->_hx_getObject(3);
HXLINE( 133)						return true;
            					}
            					break;
            					case (int)2: case (int)3: case (int)4: case (int)5: {
HXLINE( 133)						return true;
            					}
            					break;
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 153)				 ::flixel::addons::input::FlxMouseInputType _g11 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 153)				switch((int)(_g11->_hx_getIndex())){
            					case (int)0: {
HXLINE( 151)						 ::Dynamic _g12 = _g11->_hx_getObject(0);
HXLINE( 154)						return true;
            					}
            					break;
            					case (int)1: {
HXLINE( 150)						 ::Dynamic _g13 = _g11->_hx_getObject(0);
HXDLIN( 150)						 ::Dynamic _g14 = _g11->_hx_getObject(1);
HXDLIN( 150)						 ::Dynamic _g15 = _g11->_hx_getObject(2);
HXDLIN( 150)						 ::Dynamic _g16 = _g11->_hx_getObject(3);
HXLINE( 154)						return true;
            					}
            					break;
            					case (int)2: {
HXLINE( 152)						 ::Dynamic _g17 = _g11->_hx_getObject(0);
HXDLIN( 152)						 ::Dynamic _g18 = _g11->_hx_getObject(1);
HXDLIN( 152)						 ::Dynamic _g19 = _g11->_hx_getObject(2);
HXDLIN( 152)						 ::Dynamic _g20 = _g11->_hx_getObject(3);
HXDLIN( 152)						 ::Dynamic _g21 = _g11->_hx_getObject(4);
HXLINE( 154)						return true;
            					}
            					break;
            					case (int)3: {
HXLINE( 148)						 ::Dynamic id1 = _g11->_hx_getObject(0);
HXLINE( 149)						return false;
            					}
            					break;
            					case (int)4: {
HXLINE( 153)						 ::Dynamic _g22 = _g11->_hx_getObject(0);
HXLINE( 154)						return true;
            					}
            					break;
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 145)				 ::flixel::addons::input::FlxVirtualPadInputType _g23 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxVirtualPadInputType >();
HXDLIN( 145)				switch((int)(_g23->_hx_getIndex())){
            					case (int)0: {
HXLINE( 142)						::String _g24 = _g23->_hx_getString(0);
HXLINE( 143)						return false;
            					}
            					break;
            					case (int)1: {
HXLINE( 144)						::String _g25 = _g23->_hx_getString(0);
HXDLIN( 144)						::String _g26 = _g23->_hx_getString(1);
HXDLIN( 144)						::String _g27 = _g23->_hx_getString(2);
HXDLIN( 144)						::String _g28 = _g23->_hx_getString(3);
HXLINE( 146)						return true;
            					}
            					break;
            					case (int)2: {
HXLINE( 146)						return true;
            					}
            					break;
            				}
            			}
            			break;
            		}
HXLINE( 122)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,isAnalog,return )

bool FlxControlInputType_Impl__obj::isDigital( ::flixel::addons::input::FlxControlInputTypeRaw this1){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_161_isDigital)
HXDLIN( 161)		switch((int)(this1->_hx_getIndex())){
            			case (int)0: {
HXLINE( 179)				 ::flixel::addons::input::FlxKeyInputType _g = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >();
HXDLIN( 179)				switch((int)(_g->_hx_getIndex())){
            					case (int)0: {
HXLINE( 175)						int _g1 = _g->_hx_getInt(0);
HXLINE( 176)						return true;
            					}
            					break;
            					case (int)1: {
HXLINE( 177)						int _g2 = _g->_hx_getInt(0);
HXDLIN( 177)						int _g3 = _g->_hx_getInt(1);
HXDLIN( 177)						 ::Dynamic _g4 = _g->_hx_getObject(2);
HXDLIN( 177)						 ::Dynamic _g5 = _g->_hx_getObject(3);
HXLINE( 180)						return false;
            					}
            					break;
            					case (int)2: case (int)3: {
HXLINE( 180)						return false;
            					}
            					break;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 172)				 ::flixel::addons::input::FlxGamepadInputType _g6 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >();
HXDLIN( 172)				switch((int)(_g6->_hx_getIndex())){
            					case (int)0: {
HXLINE( 166)						int _g7 = _g6->_hx_getInt(0);
HXLINE( 164)						int id = _g7;
HXDLIN( 164)						if (::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::gamepadAnalogSticks->contains(id)) {
HXLINE( 165)							return false;
            						}
            						else {
HXLINE( 166)							int id1 = _g7;
HXLINE( 167)							return true;
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 168)						int _g8 = _g6->_hx_getInt(0);
HXDLIN( 168)						int _g9 = _g6->_hx_getInt(1);
HXDLIN( 168)						 ::Dynamic _g10 = _g6->_hx_getObject(2);
HXDLIN( 168)						 ::Dynamic _g11 = _g6->_hx_getObject(3);
HXLINE( 173)						return false;
            					}
            					break;
            					case (int)2: case (int)3: case (int)4: case (int)5: {
HXLINE( 173)						return false;
            					}
            					break;
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 193)				 ::flixel::addons::input::FlxMouseInputType _g12 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 193)				switch((int)(_g12->_hx_getIndex())){
            					case (int)0: {
HXLINE( 191)						 ::Dynamic _g13 = _g12->_hx_getObject(0);
HXLINE( 194)						return false;
            					}
            					break;
            					case (int)1: {
HXLINE( 190)						 ::Dynamic _g14 = _g12->_hx_getObject(0);
HXDLIN( 190)						 ::Dynamic _g15 = _g12->_hx_getObject(1);
HXDLIN( 190)						 ::Dynamic _g16 = _g12->_hx_getObject(2);
HXDLIN( 190)						 ::Dynamic _g17 = _g12->_hx_getObject(3);
HXLINE( 194)						return false;
            					}
            					break;
            					case (int)2: {
HXLINE( 192)						 ::Dynamic _g18 = _g12->_hx_getObject(0);
HXDLIN( 192)						 ::Dynamic _g19 = _g12->_hx_getObject(1);
HXDLIN( 192)						 ::Dynamic _g20 = _g12->_hx_getObject(2);
HXDLIN( 192)						 ::Dynamic _g21 = _g12->_hx_getObject(3);
HXDLIN( 192)						 ::Dynamic _g22 = _g12->_hx_getObject(4);
HXLINE( 194)						return false;
            					}
            					break;
            					case (int)3: {
HXLINE( 188)						 ::Dynamic id2 = _g12->_hx_getObject(0);
HXLINE( 189)						return true;
            					}
            					break;
            					case (int)4: {
HXLINE( 193)						 ::Dynamic _g23 = _g12->_hx_getObject(0);
HXLINE( 194)						return false;
            					}
            					break;
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 185)				 ::flixel::addons::input::FlxVirtualPadInputType _g24 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxVirtualPadInputType >();
HXDLIN( 185)				switch((int)(_g24->_hx_getIndex())){
            					case (int)0: {
HXLINE( 182)						::String _g25 = _g24->_hx_getString(0);
HXLINE( 183)						return true;
            					}
            					break;
            					case (int)1: {
HXLINE( 184)						::String _g26 = _g24->_hx_getString(0);
HXDLIN( 184)						::String _g27 = _g24->_hx_getString(1);
HXDLIN( 184)						::String _g28 = _g24->_hx_getString(2);
HXDLIN( 184)						::String _g29 = _g24->_hx_getString(3);
HXLINE( 186)						return false;
            					}
            					break;
            					case (int)2: {
HXLINE( 186)						return false;
            					}
            					break;
            				}
            			}
            			break;
            		}
HXLINE( 161)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,isDigital,return )

 ::flixel::addons::input::FlxControlInputTypeRaw FlxControlInputType_Impl__obj::simplify( ::flixel::addons::input::FlxControlInputTypeRaw this1){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_200_simplify)
HXDLIN( 200)		switch((int)(this1->_hx_getIndex())){
            			case (int)0: {
HXLINE( 219)				 ::flixel::addons::input::FlxKeyInputType _g = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >();
HXDLIN( 219)				switch((int)(_g->_hx_getIndex())){
            					case (int)0: {
HXLINE( 216)						int _g1 = _g->_hx_getInt(0);
HXLINE( 223)						return this1;
            					}
            					break;
            					case (int)1: {
HXLINE( 219)						int _g2 = _g->_hx_getInt(0);
HXDLIN( 219)						int _g3 = _g->_hx_getInt(1);
HXDLIN( 219)						 ::Dynamic _g4 = _g->_hx_getObject(2);
HXDLIN( 219)						 ::Dynamic _g5 = _g->_hx_getObject(3);
HXLINE( 223)						return this1;
            					}
            					break;
            					case (int)2: {
HXLINE( 205)						return ::flixel::addons::input::FlxControlInputTypeRaw_obj::Keyboard(::flixel::addons::input::FlxKeyInputType_obj::Multi(38,40,39,37));
            					}
            					break;
            					case (int)3: {
HXLINE( 203)						return ::flixel::addons::input::FlxControlInputTypeRaw_obj::Keyboard(::flixel::addons::input::FlxKeyInputType_obj::Multi(87,83,68,65));
            					}
            					break;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 220)				 ::flixel::addons::input::FlxGamepadInputType _g6 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >();
HXDLIN( 220)				switch((int)(_g6->_hx_getIndex())){
            					case (int)0: {
HXLINE( 217)						int _g7 = _g6->_hx_getInt(0);
HXLINE( 223)						return this1;
            					}
            					break;
            					case (int)1: {
HXLINE( 220)						int _g8 = _g6->_hx_getInt(0);
HXDLIN( 220)						int _g9 = _g6->_hx_getInt(1);
HXDLIN( 220)						 ::Dynamic _g10 = _g6->_hx_getObject(2);
HXDLIN( 220)						 ::Dynamic _g11 = _g6->_hx_getObject(3);
HXLINE( 223)						return this1;
            					}
            					break;
            					case (int)2: {
HXLINE( 207)						return ::flixel::addons::input::FlxControlInputTypeRaw_obj::Gamepad(::flixel::addons::input::FlxGamepadInputType_obj::Multi(11,12,14,13));
            					}
            					break;
            					case (int)3: {
HXLINE( 209)						return ::flixel::addons::input::FlxControlInputTypeRaw_obj::Gamepad(::flixel::addons::input::FlxGamepadInputType_obj::Multi(3,0,1,2));
            					}
            					break;
            					case (int)4: {
HXLINE( 211)						return ::flixel::addons::input::FlxControlInputTypeRaw_obj::Gamepad(::flixel::addons::input::FlxGamepadInputType_obj::Multi(34,36,35,37));
            					}
            					break;
            					case (int)5: {
HXLINE( 213)						return ::flixel::addons::input::FlxControlInputTypeRaw_obj::Gamepad(::flixel::addons::input::FlxGamepadInputType_obj::Multi(38,40,39,41));
            					}
            					break;
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 222)				 ::flixel::addons::input::FlxMouseInputType _g12 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXLINE( 223)				return this1;
            			}
            			break;
            			case (int)3: {
HXLINE( 221)				 ::flixel::addons::input::FlxVirtualPadInputType _g13 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxVirtualPadInputType >();
HXDLIN( 221)				switch((int)(_g13->_hx_getIndex())){
            					case (int)0: {
HXLINE( 218)						::String _g14 = _g13->_hx_getString(0);
HXLINE( 223)						return this1;
            					}
            					break;
            					case (int)1: {
HXLINE( 221)						::String _g15 = _g13->_hx_getString(0);
HXDLIN( 221)						::String _g16 = _g13->_hx_getString(1);
HXDLIN( 221)						::String _g17 = _g13->_hx_getString(2);
HXDLIN( 221)						::String _g18 = _g13->_hx_getString(3);
HXLINE( 223)						return this1;
            					}
            					break;
            					case (int)2: {
HXLINE( 215)						return ::flixel::addons::input::FlxControlInputTypeRaw_obj::VirtualPad(::flixel::addons::input::FlxVirtualPadInputType_obj::Multi(HX_("up",5b,66,00,00),HX_("down",62,f8,6d,42),HX_("right",dc,0b,64,e9),HX_("left",07,08,b0,47)));
            					}
            					break;
            				}
            			}
            			break;
            		}
HXLINE( 200)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,simplify,return )

bool FlxControlInputType_Impl__obj::conflicts( ::flixel::addons::input::FlxControlInputTypeRaw this1, ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_229_conflicts)
HXDLIN( 229)		 ::flixel::addons::input::FlxControlInputTypeRaw _g = ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::simplify(this1);
HXDLIN( 229)		 ::flixel::addons::input::FlxControlInputTypeRaw _g1 = ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::simplify(input);
HXDLIN( 229)		switch((int)(_g->_hx_getIndex())){
            			case (int)0: {
HXLINE( 242)				 ::flixel::addons::input::FlxKeyInputType _g2 = _g->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >();
HXDLIN( 242)				switch((int)(_g2->_hx_getIndex())){
            					case (int)0: {
HXDLIN( 229)						if ((_g1->_hx_getIndex() == 0)) {
HXLINE( 240)							 ::flixel::addons::input::FlxKeyInputType _g3 = _g1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >();
HXDLIN( 240)							if ((_g3->_hx_getIndex() == 1)) {
HXLINE( 240)								int up = _g3->_hx_getInt(0);
HXDLIN( 240)								int down = _g3->_hx_getInt(1);
HXDLIN( 240)								 ::Dynamic right = _g3->_hx_getObject(2);
HXDLIN( 240)								 ::Dynamic left = _g3->_hx_getObject(3);
HXDLIN( 240)								int id = _g2->_hx_getInt(0);
HXLINE( 241)								return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::anyMatch(this1,::Array_obj< ::Dynamic>::__new(5)->init(0,id)->init(1,up)->init(2,down)->init(3,right)->init(4,left));
            							}
            							else {
HXLINE( 253)								return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            							}
            						}
            						else {
HXLINE( 253)							return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 242)						int _g4 = _g2->_hx_getInt(0);
HXDLIN( 242)						int _g5 = _g2->_hx_getInt(1);
HXDLIN( 242)						 ::Dynamic _g6 = _g2->_hx_getObject(2);
HXDLIN( 242)						 ::Dynamic _g7 = _g2->_hx_getObject(3);
HXLINE( 229)						if ((_g1->_hx_getIndex() == 0)) {
HXLINE( 242)							 ::flixel::addons::input::FlxKeyInputType _g8 = _g1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >();
HXDLIN( 242)							switch((int)(_g8->_hx_getIndex())){
            								case (int)0: {
HXLINE( 242)									int id1 = _g8->_hx_getInt(0);
HXDLIN( 242)									 ::Dynamic left1 = _g7;
HXDLIN( 242)									 ::Dynamic right1 = _g6;
HXDLIN( 242)									int down1 = _g5;
HXDLIN( 242)									int up1 = _g4;
HXLINE( 243)									return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::anyMatch(this1,::Array_obj< ::Dynamic>::__new(5)->init(0,id1)->init(1,up1)->init(2,down1)->init(3,right1)->init(4,left1));
            								}
            								break;
            								case (int)1: {
HXLINE( 238)									int up2 = _g8->_hx_getInt(0);
HXDLIN( 238)									int down2 = _g8->_hx_getInt(1);
HXDLIN( 238)									 ::Dynamic right2 = _g8->_hx_getObject(2);
HXDLIN( 238)									 ::Dynamic left2 = _g8->_hx_getObject(3);
HXDLIN( 238)									 ::Dynamic left11 = _g7;
HXDLIN( 238)									 ::Dynamic right11 = _g6;
HXDLIN( 238)									int down11 = _g5;
HXDLIN( 238)									int up11 = _g4;
HXLINE( 239)									return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::anyMatch(this1,::Array_obj< ::Dynamic>::__new(8)->init(0,up11)->init(1,up2)->init(2,down11)->init(3,down2)->init(4,right11)->init(5,right2)->init(6,left11)->init(7,left2));
            								}
            								break;
            								default:{
HXLINE( 253)									return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            								}
            							}
            						}
            						else {
HXLINE( 253)							return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            						}
            					}
            					break;
            					default:{
HXLINE( 253)						return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 235)				 ::flixel::addons::input::FlxGamepadInputType _g9 = _g->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >();
HXDLIN( 235)				switch((int)(_g9->_hx_getIndex())){
            					case (int)0: {
HXDLIN( 229)						if ((_g1->_hx_getIndex() == 1)) {
HXLINE( 233)							 ::flixel::addons::input::FlxGamepadInputType _g10 = _g1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >();
HXDLIN( 233)							if ((_g10->_hx_getIndex() == 1)) {
HXLINE( 233)								int up3 = _g10->_hx_getInt(0);
HXDLIN( 233)								int down3 = _g10->_hx_getInt(1);
HXDLIN( 233)								 ::Dynamic right3 = _g10->_hx_getObject(2);
HXDLIN( 233)								 ::Dynamic left3 = _g10->_hx_getObject(3);
HXDLIN( 233)								int id2 = _g9->_hx_getInt(0);
HXLINE( 234)								return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::anyMatch(this1,::Array_obj< ::Dynamic>::__new(5)->init(0,id2)->init(1,up3)->init(2,down3)->init(3,right3)->init(4,left3));
            							}
            							else {
HXLINE( 253)								return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            							}
            						}
            						else {
HXLINE( 253)							return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 235)						int _g11 = _g9->_hx_getInt(0);
HXDLIN( 235)						int _g12 = _g9->_hx_getInt(1);
HXDLIN( 235)						 ::Dynamic _g13 = _g9->_hx_getObject(2);
HXDLIN( 235)						 ::Dynamic _g14 = _g9->_hx_getObject(3);
HXLINE( 229)						if ((_g1->_hx_getIndex() == 1)) {
HXLINE( 235)							 ::flixel::addons::input::FlxGamepadInputType _g15 = _g1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >();
HXDLIN( 235)							switch((int)(_g15->_hx_getIndex())){
            								case (int)0: {
HXLINE( 235)									int id3 = _g15->_hx_getInt(0);
HXDLIN( 235)									 ::Dynamic left4 = _g14;
HXDLIN( 235)									 ::Dynamic right4 = _g13;
HXDLIN( 235)									int down4 = _g12;
HXDLIN( 235)									int up4 = _g11;
HXLINE( 236)									return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::anyMatch(this1,::Array_obj< ::Dynamic>::__new(5)->init(0,id3)->init(1,up4)->init(2,down4)->init(3,right4)->init(4,left4));
            								}
            								break;
            								case (int)1: {
HXLINE( 231)									int up21 = _g15->_hx_getInt(0);
HXDLIN( 231)									int down21 = _g15->_hx_getInt(1);
HXDLIN( 231)									 ::Dynamic left21 = _g15->_hx_getObject(2);
HXDLIN( 231)									 ::Dynamic right21 = _g15->_hx_getObject(3);
HXDLIN( 231)									 ::Dynamic right12 = _g14;
HXDLIN( 231)									 ::Dynamic left12 = _g13;
HXDLIN( 231)									int down12 = _g12;
HXDLIN( 231)									int up12 = _g11;
HXLINE( 232)									return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::anyMatch(this1,::Array_obj< ::Dynamic>::__new(8)->init(0,up12)->init(1,up21)->init(2,down12)->init(3,down21)->init(4,right12)->init(5,right21)->init(6,left12)->init(7,left21));
            								}
            								break;
            								default:{
HXLINE( 253)									return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            								}
            							}
            						}
            						else {
HXLINE( 253)							return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            						}
            					}
            					break;
            					default:{
HXLINE( 253)						return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 249)				 ::flixel::addons::input::FlxVirtualPadInputType _g16 = _g->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxVirtualPadInputType >();
HXDLIN( 249)				switch((int)(_g16->_hx_getIndex())){
            					case (int)0: {
HXDLIN( 229)						if ((_g1->_hx_getIndex() == 3)) {
HXLINE( 247)							 ::flixel::addons::input::FlxVirtualPadInputType _g17 = _g1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxVirtualPadInputType >();
HXDLIN( 247)							if ((_g17->_hx_getIndex() == 1)) {
HXLINE( 247)								::String up5 = _g17->_hx_getString(0);
HXDLIN( 247)								::String down5 = _g17->_hx_getString(1);
HXDLIN( 247)								::String right5 = _g17->_hx_getString(2);
HXDLIN( 247)								::String left5 = _g17->_hx_getString(3);
HXDLIN( 247)								::String id4 = _g16->_hx_getString(0);
HXLINE( 248)								return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::anyMatch(this1,::Array_obj< ::String >::__new(5)->init(0,id4)->init(1,up5)->init(2,down5)->init(3,right5)->init(4,left5));
            							}
            							else {
HXLINE( 253)								return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            							}
            						}
            						else {
HXLINE( 253)							return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 249)						::String _g18 = _g16->_hx_getString(0);
HXDLIN( 249)						::String _g19 = _g16->_hx_getString(1);
HXDLIN( 249)						::String _g20 = _g16->_hx_getString(2);
HXDLIN( 249)						::String _g21 = _g16->_hx_getString(3);
HXLINE( 229)						if ((_g1->_hx_getIndex() == 3)) {
HXLINE( 249)							 ::flixel::addons::input::FlxVirtualPadInputType _g22 = _g1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxVirtualPadInputType >();
HXDLIN( 249)							switch((int)(_g22->_hx_getIndex())){
            								case (int)0: {
HXLINE( 249)									::String id5 = _g22->_hx_getString(0);
HXDLIN( 249)									::String left6 = _g21;
HXDLIN( 249)									::String right6 = _g20;
HXDLIN( 249)									::String down6 = _g19;
HXDLIN( 249)									::String up6 = _g18;
HXLINE( 250)									return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::anyMatch(this1,::Array_obj< ::String >::__new(5)->init(0,id5)->init(1,up6)->init(2,down6)->init(3,right6)->init(4,left6));
            								}
            								break;
            								case (int)1: {
HXLINE( 245)									::String up22 = _g22->_hx_getString(0);
HXDLIN( 245)									::String down22 = _g22->_hx_getString(1);
HXDLIN( 245)									::String right22 = _g22->_hx_getString(2);
HXDLIN( 245)									::String left22 = _g22->_hx_getString(3);
HXDLIN( 245)									::String left13 = _g21;
HXDLIN( 245)									::String right13 = _g20;
HXDLIN( 245)									::String down13 = _g19;
HXDLIN( 245)									::String up13 = _g18;
HXLINE( 246)									return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::anyMatch(this1,::Array_obj< ::String >::__new(8)->init(0,up13)->init(1,up22)->init(2,down13)->init(3,down22)->init(4,right13)->init(5,right22)->init(6,left13)->init(7,left22));
            								}
            								break;
            								default:{
HXLINE( 253)									return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            								}
            							}
            						}
            						else {
HXLINE( 253)							return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            						}
            					}
            					break;
            					default:{
HXLINE( 253)						return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            					}
            				}
            			}
            			break;
            			default:{
HXLINE( 253)				return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            			}
            		}
HXLINE( 229)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxControlInputType_Impl__obj,conflicts,return )

bool FlxControlInputType_Impl__obj::anyMatch( ::flixel::addons::input::FlxControlInputTypeRaw this1,::cpp::VirtualArray list){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_258_anyMatch)
HXLINE( 259)		int i = list->get_length();
HXLINE( 260)		while(true){
HXLINE( 260)			i = (i - 1);
HXDLIN( 260)			if (!(((i + 1) > 0))) {
HXLINE( 260)				goto _hx_goto_16;
            			}
HXLINE( 262)			int j = i;
HXLINE( 263)			while(true){
HXLINE( 263)				j = (j - 1);
HXDLIN( 263)				if (!(((j + 1) > 0))) {
HXLINE( 263)					goto _hx_goto_17;
            				}
HXLINE( 265)				bool _hx_tmp;
HXDLIN( 265)				if (::hx::IsEq( list->__get(i),list->__get(j) )) {
HXLINE( 265)					_hx_tmp = ::hx::IsNotNull( list->__get(i) );
            				}
            				else {
HXLINE( 265)					_hx_tmp = false;
            				}
HXDLIN( 265)				if (_hx_tmp) {
HXLINE( 266)					return true;
            				}
            			}
            			_hx_goto_17:;
            		}
            		_hx_goto_16:;
HXLINE( 269)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxControlInputType_Impl__obj,anyMatch,return )

bool FlxControlInputType_Impl__obj::compare( ::flixel::addons::input::FlxControlInputTypeRaw this1, ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_274_compare)
HXDLIN( 274)		switch((int)(this1->_hx_getIndex())){
            			case (int)0: {
HXLINE( 318)				 ::flixel::addons::input::FlxKeyInputType _g = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >();
HXDLIN( 318)				switch((int)(_g->_hx_getIndex())){
            					case (int)0: {
HXDLIN( 274)						if ((input->_hx_getIndex() == 0)) {
HXLINE( 308)							 ::flixel::addons::input::FlxKeyInputType _g1 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >();
HXDLIN( 308)							if ((_g1->_hx_getIndex() == 0)) {
HXLINE( 308)								int id2 = _g1->_hx_getInt(0);
HXDLIN( 308)								int id1 = _g->_hx_getInt(0);
HXLINE( 309)								return (id1 == id2);
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            					case (int)1: {
HXDLIN( 274)						if ((input->_hx_getIndex() == 0)) {
HXLINE( 311)							 ::flixel::addons::input::FlxKeyInputType _g2 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >();
HXDLIN( 311)							if ((_g2->_hx_getIndex() == 1)) {
HXLINE( 311)								int up2 = _g2->_hx_getInt(0);
HXDLIN( 311)								int down2 = _g2->_hx_getInt(1);
HXDLIN( 311)								 ::Dynamic right2 = _g2->_hx_getObject(2);
HXDLIN( 311)								 ::Dynamic left2 = _g2->_hx_getObject(3);
HXDLIN( 311)								 ::Dynamic left1 = _g->_hx_getObject(3);
HXDLIN( 311)								 ::Dynamic right1 = _g->_hx_getObject(2);
HXDLIN( 311)								int down1 = _g->_hx_getInt(1);
HXDLIN( 311)								int up1 = _g->_hx_getInt(0);
HXLINE( 312)								bool _hx_tmp;
HXDLIN( 312)								bool _hx_tmp1;
HXDLIN( 312)								if ((up1 == up2)) {
HXLINE( 312)									_hx_tmp1 = (down1 == down2);
            								}
            								else {
HXLINE( 312)									_hx_tmp1 = false;
            								}
HXDLIN( 312)								if (_hx_tmp1) {
HXLINE( 312)									_hx_tmp = ::hx::IsEq( right1,right2 );
            								}
            								else {
HXLINE( 312)									_hx_tmp = false;
            								}
HXDLIN( 312)								if (_hx_tmp) {
HXLINE( 315)									return ::hx::IsEq( left1,left2 );
            								}
            								else {
HXLINE( 312)									return false;
            								}
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            					case (int)2: {
HXDLIN( 274)						if ((input->_hx_getIndex() == 0)) {
HXLINE( 318)							if ((input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >()->_hx_getIndex() == 2)) {
HXLINE( 319)								return true;
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            					case (int)3: {
HXDLIN( 274)						if ((input->_hx_getIndex() == 0)) {
HXLINE( 317)							if ((input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >()->_hx_getIndex() == 3)) {
HXLINE( 319)								return true;
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 288)				 ::flixel::addons::input::FlxGamepadInputType _g3 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >();
HXDLIN( 288)				switch((int)(_g3->_hx_getIndex())){
            					case (int)0: {
HXDLIN( 274)						if ((input->_hx_getIndex() == 1)) {
HXLINE( 276)							 ::flixel::addons::input::FlxGamepadInputType _g4 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >();
HXDLIN( 276)							if ((_g4->_hx_getIndex() == 0)) {
HXLINE( 276)								int id21 = _g4->_hx_getInt(0);
HXDLIN( 276)								int id11 = _g3->_hx_getInt(0);
HXLINE( 277)								return (id11 == id21);
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            					case (int)1: {
HXDLIN( 274)						if ((input->_hx_getIndex() == 1)) {
HXLINE( 279)							 ::flixel::addons::input::FlxGamepadInputType _g5 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >();
HXDLIN( 279)							if ((_g5->_hx_getIndex() == 1)) {
HXLINE( 279)								int up21 = _g5->_hx_getInt(0);
HXDLIN( 279)								int down21 = _g5->_hx_getInt(1);
HXDLIN( 279)								 ::Dynamic left21 = _g5->_hx_getObject(2);
HXDLIN( 279)								 ::Dynamic right21 = _g5->_hx_getObject(3);
HXDLIN( 279)								 ::Dynamic right11 = _g3->_hx_getObject(3);
HXDLIN( 279)								 ::Dynamic left11 = _g3->_hx_getObject(2);
HXDLIN( 279)								int down11 = _g3->_hx_getInt(1);
HXDLIN( 279)								int up11 = _g3->_hx_getInt(0);
HXLINE( 280)								bool _hx_tmp2;
HXDLIN( 280)								bool _hx_tmp3;
HXDLIN( 280)								if ((up11 == up21)) {
HXLINE( 280)									_hx_tmp3 = (down11 == down21);
            								}
            								else {
HXLINE( 280)									_hx_tmp3 = false;
            								}
HXDLIN( 280)								if (_hx_tmp3) {
HXLINE( 280)									_hx_tmp2 = ::hx::IsEq( right11,right21 );
            								}
            								else {
HXLINE( 280)									_hx_tmp2 = false;
            								}
HXDLIN( 280)								if (_hx_tmp2) {
HXLINE( 283)									return ::hx::IsEq( left11,left21 );
            								}
            								else {
HXLINE( 280)									return false;
            								}
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            					case (int)2: {
HXDLIN( 274)						if ((input->_hx_getIndex() == 1)) {
HXLINE( 285)							if ((input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >()->_hx_getIndex() == 2)) {
HXLINE( 289)								return true;
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            					case (int)3: {
HXDLIN( 274)						if ((input->_hx_getIndex() == 1)) {
HXLINE( 286)							if ((input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >()->_hx_getIndex() == 3)) {
HXLINE( 289)								return true;
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            					case (int)4: {
HXDLIN( 274)						if ((input->_hx_getIndex() == 1)) {
HXLINE( 287)							if ((input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >()->_hx_getIndex() == 4)) {
HXLINE( 289)								return true;
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            					case (int)5: {
HXDLIN( 274)						if ((input->_hx_getIndex() == 1)) {
HXLINE( 288)							if ((input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >()->_hx_getIndex() == 5)) {
HXLINE( 289)								return true;
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 305)				 ::flixel::addons::input::FlxMouseInputType _g6 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 305)				switch((int)(_g6->_hx_getIndex())){
            					case (int)0: {
HXDLIN( 274)						if ((input->_hx_getIndex() == 2)) {
HXLINE( 301)							 ::flixel::addons::input::FlxMouseInputType _g7 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 301)							if ((_g7->_hx_getIndex() == 0)) {
HXLINE( 301)								 ::Dynamic axis2 = _g7->_hx_getObject(0);
HXDLIN( 301)								 ::Dynamic axis1 = _g6->_hx_getObject(0);
HXLINE( 302)								return ::hx::IsEq( axis1,axis2 );
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 294)						 ::Dynamic _g8 = _g6->_hx_getObject(1);
HXDLIN( 294)						 ::Dynamic _g9 = _g6->_hx_getObject(2);
HXDLIN( 294)						 ::Dynamic _g10 = _g6->_hx_getObject(3);
HXLINE( 274)						if ((input->_hx_getIndex() == 2)) {
HXLINE( 294)							 ::flixel::addons::input::FlxMouseInputType _g11 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 294)							if ((_g11->_hx_getIndex() == 1)) {
HXLINE( 294)								 ::Dynamic _g12 = _g11->_hx_getObject(1);
HXDLIN( 294)								 ::Dynamic _g13 = _g11->_hx_getObject(2);
HXDLIN( 294)								 ::Dynamic _g14 = _g11->_hx_getObject(3);
HXDLIN( 294)								 ::Dynamic axis21 = _g11->_hx_getObject(0);
HXDLIN( 294)								 ::Dynamic axis11 = _g6->_hx_getObject(0);
HXLINE( 295)								return ::hx::IsEq( axis11,axis21 );
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 297)						 ::Dynamic _g15 = _g6->_hx_getObject(2);
HXDLIN( 297)						 ::Dynamic _g16 = _g6->_hx_getObject(3);
HXDLIN( 297)						 ::Dynamic _g17 = _g6->_hx_getObject(4);
HXLINE( 274)						if ((input->_hx_getIndex() == 2)) {
HXLINE( 297)							 ::flixel::addons::input::FlxMouseInputType _g18 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 297)							if ((_g18->_hx_getIndex() == 2)) {
HXLINE( 297)								 ::Dynamic _g19 = _g18->_hx_getObject(2);
HXDLIN( 297)								 ::Dynamic _g20 = _g18->_hx_getObject(3);
HXDLIN( 297)								 ::Dynamic _g21 = _g18->_hx_getObject(4);
HXDLIN( 297)								 ::Dynamic id22 = _g18->_hx_getObject(0);
HXDLIN( 297)								 ::Dynamic axis22 = _g18->_hx_getObject(1);
HXDLIN( 297)								 ::Dynamic axis12 = _g6->_hx_getObject(1);
HXDLIN( 297)								 ::Dynamic id12 = _g6->_hx_getObject(0);
HXLINE( 298)								if (::hx::IsEq( axis12,axis22 )) {
HXLINE( 299)									return ::hx::IsEq( id12,id22 );
            								}
            								else {
HXLINE( 298)									return false;
            								}
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            					case (int)3: {
HXDLIN( 274)						if ((input->_hx_getIndex() == 2)) {
HXLINE( 291)							 ::flixel::addons::input::FlxMouseInputType _g22 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 291)							if ((_g22->_hx_getIndex() == 3)) {
HXLINE( 291)								 ::Dynamic id23 = _g22->_hx_getObject(0);
HXDLIN( 291)								 ::Dynamic id13 = _g6->_hx_getObject(0);
HXLINE( 292)								return ::hx::IsEq( id13,id23 );
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            					case (int)4: {
HXLINE( 305)						 ::Dynamic _g23 = _g6->_hx_getObject(0);
HXLINE( 274)						if ((input->_hx_getIndex() == 2)) {
HXLINE( 305)							 ::flixel::addons::input::FlxMouseInputType _g24 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 305)							if ((_g24->_hx_getIndex() == 4)) {
HXLINE( 305)								 ::Dynamic _g25 = _g24->_hx_getObject(0);
HXLINE( 306)								return true;
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 324)				 ::flixel::addons::input::FlxVirtualPadInputType _g26 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxVirtualPadInputType >();
HXDLIN( 324)				switch((int)(_g26->_hx_getIndex())){
            					case (int)0: {
HXDLIN( 274)						if ((input->_hx_getIndex() == 3)) {
HXLINE( 321)							 ::flixel::addons::input::FlxVirtualPadInputType _g27 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxVirtualPadInputType >();
HXDLIN( 321)							if ((_g27->_hx_getIndex() == 0)) {
HXLINE( 321)								::String id24 = _g27->_hx_getString(0);
HXDLIN( 321)								::String id14 = _g26->_hx_getString(0);
HXLINE( 322)								return (id14 == id24);
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            					case (int)1: {
HXDLIN( 274)						if ((input->_hx_getIndex() == 3)) {
HXLINE( 324)							 ::flixel::addons::input::FlxVirtualPadInputType _g28 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxVirtualPadInputType >();
HXDLIN( 324)							if ((_g28->_hx_getIndex() == 1)) {
HXLINE( 324)								::String up22 = _g28->_hx_getString(0);
HXDLIN( 324)								::String down22 = _g28->_hx_getString(1);
HXDLIN( 324)								::String right22 = _g28->_hx_getString(2);
HXDLIN( 324)								::String left22 = _g28->_hx_getString(3);
HXDLIN( 324)								::String left12 = _g26->_hx_getString(3);
HXDLIN( 324)								::String right12 = _g26->_hx_getString(2);
HXDLIN( 324)								::String down12 = _g26->_hx_getString(1);
HXDLIN( 324)								::String up12 = _g26->_hx_getString(0);
HXLINE( 325)								bool _hx_tmp4;
HXDLIN( 325)								bool _hx_tmp5;
HXDLIN( 325)								if ((up12 == up22)) {
HXLINE( 325)									_hx_tmp5 = (down12 == down22);
            								}
            								else {
HXLINE( 325)									_hx_tmp5 = false;
            								}
HXDLIN( 325)								if (_hx_tmp5) {
HXLINE( 325)									_hx_tmp4 = (right12 == right22);
            								}
            								else {
HXLINE( 325)									_hx_tmp4 = false;
            								}
HXDLIN( 325)								if (_hx_tmp4) {
HXLINE( 328)									return (left12 == left22);
            								}
            								else {
HXLINE( 325)									return false;
            								}
            							}
            							else {
HXLINE( 331)								return false;
            							}
            						}
            						else {
HXLINE( 331)							return false;
            						}
            					}
            					break;
            					default:{
HXLINE( 331)						return false;
            					}
            				}
            			}
            			break;
            		}
HXLINE( 274)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxControlInputType_Impl__obj,compare,return )

bool FlxControlInputType_Impl__obj::compareStrict( ::flixel::addons::input::FlxControlInputTypeRaw this1, ::flixel::addons::input::FlxControlInputTypeRaw input){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_337_compareStrict)
HXDLIN( 337)		if ((this1->_hx_getIndex() == 2)) {
HXLINE( 345)			 ::flixel::addons::input::FlxMouseInputType _g = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 345)			switch((int)(_g->_hx_getIndex())){
            				case (int)1: {
HXDLIN( 337)					if ((input->_hx_getIndex() == 2)) {
HXLINE( 339)						 ::flixel::addons::input::FlxMouseInputType _g1 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 339)						if ((_g1->_hx_getIndex() == 1)) {
HXLINE( 339)							 ::Dynamic axis2 = _g1->_hx_getObject(0);
HXDLIN( 339)							 ::Dynamic scale2 = _g1->_hx_getObject(1);
HXDLIN( 339)							 ::Dynamic deadzone2 = _g1->_hx_getObject(2);
HXDLIN( 339)							 ::Dynamic invert2 = _g1->_hx_getObject(3);
HXDLIN( 339)							 ::Dynamic invert1 = _g->_hx_getObject(3);
HXDLIN( 339)							 ::Dynamic deadzone1 = _g->_hx_getObject(2);
HXDLIN( 339)							 ::Dynamic scale1 = _g->_hx_getObject(1);
HXDLIN( 339)							 ::Dynamic axis1 = _g->_hx_getObject(0);
HXLINE( 340)							bool _hx_tmp;
HXDLIN( 340)							bool _hx_tmp1;
HXDLIN( 340)							if (::hx::IsEq( axis1,axis2 )) {
HXLINE( 340)								_hx_tmp1 = ::hx::IsEq( scale1,scale2 );
            							}
            							else {
HXLINE( 340)								_hx_tmp1 = false;
            							}
HXDLIN( 340)							if (_hx_tmp1) {
HXLINE( 340)								_hx_tmp = ::hx::IsEq( deadzone1,deadzone2 );
            							}
            							else {
HXLINE( 340)								_hx_tmp = false;
            							}
HXDLIN( 340)							if (_hx_tmp) {
HXLINE( 343)								return ::hx::IsEq( invert1,invert2 );
            							}
            							else {
HXLINE( 340)								return false;
            							}
            						}
            						else {
HXLINE( 353)							return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            						}
            					}
            					else {
HXLINE( 353)						return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            					}
            				}
            				break;
            				case (int)2: {
HXDLIN( 337)					if ((input->_hx_getIndex() == 2)) {
HXLINE( 345)						 ::flixel::addons::input::FlxMouseInputType _g2 = input->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 345)						if ((_g2->_hx_getIndex() == 2)) {
HXLINE( 345)							 ::Dynamic id2 = _g2->_hx_getObject(0);
HXDLIN( 345)							 ::Dynamic axis21 = _g2->_hx_getObject(1);
HXDLIN( 345)							 ::Dynamic scale21 = _g2->_hx_getObject(2);
HXDLIN( 345)							 ::Dynamic deadzone21 = _g2->_hx_getObject(3);
HXDLIN( 345)							 ::Dynamic invert21 = _g2->_hx_getObject(4);
HXDLIN( 345)							 ::Dynamic invert11 = _g->_hx_getObject(4);
HXDLIN( 345)							 ::Dynamic deadzone11 = _g->_hx_getObject(3);
HXDLIN( 345)							 ::Dynamic scale11 = _g->_hx_getObject(2);
HXDLIN( 345)							 ::Dynamic axis11 = _g->_hx_getObject(1);
HXDLIN( 345)							 ::Dynamic id1 = _g->_hx_getObject(0);
HXLINE( 346)							bool _hx_tmp2;
HXDLIN( 346)							bool _hx_tmp3;
HXDLIN( 346)							bool _hx_tmp4;
HXDLIN( 346)							if (::hx::IsEq( id1,id2 )) {
HXLINE( 346)								_hx_tmp4 = ::hx::IsEq( axis11,axis21 );
            							}
            							else {
HXLINE( 346)								_hx_tmp4 = false;
            							}
HXDLIN( 346)							if (_hx_tmp4) {
HXLINE( 346)								_hx_tmp3 = ::hx::IsEq( scale11,scale21 );
            							}
            							else {
HXLINE( 346)								_hx_tmp3 = false;
            							}
HXDLIN( 346)							if (_hx_tmp3) {
HXLINE( 346)								_hx_tmp2 = ::hx::IsEq( deadzone11,deadzone21 );
            							}
            							else {
HXLINE( 346)								_hx_tmp2 = false;
            							}
HXDLIN( 346)							if (_hx_tmp2) {
HXLINE( 350)								return ::hx::IsEq( invert11,invert21 );
            							}
            							else {
HXLINE( 346)								return false;
            							}
            						}
            						else {
HXLINE( 353)							return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            						}
            					}
            					else {
HXLINE( 353)						return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            					}
            				}
            				break;
            				default:{
HXLINE( 353)					return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            				}
            			}
            		}
            		else {
HXLINE( 353)			return ::flixel::addons::input::_FlxControlInputType::FlxControlInputType_Impl__obj::compare(this1,input);
            		}
HXLINE( 337)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxControlInputType_Impl__obj,compareStrict,return )

 ::flixel::input::actions::FlxInputDevice FlxControlInputType_Impl__obj::getDevice( ::flixel::addons::input::FlxControlInputTypeRaw this1){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_359_getDevice)
HXDLIN( 359)		switch((int)(this1->_hx_getIndex())){
            			case (int)0: {
HXLINE( 363)				 ::flixel::addons::input::FlxKeyInputType _g = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >();
HXDLIN( 363)				return ::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn();
            			}
            			break;
            			case (int)1: {
HXLINE( 361)				 ::flixel::addons::input::FlxGamepadInputType _g1 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >();
HXDLIN( 361)				return ::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 362)				 ::flixel::addons::input::FlxMouseInputType _g2 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 362)				return ::flixel::input::actions::FlxInputDevice_obj::MOUSE_dyn();
            			}
            			break;
            			case (int)3: {
HXLINE( 364)				 ::flixel::addons::input::FlxVirtualPadInputType _g3 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxVirtualPadInputType >();
HXDLIN( 364)				return ::flixel::input::actions::FlxInputDevice_obj::IFLXINPUT_OBJECT_dyn();
            			}
            			break;
            		}
HXLINE( 359)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControlInputType_Impl__obj,getDevice,return )

::String FlxControlInputType_Impl__obj::getLabel( ::flixel::addons::input::FlxControlInputTypeRaw this1, ::flixel::input::gamepad::FlxGamepad activeGamepad){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::input::gamepad::FlxGamepad,activeGamepad) HXARGC(1)
            		::String _hx_run(int id){
            			HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_372_getLabel)
HXLINE( 372)			if (::hx::IsNotNull( activeGamepad )) {
HXLINE( 373)				return activeGamepad->mapping->getInputLabel(id);
            			}
            			else {
HXLINE( 374)				return ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::toStringMap->get_string(id);
            			}
HXLINE( 372)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		::String _hx_run(int id){
            			HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_379_getLabel)
HXLINE( 379)			return ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(id);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            		::String _hx_run(::String id){
            			HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_384_getLabel)
HXLINE( 384)			return id;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_369_getLabel)
HXLINE( 370)		 ::Dynamic gPad =  ::Dynamic(new _hx_Closure_0(activeGamepad));
HXLINE( 377)		 ::Dynamic key =  ::Dynamic(new _hx_Closure_1());
HXLINE( 382)		 ::Dynamic vpad =  ::Dynamic(new _hx_Closure_2());
HXLINE( 387)		switch((int)(this1->_hx_getIndex())){
            			case (int)0: {
HXLINE( 414)				 ::flixel::addons::input::FlxKeyInputType _g = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxKeyInputType >();
HXDLIN( 414)				switch((int)(_g->_hx_getIndex())){
            					case (int)0: {
HXLINE( 406)						int id = _g->_hx_getInt(0);
HXLINE( 407)						return ( (::String)(key(id)) );
            					}
            					break;
            					case (int)1: {
HXLINE( 410)						int _g1 = _g->_hx_getInt(0);
HXDLIN( 410)						int _g2 = _g->_hx_getInt(1);
HXDLIN( 410)						 ::Dynamic _g3 = _g->_hx_getObject(2);
HXDLIN( 410)						 ::Dynamic _g4 = _g->_hx_getObject(3);
HXLINE( 408)						if (::hx::IsNull( _g3 )) {
HXLINE( 408)							if (::hx::IsNull( _g4 )) {
HXLINE( 408)								int up = _g1;
HXDLIN( 408)								int down = _g2;
HXLINE( 409)								::String _hx_tmp = (key(up) + HX_(",",2c,00,00,00));
HXDLIN( 409)								return (_hx_tmp + key(down));
            							}
            							else {
HXLINE( 410)								 ::Dynamic right = _g3;
HXDLIN( 410)								 ::Dynamic left = _g4;
HXDLIN( 410)								int up1 = _g1;
HXDLIN( 410)								int down1 = _g2;
HXLINE( 411)								::String _hx_tmp1 = (key(up1) + HX_(",",2c,00,00,00));
HXDLIN( 411)								::String _hx_tmp2 = ((_hx_tmp1 + key(down1)) + HX_(",",2c,00,00,00));
HXDLIN( 411)								::String _hx_tmp3 = ((_hx_tmp2 + key(right)) + HX_(",",2c,00,00,00));
HXDLIN( 411)								return (_hx_tmp3 + key(left));
            							}
            						}
            						else {
HXLINE( 410)							 ::Dynamic right1 = _g3;
HXDLIN( 410)							int down2 = _g2;
HXDLIN( 410)							int up2 = _g1;
HXDLIN( 410)							 ::Dynamic left1 = _g4;
HXLINE( 411)							::String _hx_tmp4 = (key(up2) + HX_(",",2c,00,00,00));
HXDLIN( 411)							::String _hx_tmp5 = ((_hx_tmp4 + key(down2)) + HX_(",",2c,00,00,00));
HXDLIN( 411)							::String _hx_tmp6 = ((_hx_tmp5 + key(right1)) + HX_(",",2c,00,00,00));
HXDLIN( 411)							return (_hx_tmp6 + key(left1));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 415)						return HX_("arrows",8a,16,fb,b7);
            					}
            					break;
            					case (int)3: {
HXLINE( 413)						return HX_("wasd",1b,63,f2,4e);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 402)				 ::flixel::addons::input::FlxGamepadInputType _g5 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxGamepadInputType >();
HXDLIN( 402)				switch((int)(_g5->_hx_getIndex())){
            					case (int)0: {
HXLINE( 390)						int id1 = _g5->_hx_getInt(0);
HXLINE( 391)						return ( (::String)(gPad(id1)) );
            					}
            					break;
            					case (int)1: {
HXLINE( 394)						int _g6 = _g5->_hx_getInt(0);
HXDLIN( 394)						int _g7 = _g5->_hx_getInt(1);
HXDLIN( 394)						 ::Dynamic _g8 = _g5->_hx_getObject(2);
HXDLIN( 394)						 ::Dynamic _g9 = _g5->_hx_getObject(3);
HXLINE( 392)						if (::hx::IsNull( _g8 )) {
HXLINE( 392)							if (::hx::IsNull( _g9 )) {
HXLINE( 392)								int up3 = _g6;
HXDLIN( 392)								int down3 = _g7;
HXLINE( 393)								::String _hx_tmp7 = (gPad(up3) + HX_(",",2c,00,00,00));
HXDLIN( 393)								return (_hx_tmp7 + gPad(down3));
            							}
            							else {
HXLINE( 394)								 ::Dynamic right2 = _g8;
HXDLIN( 394)								 ::Dynamic left2 = _g9;
HXDLIN( 394)								int up4 = _g6;
HXDLIN( 394)								int down4 = _g7;
HXLINE( 395)								::String _hx_tmp8 = (gPad(up4) + HX_(",",2c,00,00,00));
HXDLIN( 395)								::String _hx_tmp9 = ((_hx_tmp8 + gPad(down4)) + HX_(",",2c,00,00,00));
HXDLIN( 395)								::String _hx_tmp10 = ((_hx_tmp9 + gPad(right2)) + HX_(",",2c,00,00,00));
HXDLIN( 395)								return (_hx_tmp10 + gPad(left2));
            							}
            						}
            						else {
HXLINE( 394)							 ::Dynamic right3 = _g8;
HXDLIN( 394)							int down5 = _g7;
HXDLIN( 394)							int up5 = _g6;
HXDLIN( 394)							 ::Dynamic left3 = _g9;
HXLINE( 395)							::String _hx_tmp11 = (gPad(up5) + HX_(",",2c,00,00,00));
HXDLIN( 395)							::String _hx_tmp12 = ((_hx_tmp11 + gPad(down5)) + HX_(",",2c,00,00,00));
HXDLIN( 395)							::String _hx_tmp13 = ((_hx_tmp12 + gPad(right3)) + HX_(",",2c,00,00,00));
HXDLIN( 395)							return (_hx_tmp13 + gPad(left3));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 397)						return HX_("d-pad",aa,ed,25,b2);
            					}
            					break;
            					case (int)3: {
HXLINE( 399)						return HX_("abxy",22,78,68,40);
            					}
            					break;
            					case (int)4: {
HXLINE( 401)						return ( (::String)(gPad(19)) );
            					}
            					break;
            					case (int)5: {
HXLINE( 403)						return ( (::String)(gPad(20)) );
            					}
            					break;
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 438)				 ::flixel::addons::input::FlxMouseInputType _g10 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxMouseInputType >();
HXDLIN( 438)				switch((int)(_g10->_hx_getIndex())){
            					case (int)0: {
HXLINE( 434)						 ::Dynamic _g11 = _g10->_hx_getObject(0);
HXLINE( 435)						return HX_("mouse",25,16,65,0c);
            					}
            					break;
            					case (int)1: {
HXLINE( 434)						 ::Dynamic _g12 = _g10->_hx_getObject(0);
HXDLIN( 434)						 ::Dynamic _g13 = _g10->_hx_getObject(1);
HXDLIN( 434)						 ::Dynamic _g14 = _g10->_hx_getObject(2);
HXDLIN( 434)						 ::Dynamic _g15 = _g10->_hx_getObject(3);
HXLINE( 435)						return HX_("mouse",25,16,65,0c);
            					}
            					break;
            					case (int)2: {
HXLINE( 436)						 ::Dynamic _g16 = _g10->_hx_getObject(0);
HXDLIN( 436)						 ::Dynamic _g17 = _g10->_hx_getObject(1);
HXDLIN( 436)						 ::Dynamic _g18 = _g10->_hx_getObject(2);
HXDLIN( 436)						 ::Dynamic _g19 = _g10->_hx_getObject(3);
HXDLIN( 436)						 ::Dynamic _g20 = _g10->_hx_getObject(4);
HXLINE( 437)						return HX_("mouse-drag",5c,ca,17,b6);
            					}
            					break;
            					case (int)3: {
HXLINE( 432)						 ::Dynamic _g21 = _g10->_hx_getObject(0);
HXDLIN( 432)						if (::hx::IsNull( _g21 )) {
HXLINE( 441)							return HX_("",00,00,00,00);
            						}
            						else {
HXLINE( 432)							 ::Dynamic _hx_switch_0 = _g21;
            							if (  (_hx_switch_0==-3) ){
HXLINE( 431)								return HX_("right-click",d7,11,5e,7b);
HXDLIN( 431)								goto _hx_goto_22;
            							}
            							if (  (_hx_switch_0==-2) ){
HXLINE( 433)								return HX_("middle-click",10,3a,cd,2c);
HXDLIN( 433)								goto _hx_goto_22;
            							}
            							if (  (_hx_switch_0==-1) ){
HXLINE( 429)								return HX_("click",48,7c,5e,48);
HXDLIN( 429)								goto _hx_goto_22;
            							}
            							/* default */{
HXLINE( 441)								return HX_("",00,00,00,00);
            							}
            							_hx_goto_22:;
            						}
            					}
            					break;
            					case (int)4: {
HXLINE( 438)						 ::Dynamic _g22 = _g10->_hx_getObject(0);
HXLINE( 439)						return HX_("mouse-wheel",33,31,bd,88);
            					}
            					break;
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 424)				 ::flixel::addons::input::FlxVirtualPadInputType _g23 = this1->_hx_getObject(0).StaticCast<  ::flixel::addons::input::FlxVirtualPadInputType >();
HXDLIN( 424)				switch((int)(_g23->_hx_getIndex())){
            					case (int)0: {
HXLINE( 418)						::String id2 = _g23->_hx_getString(0);
HXLINE( 419)						return ( (::String)(vpad(id2)) );
            					}
            					break;
            					case (int)1: {
HXLINE( 422)						::String _g24 = _g23->_hx_getString(0);
HXDLIN( 422)						::String _g25 = _g23->_hx_getString(1);
HXDLIN( 422)						::String _g26 = _g23->_hx_getString(2);
HXDLIN( 422)						::String _g27 = _g23->_hx_getString(3);
HXLINE( 420)						if (::hx::IsNull( _g26 )) {
HXLINE( 420)							if (::hx::IsNull( _g27 )) {
HXLINE( 420)								::String up6 = _g24;
HXDLIN( 420)								::String down6 = _g25;
HXLINE( 421)								::String _hx_tmp14 = (vpad(up6) + HX_(",",2c,00,00,00));
HXDLIN( 421)								return (_hx_tmp14 + vpad(down6));
            							}
            							else {
HXLINE( 422)								::String right4 = _g26;
HXDLIN( 422)								::String left4 = _g27;
HXDLIN( 422)								::String up7 = _g24;
HXDLIN( 422)								::String down7 = _g25;
HXLINE( 423)								::String _hx_tmp15 = (vpad(up7) + HX_(",",2c,00,00,00));
HXDLIN( 423)								::String _hx_tmp16 = ((_hx_tmp15 + vpad(down7)) + HX_(",",2c,00,00,00));
HXDLIN( 423)								::String _hx_tmp17 = ((_hx_tmp16 + vpad(right4)) + HX_(",",2c,00,00,00));
HXDLIN( 423)								return (_hx_tmp17 + vpad(left4));
            							}
            						}
            						else {
HXLINE( 422)							::String right5 = _g26;
HXDLIN( 422)							::String down8 = _g25;
HXDLIN( 422)							::String up8 = _g24;
HXDLIN( 422)							::String left5 = _g27;
HXLINE( 423)							::String _hx_tmp18 = (vpad(up8) + HX_(",",2c,00,00,00));
HXDLIN( 423)							::String _hx_tmp19 = ((_hx_tmp18 + vpad(down8)) + HX_(",",2c,00,00,00));
HXDLIN( 423)							::String _hx_tmp20 = ((_hx_tmp19 + vpad(right5)) + HX_(",",2c,00,00,00));
HXDLIN( 423)							return (_hx_tmp20 + vpad(left5));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 425)						return HX_("arrows",8a,16,fb,b7);
            					}
            					break;
            				}
            			}
            			break;
            		}
HXLINE( 387)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxControlInputType_Impl__obj,getLabel,return )

 ::flixel::addons::input::FlxControlMappedInput FlxControlInputType_Impl__obj::getMappedInput( ::flixel::addons::input::FlxControlInputTypeRaw this1, ::flixel::input::gamepad::FlxGamepad activeGamepad){
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_453_getMappedInput)
HXDLIN( 453)		return ::flixel::addons::input::FlxControlMappedInputTools_obj::toMappedInput(this1,activeGamepad);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxControlInputType_Impl__obj,getMappedInput,return )


FlxControlInputType_Impl__obj::FlxControlInputType_Impl__obj()
{
}

bool FlxControlInputType_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"fromKey") ) { outValue = fromKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isAnalog") ) { outValue = isAnalog_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"simplify") ) { outValue = simplify_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"anyMatch") ) { outValue = anyMatch_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getLabel") ) { outValue = getLabel_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromMouse") ) { outValue = fromMouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isDigital") ) { outValue = isDigital_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"conflicts") ) { outValue = conflicts_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getDevice") ) { outValue = getDevice_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromKeyList") ) { outValue = fromKeyList_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromKeyType") ) { outValue = fromKeyType_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromGamepad") ) { outValue = fromGamepad_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"validateMulti") ) { outValue = validateMulti_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compareStrict") ) { outValue = compareStrict_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fromVirtualPad") ) { outValue = fromVirtualPad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getMappedInput") ) { outValue = getMappedInput_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"fromGamepadList") ) { outValue = fromGamepadList_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromGamepadType") ) { outValue = fromGamepadType_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromMouseButton") ) { outValue = fromMouseButton_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"fromVirtualPadList") ) { outValue = fromVirtualPadList_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromVirtualPadType") ) { outValue = fromVirtualPadType_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxControlInputType_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo FlxControlInputType_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< int > */ ,(void *) &FlxControlInputType_Impl__obj::gamepadAnalogTriggers,HX_("gamepadAnalogTriggers",0c,6b,0b,eb)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &FlxControlInputType_Impl__obj::gamepadAnalogSticks,HX_("gamepadAnalogSticks",b4,d5,f0,3b)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &FlxControlInputType_Impl__obj::gamepadAnalogInputs,HX_("gamepadAnalogInputs",ba,ed,a5,cc)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void FlxControlInputType_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxControlInputType_Impl__obj::gamepadAnalogTriggers,"gamepadAnalogTriggers");
	HX_MARK_MEMBER_NAME(FlxControlInputType_Impl__obj::gamepadAnalogSticks,"gamepadAnalogSticks");
	HX_MARK_MEMBER_NAME(FlxControlInputType_Impl__obj::gamepadAnalogInputs,"gamepadAnalogInputs");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxControlInputType_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxControlInputType_Impl__obj::gamepadAnalogTriggers,"gamepadAnalogTriggers");
	HX_VISIT_MEMBER_NAME(FlxControlInputType_Impl__obj::gamepadAnalogSticks,"gamepadAnalogSticks");
	HX_VISIT_MEMBER_NAME(FlxControlInputType_Impl__obj::gamepadAnalogInputs,"gamepadAnalogInputs");
};

#endif

::hx::Class FlxControlInputType_Impl__obj::__mClass;

static ::String FlxControlInputType_Impl__obj_sStaticFields[] = {
	HX_("fromKey",55,5a,fc,57),
	HX_("fromKeyList",53,f1,cc,39),
	HX_("fromKeyType",af,c7,22,3f),
	HX_("fromGamepad",57,44,c6,21),
	HX_("fromGamepadList",55,04,a1,06),
	HX_("fromGamepadType",b1,da,f6,0b),
	HX_("fromVirtualPad",12,d6,f3,58),
	HX_("fromVirtualPadList",90,8f,59,9e),
	HX_("fromVirtualPadType",ec,65,af,a3),
	HX_("fromMouseButton",ad,0c,04,fe),
	HX_("fromMouse",5b,00,ee,c0),
	HX_("validateMulti",03,4a,55,3c),
	HX_("gamepadAnalogTriggers",0c,6b,0b,eb),
	HX_("gamepadAnalogSticks",b4,d5,f0,3b),
	HX_("gamepadAnalogInputs",ba,ed,a5,cc),
	HX_("isAnalog",ba,71,8b,b7),
	HX_("isDigital",0e,45,df,d1),
	HX_("simplify",09,57,71,19),
	HX_("conflicts",e1,7d,d4,7b),
	HX_("anyMatch",b9,a6,d5,81),
	HX_("compare",a5,18,69,83),
	HX_("compareStrict",ce,35,65,8e),
	HX_("getDevice",cc,65,ce,ed),
	HX_("getLabel",7e,1d,86,cf),
	HX_("getMappedInput",61,6a,2c,47),
	::String(null())
};

void FlxControlInputType_Impl__obj::__register()
{
	FlxControlInputType_Impl__obj _hx_dummy;
	FlxControlInputType_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.input._FlxControlInputType.FlxControlInputType_Impl_",92,89,61,76);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxControlInputType_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxControlInputType_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxControlInputType_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxControlInputType_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxControlInputType_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxControlInputType_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxControlInputType_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxControlInputType_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_115_boot)
HXDLIN( 115)		gamepadAnalogTriggers = ::Array_obj< int >::fromData( _hx_array_data_76618992_29,2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_116_boot)
HXDLIN( 116)		gamepadAnalogSticks = ::Array_obj< int >::fromData( _hx_array_data_76618992_31,2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_cf750096ea62de6c_117_boot)
HXDLIN( 117)		gamepadAnalogInputs = ::Array_obj< int >::fromData( _hx_array_data_76618992_33,4);
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace input
} // end namespace _FlxControlInputType
