// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_backend_ObjectCache
#include <backend/ObjectCache.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_31bfd7f3ee3c37e3_17_new,"backend.ObjectCache","new",0xe8da24fb,"backend.ObjectCache.new","backend/AssetManager.hx",17,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_31bfd7f3ee3c37e3_22_dealloc,"backend.ObjectCache","dealloc",0x4d5db76f,"backend.ObjectCache.dealloc","backend/AssetManager.hx",22,0x42112526)
namespace backend{

void ObjectCache_obj::__construct( ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_31bfd7f3ee3c37e3_17_new)
HXDLIN(  17)		this->data = data;
            	}

Dynamic ObjectCache_obj::__CreateEmpty() { return new ObjectCache_obj; }

void *ObjectCache_obj::_hx_vtable = 0;

Dynamic ObjectCache_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ObjectCache_obj > _hx_result = new ObjectCache_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ObjectCache_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x00110743;
}

void ObjectCache_obj::dealloc(){
            	HX_STACKFRAME(&_hx_pos_31bfd7f3ee3c37e3_22_dealloc)
HXDLIN(  22)		return;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ObjectCache_obj,dealloc,(void))


ObjectCache_obj::ObjectCache_obj()
{
}

void ObjectCache_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ObjectCache);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_END_CLASS();
}

void ObjectCache_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
}

::hx::Val ObjectCache_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dealloc") ) { return ::hx::Val( dealloc_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ObjectCache_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ObjectCache_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ObjectCache_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ObjectCache_obj,data),HX_("data",2a,56,63,42)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ObjectCache_obj_sStaticStorageInfo = 0;
#endif

static ::String ObjectCache_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("dealloc",54,79,01,c2),
	::String(null()) };

::hx::Class ObjectCache_obj::__mClass;

void ObjectCache_obj::__register()
{
	ObjectCache_obj _hx_dummy;
	ObjectCache_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.ObjectCache",89,8b,17,de);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ObjectCache_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ObjectCache_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ObjectCache_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ObjectCache_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace backend
