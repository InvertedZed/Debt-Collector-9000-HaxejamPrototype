// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_backend_GameSprite
#include <backend/GameSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxSkewedSprite
#include <flixel/addons/effects/FlxSkewedSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1c8980bec5ec4728_9_new,"backend.GameSprite","new",0xd9eac143,"backend.GameSprite.new","backend/GameSprite.hx",9,0x9a53aaec)
HX_LOCAL_STACK_FRAME(_hx_pos_1c8980bec5ec4728_20_update,"backend.GameSprite","update",0x88700506,"backend.GameSprite.update","backend/GameSprite.hx",20,0x9a53aaec)
namespace backend{

void GameSprite_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y, ::Dynamic graphic){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_1c8980bec5ec4728_9_new)
HXLINE(  10)		super::__construct(x,y,graphic);
HXLINE(  12)		this->set_antialiasing(false);
HXLINE(  14)		{
HXLINE(  14)			 ::flixel::math::FlxBasePoint this1 = this->scale;
HXDLIN(  14)			this1->set_x(( (Float)(4) ));
HXDLIN(  14)			this1->set_y(( (Float)(4) ));
            		}
HXLINE(  16)		{
HXLINE(  16)			 ::flixel::math::FlxBasePoint this2 = this->origin;
HXDLIN(  16)			this2->set_x(( (Float)(0) ));
HXDLIN(  16)			this2->set_y(( (Float)(0) ));
            		}
            	}

Dynamic GameSprite_obj::__CreateEmpty() { return new GameSprite_obj; }

void *GameSprite_obj::_hx_vtable = 0;

Dynamic GameSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GameSprite_obj > _hx_result = new GameSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool GameSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x107498cd) {
			if (inClassId<=(int)0x015dfbcb) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x015dfbcb;
			} else {
				return inClassId==(int)0x107498cd;
			}
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void GameSprite_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_1c8980bec5ec4728_20_update)
HXLINE(  21)		this->super::update(elapsed);
HXLINE(  23)		{
HXLINE(  23)			 ::flixel::math::FlxBasePoint this1 = this->origin;
HXDLIN(  23)			this1->set_x(( (Float)(0) ));
HXDLIN(  23)			this1->set_y(( (Float)(0) ));
            		}
            	}



::hx::ObjectPtr< GameSprite_obj > GameSprite_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y, ::Dynamic graphic) {
	::hx::ObjectPtr< GameSprite_obj > __this = new GameSprite_obj();
	__this->__construct(__o_x,__o_y,graphic);
	return __this;
}

::hx::ObjectPtr< GameSprite_obj > GameSprite_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y, ::Dynamic graphic) {
	GameSprite_obj *__this = (GameSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GameSprite_obj), true, "backend.GameSprite"));
	*(void **)__this = GameSprite_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,graphic);
	return __this;
}

GameSprite_obj::GameSprite_obj()
{
}

::hx::Val GameSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *GameSprite_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *GameSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String GameSprite_obj_sMemberFields[] = {
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class GameSprite_obj::__mClass;

void GameSprite_obj::__register()
{
	GameSprite_obj _hx_dummy;
	GameSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.GameSprite",d1,63,02,90);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GameSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GameSprite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace backend
