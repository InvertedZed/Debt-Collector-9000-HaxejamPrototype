// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_backend_CacheSound
#include <backend/CacheSound.h>
#endif
#ifndef INCLUDED_backend_ObjectCache
#include <backend/ObjectCache.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d467dd3c66c72868_36_new,"backend.CacheSound","new",0xae1971d9,"backend.CacheSound.new","backend/AssetManager.hx",36,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_d467dd3c66c72868_40_dealloc,"backend.CacheSound","dealloc",0x6527cb4d,"backend.CacheSound.dealloc","backend/AssetManager.hx",40,0x42112526)
namespace backend{

void CacheSound_obj::__construct( ::openfl::media::Sound data){
            	HX_STACKFRAME(&_hx_pos_d467dd3c66c72868_36_new)
HXDLIN(  36)		super::__construct(data);
            	}

Dynamic CacheSound_obj::__CreateEmpty() { return new CacheSound_obj; }

void *CacheSound_obj::_hx_vtable = 0;

Dynamic CacheSound_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CacheSound_obj > _hx_result = new CacheSound_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CacheSound_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x00110743) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x00110743;
	} else {
		return inClassId==(int)0x6d6c367d;
	}
}

void CacheSound_obj::dealloc(){
            	HX_STACKFRAME(&_hx_pos_d467dd3c66c72868_40_dealloc)
HXDLIN(  40)		( ( ::openfl::media::Sound)(this->data) )->close();
            	}



::hx::ObjectPtr< CacheSound_obj > CacheSound_obj::__new( ::openfl::media::Sound data) {
	::hx::ObjectPtr< CacheSound_obj > __this = new CacheSound_obj();
	__this->__construct(data);
	return __this;
}

::hx::ObjectPtr< CacheSound_obj > CacheSound_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::media::Sound data) {
	CacheSound_obj *__this = (CacheSound_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CacheSound_obj), true, "backend.CacheSound"));
	*(void **)__this = CacheSound_obj::_hx_vtable;
	__this->__construct(data);
	return __this;
}

CacheSound_obj::CacheSound_obj()
{
}

::hx::Val CacheSound_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"dealloc") ) { return ::hx::Val( dealloc_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CacheSound_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CacheSound_obj_sStaticStorageInfo = 0;
#endif

static ::String CacheSound_obj_sMemberFields[] = {
	HX_("dealloc",54,79,01,c2),
	::String(null()) };

::hx::Class CacheSound_obj::__mClass;

void CacheSound_obj::__register()
{
	CacheSound_obj _hx_dummy;
	CacheSound_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.CacheSound",67,91,7b,4d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CacheSound_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CacheSound_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CacheSound_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CacheSound_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace backend
