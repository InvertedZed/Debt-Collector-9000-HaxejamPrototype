// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_backend_AssetManager
#include <backend/AssetManager.h>
#endif
#ifndef INCLUDED_backend_CacheImage
#include <backend/CacheImage.h>
#endif
#ifndef INCLUDED_backend_CacheSound
#include <backend/CacheSound.h>
#endif
#ifndef INCLUDED_backend_ObjectCache
#include <backend/ObjectCache.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_AssetFrontEnd
#include <flixel/system/frontEnds/AssetFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_57_getAssetPath,"backend.AssetManager","getAssetPath",0xead0ebf6,"backend.AssetManager.getAssetPath","backend/AssetManager.hx",57,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_61_getPath,"backend.AssetManager","getPath",0x11d61504,"backend.AssetManager.getPath","backend/AssetManager.hx",61,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_65_fileToString,"backend.AssetManager","fileToString",0xa4cb52ff,"backend.AssetManager.fileToString","backend/AssetManager.hx",65,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_68_getSoundInternal,"backend.AssetManager","getSoundInternal",0xf53503ed,"backend.AssetManager.getSoundInternal","backend/AssetManager.hx",68,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_87_getSound,"backend.AssetManager","getSound",0x4cf1d090,"backend.AssetManager.getSound","backend/AssetManager.hx",87,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_92_getMusic,"backend.AssetManager","getMusic",0xdc801466,"backend.AssetManager.getMusic","backend/AssetManager.hx",92,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_97_parseJson,"backend.AssetManager","parseJson",0x262e0fe4,"backend.AssetManager.parseJson","backend/AssetManager.hx",97,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_101_getImage,"backend.AssetManager","getImage",0x898e631c,"backend.AssetManager.getImage","backend/AssetManager.hx",101,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_119_registerFont,"backend.AssetManager","registerFont",0xec31b989,"backend.AssetManager.registerFont","backend/AssetManager.hx",119,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_127_getFont,"backend.AssetManager","getFont",0x0b448d2e,"backend.AssetManager.getFont","backend/AssetManager.hx",127,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_135_getAtlas,"backend.AssetManager","getAtlas",0xf302910c,"backend.AssetManager.getAtlas","backend/AssetManager.hx",135,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_140_getShader,"backend.AssetManager","getShader",0xf196c444,"backend.AssetManager.getShader","backend/AssetManager.hx",140,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_145_get_assetManager,"backend.AssetManager","get_assetManager",0xfe321e1d,"backend.AssetManager.get_assetManager","backend/AssetManager.hx",145,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_46_boot,"backend.AssetManager","boot",0xae1f90e9,"backend.AssetManager.boot","backend/AssetManager.hx",46,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_47_boot,"backend.AssetManager","boot",0xae1f90e9,"backend.AssetManager.boot","backend/AssetManager.hx",47,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_48_boot,"backend.AssetManager","boot",0xae1f90e9,"backend.AssetManager.boot","backend/AssetManager.hx",48,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_50_boot,"backend.AssetManager","boot",0xae1f90e9,"backend.AssetManager.boot","backend/AssetManager.hx",50,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_e47d5dfe30374d1a_52_boot,"backend.AssetManager","boot",0xae1f90e9,"backend.AssetManager.boot","backend/AssetManager.hx",52,0x42112526)
namespace backend{

void AssetManager_obj::__construct() { }

Dynamic AssetManager_obj::__CreateEmpty() { return new AssetManager_obj; }

void *AssetManager_obj::_hx_vtable = 0;

Dynamic AssetManager_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AssetManager_obj > _hx_result = new AssetManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AssetManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x51069991;
}

 ::haxe::ds::StringMap AssetManager_obj::graphicCache;

 ::haxe::ds::StringMap AssetManager_obj::soundCache;

 ::haxe::ds::StringMap AssetManager_obj::musicCache;

::Array< ::String > AssetManager_obj::registeredFonts;

::String AssetManager_obj::soundExtension;

 ::flixel::_hx_system::frontEnds::AssetFrontEnd AssetManager_obj::assetManager;

::String AssetManager_obj::getAssetPath(){
            	HX_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_57_getAssetPath)
HXDLIN(  57)		return HX_("assets",83,48,03,4c);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,getAssetPath,return )

::String AssetManager_obj::getPath(::String file,::String directory){
            	HX_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_61_getPath)
HXDLIN(  61)		return (((((HX_("",00,00,00,00) + ::backend::AssetManager_obj::getAssetPath()) + HX_("/",2f,00,00,00)) + directory) + HX_("/",2f,00,00,00)) + file);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,getPath,return )

::String AssetManager_obj::fileToString(::String path){
            	HX_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_65_fileToString)
HXDLIN(  65)		 ::flixel::_hx_system::debug::log::LogStyle logStyle = null();
HXDLIN(  65)		return ( (::String)(::backend::AssetManager_obj::get_assetManager()->getAsset(path,HX_("text",ad,cc,f9,4c),false,logStyle)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,fileToString,return )

 ::openfl::media::Sound AssetManager_obj::getSoundInternal(::String path,::String soundDirectory, ::haxe::ds::StringMap cache){
            	HX_GC_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_68_getSoundInternal)
HXLINE(  69)		::String finalPath = ::backend::AssetManager_obj::getPath((((HX_("",00,00,00,00) + path) + HX_(".",2e,00,00,00)) + ::backend::AssetManager_obj::soundExtension),soundDirectory);
HXLINE(  71)		 ::backend::CacheSound data = null();
HXLINE(  73)		if (cache->exists(path)) {
HXLINE(  74)			return ( ( ::openfl::media::Sound)(( ( ::backend::CacheSound)(cache->get(path)) )->data) );
            		}
HXLINE(  76)		if (( (bool)(::backend::AssetManager_obj::get_assetManager()->exists(finalPath,null())) )) {
HXLINE(  78)			 ::flixel::_hx_system::debug::log::LogStyle logStyle = null();
HXDLIN(  78)			data =  ::backend::CacheSound_obj::__alloc( HX_CTX ,( ( ::openfl::media::Sound)(::backend::AssetManager_obj::get_assetManager()->getAsset(finalPath,HX_("sound",cf,8c,cc,80),false,logStyle)) ));
HXLINE(  79)			cache->set(path,data);
            		}
HXLINE(  82)		return ( ( ::openfl::media::Sound)(data->data) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AssetManager_obj,getSoundInternal,return )

 ::openfl::media::Sound AssetManager_obj::getSound(::String path){
            	HX_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_87_getSound)
HXDLIN(  87)		return ::backend::AssetManager_obj::getSoundInternal(path,HX_("sounds",c4,a8,2e,32),::backend::AssetManager_obj::soundCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,getSound,return )

 ::openfl::media::Sound AssetManager_obj::getMusic(::String path){
            	HX_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_92_getMusic)
HXDLIN(  92)		return ::backend::AssetManager_obj::getSoundInternal(path,HX_("music",a5,d0,5a,10),::backend::AssetManager_obj::musicCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,getMusic,return )

::String AssetManager_obj::parseJson(::String path,::String __o_optionalPath){
            		::String optionalPath = __o_optionalPath;
            		if (::hx::IsNull(__o_optionalPath)) optionalPath = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_97_parseJson)
HXDLIN(  97)		return ::backend::AssetManager_obj::fileToString(::backend::AssetManager_obj::getPath((path + HX_(".json",56,f1,d6,c2)),optionalPath));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,parseJson,return )

 ::flixel::graphics::FlxGraphic AssetManager_obj::getImage(::String path,::String __o_extension){
            		::String extension = __o_extension;
            		if (::hx::IsNull(__o_extension)) extension = HX_("png",a9,5c,55,00);
            	HX_GC_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_101_getImage)
HXLINE( 102)		::String finalPath = ::backend::AssetManager_obj::getPath((((HX_("",00,00,00,00) + path) + HX_(".",2e,00,00,00)) + extension),HX_("images",b8,50,92,fe));
HXLINE( 104)		 ::backend::CacheImage data = null();
HXLINE( 106)		if (::backend::AssetManager_obj::graphicCache->exists(path)) {
HXLINE( 107)			return ( ( ::flixel::graphics::FlxGraphic)(( ( ::backend::ObjectCache)(::backend::AssetManager_obj::graphicCache->get(path)) )->data) );
            		}
HXLINE( 109)		if (( (bool)(::backend::AssetManager_obj::get_assetManager()->exists(finalPath,null())) )) {
HXLINE( 111)			 ::flixel::_hx_system::debug::log::LogStyle logStyle = null();
HXDLIN( 111)			data =  ::backend::CacheImage_obj::__alloc( HX_CTX ,::flixel::graphics::FlxGraphic_obj::fromBitmapData(( ( ::openfl::display::BitmapData)(::backend::AssetManager_obj::get_assetManager()->getAsset(finalPath,HX_("image",5b,1f,69,bd),false,logStyle)) ),null(),null(),null()));
HXLINE( 112)			::backend::AssetManager_obj::graphicCache->set(path,data);
            		}
HXLINE( 115)		return ( ( ::flixel::graphics::FlxGraphic)(data->data) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,getImage,return )

void AssetManager_obj::registerFont(::String path,::String __o_extension){
            		::String extension = __o_extension;
            		if (::hx::IsNull(__o_extension)) extension = HX_("ttf",e6,6a,58,00);
            	HX_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_119_registerFont)
HXLINE( 120)		 ::flixel::_hx_system::frontEnds::AssetFrontEnd _this = ::backend::AssetManager_obj::get_assetManager();
HXDLIN( 120)		 ::flixel::_hx_system::debug::log::LogStyle logStyle = null();
HXDLIN( 120)		 ::openfl::text::Font file = ( ( ::openfl::text::Font)(_this->getAsset(::backend::AssetManager_obj::getPath((((HX_("",00,00,00,00) + path) + HX_(".",2e,00,00,00)) + extension),HX_("fonts",c4,b7,91,04)),HX_("font",cf,5d,c0,43),false,logStyle)) );
HXLINE( 121)		::openfl::text::Font_obj::registerFont(file);
HXLINE( 123)		::backend::AssetManager_obj::registeredFonts->push(path);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,registerFont,(void))

::String AssetManager_obj::getFont(::String path,::String __o_extension){
            		::String extension = __o_extension;
            		if (::hx::IsNull(__o_extension)) extension = HX_("ttf",e6,6a,58,00);
            	HX_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_127_getFont)
HXLINE( 128)		if (!(::backend::AssetManager_obj::registeredFonts->contains(path))) {
HXLINE( 129)			::backend::AssetManager_obj::registerFont(path,extension);
            		}
HXLINE( 130)		return ::backend::AssetManager_obj::getPath((((HX_("",00,00,00,00) + path) + HX_(".",2e,00,00,00)) + extension),HX_("fonts",c4,b7,91,04));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,getFont,return )

 ::flixel::graphics::frames::FlxAtlasFrames AssetManager_obj::getAtlas(::String path,::String __o_imageExtension){
            		::String imageExtension = __o_imageExtension;
            		if (::hx::IsNull(__o_imageExtension)) imageExtension = HX_("png",a9,5c,55,00);
            	HX_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_135_getAtlas)
HXDLIN( 135)		 ::flixel::graphics::FlxGraphic _hx_tmp = ::backend::AssetManager_obj::getImage(path,imageExtension);
HXDLIN( 135)		return ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::backend::AssetManager_obj::fileToString(::backend::AssetManager_obj::getPath((path + HX_(".xml",69,3e,c3,1e)),HX_("images",b8,50,92,fe))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,getAtlas,return )

::String AssetManager_obj::getShader(::String path,::String __o_extension){
            		::String extension = __o_extension;
            		if (::hx::IsNull(__o_extension)) extension = HX_("glsl",fe,51,67,44);
            	HX_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_140_getShader)
HXDLIN( 140)		return ::backend::AssetManager_obj::fileToString(::backend::AssetManager_obj::getPath((((HX_("",00,00,00,00) + path) + HX_(".",2e,00,00,00)) + extension),HX_("shaders",ae,81,86,5f)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,getShader,return )

 ::flixel::_hx_system::frontEnds::AssetFrontEnd AssetManager_obj::get_assetManager(){
            	HX_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_145_get_assetManager)
HXDLIN( 145)		return ::flixel::FlxG_obj::assets;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,get_assetManager,return )


AssetManager_obj::AssetManager_obj()
{
}

bool AssetManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getSound") ) { outValue = getSound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getMusic") ) { outValue = getMusic_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getImage") ) { outValue = getImage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getAtlas") ) { outValue = getAtlas_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"parseJson") ) { outValue = parseJson_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getShader") ) { outValue = getShader_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"soundCache") ) { outValue = ( soundCache ); return true; }
		if (HX_FIELD_EQ(inName,"musicCache") ) { outValue = ( musicCache ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"graphicCache") ) { outValue = ( graphicCache ); return true; }
		if (HX_FIELD_EQ(inName,"assetManager") ) { outValue = ( inCallProp == ::hx::paccAlways ? get_assetManager() : assetManager ); return true; }
		if (HX_FIELD_EQ(inName,"getAssetPath") ) { outValue = getAssetPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fileToString") ) { outValue = fileToString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"registerFont") ) { outValue = registerFont_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"soundExtension") ) { outValue = ( soundExtension ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"registeredFonts") ) { outValue = ( registeredFonts ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getSoundInternal") ) { outValue = getSoundInternal_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_assetManager") ) { outValue = get_assetManager_dyn(); return true; }
	}
	return false;
}

bool AssetManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"soundCache") ) { soundCache=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"musicCache") ) { musicCache=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"graphicCache") ) { graphicCache=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"assetManager") ) { assetManager=ioValue.Cast<  ::flixel::_hx_system::frontEnds::AssetFrontEnd >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"soundExtension") ) { soundExtension=ioValue.Cast< ::String >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"registeredFonts") ) { registeredFonts=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *AssetManager_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo AssetManager_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &AssetManager_obj::graphicCache,HX_("graphicCache",7a,0e,49,b1)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &AssetManager_obj::soundCache,HX_("soundCache",f3,ae,59,aa)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &AssetManager_obj::musicCache,HX_("musicCache",5d,c3,97,71)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &AssetManager_obj::registeredFonts,HX_("registeredFonts",e2,52,2a,e1)},
	{::hx::fsString,(void *) &AssetManager_obj::soundExtension,HX_("soundExtension",b0,54,5c,c2)},
	{::hx::fsObject /*  ::flixel::_hx_system::frontEnds::AssetFrontEnd */ ,(void *) &AssetManager_obj::assetManager,HX_("assetManager",5d,6e,13,34)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void AssetManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AssetManager_obj::graphicCache,"graphicCache");
	HX_MARK_MEMBER_NAME(AssetManager_obj::soundCache,"soundCache");
	HX_MARK_MEMBER_NAME(AssetManager_obj::musicCache,"musicCache");
	HX_MARK_MEMBER_NAME(AssetManager_obj::registeredFonts,"registeredFonts");
	HX_MARK_MEMBER_NAME(AssetManager_obj::soundExtension,"soundExtension");
	HX_MARK_MEMBER_NAME(AssetManager_obj::assetManager,"assetManager");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AssetManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AssetManager_obj::graphicCache,"graphicCache");
	HX_VISIT_MEMBER_NAME(AssetManager_obj::soundCache,"soundCache");
	HX_VISIT_MEMBER_NAME(AssetManager_obj::musicCache,"musicCache");
	HX_VISIT_MEMBER_NAME(AssetManager_obj::registeredFonts,"registeredFonts");
	HX_VISIT_MEMBER_NAME(AssetManager_obj::soundExtension,"soundExtension");
	HX_VISIT_MEMBER_NAME(AssetManager_obj::assetManager,"assetManager");
};

#endif

::hx::Class AssetManager_obj::__mClass;

static ::String AssetManager_obj_sStaticFields[] = {
	HX_("graphicCache",7a,0e,49,b1),
	HX_("soundCache",f3,ae,59,aa),
	HX_("musicCache",5d,c3,97,71),
	HX_("registeredFonts",e2,52,2a,e1),
	HX_("soundExtension",b0,54,5c,c2),
	HX_("assetManager",5d,6e,13,34),
	HX_("getAssetPath",3f,d0,4e,be),
	HX_("getPath",5b,95,d4,1c),
	HX_("fileToString",48,37,49,78),
	HX_("getSoundInternal",b6,40,b5,2f),
	HX_("getSound",59,9c,a3,e0),
	HX_("getMusic",2f,e0,31,70),
	HX_("parseJson",fb,93,0e,ce),
	HX_("getImage",e5,2e,40,1d),
	HX_("registerFont",d2,9d,af,bf),
	HX_("getFont",85,0d,43,16),
	HX_("getAtlas",d5,5c,b4,86),
	HX_("getShader",5b,48,77,99),
	HX_("get_assetManager",e6,5a,b2,38),
	::String(null())
};

void AssetManager_obj::__register()
{
	AssetManager_obj _hx_dummy;
	AssetManager_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.AssetManager",17,8f,99,1f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AssetManager_obj::__GetStatic;
	__mClass->mSetStaticField = &AssetManager_obj::__SetStatic;
	__mClass->mMarkFunc = AssetManager_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(AssetManager_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< AssetManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AssetManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssetManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssetManager_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void AssetManager_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_46_boot)
HXDLIN(  46)		graphicCache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_47_boot)
HXDLIN(  47)		soundCache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_48_boot)
HXDLIN(  48)		musicCache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_50_boot)
HXDLIN(  50)		registeredFonts = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47d5dfe30374d1a_52_boot)
HXDLIN(  52)		soundExtension = HX_("mp3",70,17,53,00);
            	}
}

} // end namespace backend
