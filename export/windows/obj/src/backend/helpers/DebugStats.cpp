// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_backend_helpers_DebugStats
#include <backend/helpers/DebugStats.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_system_System
#include <openfl/system/System.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0f5837730c08dde0_21_new,"backend.helpers.DebugStats","new",0xcc211201,"backend.helpers.DebugStats.new","backend/helpers/DebugStats.hx",21,0x8bea864d)
HX_LOCAL_STACK_FRAME(_hx_pos_0f5837730c08dde0_40___enterFrame,"backend.helpers.DebugStats","__enterFrame",0xe4bb8154,"backend.helpers.DebugStats.__enterFrame","backend/helpers/DebugStats.hx",40,0x8bea864d)
namespace backend{
namespace helpers{

void DebugStats_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_color){
            		Float x = __o_x.Default(10);
            		Float y = __o_y.Default(10);
            		int color = __o_color.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_0f5837730c08dde0_21_new)
HXLINE(  22)		super::__construct();
HXLINE(  24)		this->set_x(x);
HXLINE(  25)		this->set_y(y);
HXLINE(  27)		this->currentFPS = 0;
HXLINE(  28)		this->set_selectable(false);
HXLINE(  29)		this->mouseEnabled = false;
HXLINE(  30)		this->set_autoSize(1);
HXLINE(  31)		this->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("_sans",32,a0,5e,ff),12,color,null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  32)		this->set_text(HX_("FPS: ",af,da,2c,83));
HXLINE(  34)		this->cacheCount = 0;
HXLINE(  35)		this->currentTime = ( (Float)(0) );
HXLINE(  36)		this->times = ::Array_obj< Float >::__new(0);
            	}

Dynamic DebugStats_obj::__CreateEmpty() { return new DebugStats_obj; }

void *DebugStats_obj::_hx_vtable = 0;

Dynamic DebugStats_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DebugStats_obj > _hx_result = new DebugStats_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool DebugStats_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1e90ad6d) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1e90ad6d;
		}
	} else {
		return inClassId==(int)0x6b353933 || inClassId==(int)0x7f0de750;
	}
}

void DebugStats_obj::_hx___enterFrame(int _tmp_deltaTime){
            	HX_STACKFRAME(&_hx_pos_0f5837730c08dde0_40___enterFrame)
HXLINE(  41)		Float deltaTime = ( (Float)(_tmp_deltaTime) );
HXDLIN(  41)		 ::backend::helpers::DebugStats _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  41)		_hx_tmp->currentTime = (_hx_tmp->currentTime + deltaTime);
HXLINE(  42)		this->times->push(this->currentTime);
HXLINE(  44)		while((this->times->__get(0) < (this->currentTime - ( (Float)(1000) )))){
HXLINE(  46)			this->times->shift();
            		}
HXLINE(  49)		int currentCount = this->times->length;
HXLINE(  50)		this->currentFPS = ::Math_obj::round((( (Float)((currentCount + this->cacheCount)) ) / ( (Float)(2) )));
HXLINE(  52)		if ((this->currentFPS >= ::flixel::FlxG_obj::drawFramerate)) {
HXLINE(  53)			this->currentFPS = ::flixel::FlxG_obj::drawFramerate;
            		}
HXLINE(  55)		if ((currentCount != this->cacheCount)) {
HXLINE(  57)			this->set_text(((HX_("",00,00,00,00) + this->currentFPS) + HX_(" FPS\n",41,7c,54,9b)));
HXLINE(  58)			::String _hx_tmp1 = this->get_text();
HXDLIN(  58)			this->set_text((_hx_tmp1 + ((HX_("",00,00,00,00) + ::flixel::util::FlxStringUtil_obj::formatBytes(::openfl::_hx_system::System_obj::get_totalMemoryNumber(),null())) + HX_(" RAM\n",ac,a4,37,a3))));
HXLINE(  59)			this->set_text((this->get_text() + HX_("GAMEJAM ENTRY: UNTITLED",41,75,e7,80)));
            		}
HXLINE(  62)		this->cacheCount = currentCount;
            	}



::hx::ObjectPtr< DebugStats_obj > DebugStats_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_color) {
	::hx::ObjectPtr< DebugStats_obj > __this = new DebugStats_obj();
	__this->__construct(__o_x,__o_y,__o_color);
	return __this;
}

::hx::ObjectPtr< DebugStats_obj > DebugStats_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_color) {
	DebugStats_obj *__this = (DebugStats_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DebugStats_obj), true, "backend.helpers.DebugStats"));
	*(void **)__this = DebugStats_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_color);
	return __this;
}

DebugStats_obj::DebugStats_obj()
{
}

void DebugStats_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DebugStats);
	HX_MARK_MEMBER_NAME(currentFPS,"currentFPS");
	HX_MARK_MEMBER_NAME(cacheCount,"cacheCount");
	HX_MARK_MEMBER_NAME(currentTime,"currentTime");
	HX_MARK_MEMBER_NAME(times,"times");
	 ::openfl::text::TextField_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DebugStats_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentFPS,"currentFPS");
	HX_VISIT_MEMBER_NAME(cacheCount,"cacheCount");
	HX_VISIT_MEMBER_NAME(currentTime,"currentTime");
	HX_VISIT_MEMBER_NAME(times,"times");
	 ::openfl::text::TextField_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val DebugStats_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"times") ) { return ::hx::Val( times ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentFPS") ) { return ::hx::Val( currentFPS ); }
		if (HX_FIELD_EQ(inName,"cacheCount") ) { return ::hx::Val( cacheCount ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentTime") ) { return ::hx::Val( currentTime ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return ::hx::Val( _hx___enterFrame_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DebugStats_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"times") ) { times=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentFPS") ) { currentFPS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheCount") ) { cacheCount=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentTime") ) { currentTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DebugStats_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("currentFPS",30,71,28,c7));
	outFields->push(HX_("cacheCount",2d,ab,1b,8d));
	outFields->push(HX_("currentTime",e6,a4,8e,85));
	outFields->push(HX_("times",c6,bf,35,10));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DebugStats_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(DebugStats_obj,currentFPS),HX_("currentFPS",30,71,28,c7)},
	{::hx::fsInt,(int)offsetof(DebugStats_obj,cacheCount),HX_("cacheCount",2d,ab,1b,8d)},
	{::hx::fsFloat,(int)offsetof(DebugStats_obj,currentTime),HX_("currentTime",e6,a4,8e,85)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(DebugStats_obj,times),HX_("times",c6,bf,35,10)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DebugStats_obj_sStaticStorageInfo = 0;
#endif

static ::String DebugStats_obj_sMemberFields[] = {
	HX_("currentFPS",30,71,28,c7),
	HX_("cacheCount",2d,ab,1b,8d),
	HX_("currentTime",e6,a4,8e,85),
	HX_("times",c6,bf,35,10),
	HX_("__enterFrame",15,7f,e3,3a),
	::String(null()) };

::hx::Class DebugStats_obj::__mClass;

void DebugStats_obj::__register()
{
	DebugStats_obj _hx_dummy;
	DebugStats_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.helpers.DebugStats",8f,fd,d5,e7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DebugStats_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DebugStats_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DebugStats_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DebugStats_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace backend
} // end namespace helpers
