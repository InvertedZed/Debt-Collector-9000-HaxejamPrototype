// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_backend_Camera
#include <backend/Camera.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cdcd4ed930965831_5_new,"backend.Camera","new",0x23f73c51,"backend.Camera.new","backend/Camera.hx",5,0xdc00f01e)
HX_LOCAL_STACK_FRAME(_hx_pos_cdcd4ed930965831_8_update,"backend.Camera","update",0x646366b8,"backend.Camera.update","backend/Camera.hx",8,0xdc00f01e)
namespace backend{

void Camera_obj::__construct( ::Dynamic X, ::Dynamic Y, ::Dynamic Width, ::Dynamic Height, ::Dynamic Zoom){
            	HX_STACKFRAME(&_hx_pos_cdcd4ed930965831_5_new)
HXDLIN(   5)		super::__construct(X,Y,Width,Height,Zoom);
            	}

Dynamic Camera_obj::__CreateEmpty() { return new Camera_obj; }

void *Camera_obj::_hx_vtable = 0;

Dynamic Camera_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Camera_obj > _hx_result = new Camera_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Camera_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x381252d9) {
		if (inClassId<=(int)0x1ff7ce3b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1ff7ce3b;
		} else {
			return inClassId==(int)0x381252d9;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void Camera_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_cdcd4ed930965831_8_update)
HXLINE(   9)		this->super::update(elapsed);
HXLINE(  11)		this->scaleX = (this->scaleY = ( (Float)(2) ));
HXLINE(  12)		this->setScale((this->zoom / ( (Float)(2) )),(this->zoom / ( (Float)(2) )));
            	}



::hx::ObjectPtr< Camera_obj > Camera_obj::__new( ::Dynamic X, ::Dynamic Y, ::Dynamic Width, ::Dynamic Height, ::Dynamic Zoom) {
	::hx::ObjectPtr< Camera_obj > __this = new Camera_obj();
	__this->__construct(X,Y,Width,Height,Zoom);
	return __this;
}

::hx::ObjectPtr< Camera_obj > Camera_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y, ::Dynamic Width, ::Dynamic Height, ::Dynamic Zoom) {
	Camera_obj *__this = (Camera_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Camera_obj), true, "backend.Camera"));
	*(void **)__this = Camera_obj::_hx_vtable;
	__this->__construct(X,Y,Width,Height,Zoom);
	return __this;
}

Camera_obj::Camera_obj()
{
}

::hx::Val Camera_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Camera_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Camera_obj_sStaticStorageInfo = 0;
#endif

static ::String Camera_obj_sMemberFields[] = {
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Camera_obj::__mClass;

void Camera_obj::__register()
{
	Camera_obj _hx_dummy;
	Camera_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.Camera",df,bf,14,7c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Camera_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Camera_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Camera_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Camera_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace backend
