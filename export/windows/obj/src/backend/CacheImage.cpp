// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_backend_CacheImage
#include <backend/CacheImage.h>
#endif
#ifndef INCLUDED_backend_ObjectCache
#include <backend/ObjectCache.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6fbb8235dbadfbad_26_new,"backend.CacheImage","new",0x85803a65,"backend.CacheImage.new","backend/AssetManager.hx",26,0x42112526)
HX_LOCAL_STACK_FRAME(_hx_pos_6fbb8235dbadfbad_29_dealloc,"backend.CacheImage","dealloc",0xa7abc9d9,"backend.CacheImage.dealloc","backend/AssetManager.hx",29,0x42112526)
namespace backend{

void CacheImage_obj::__construct( ::flixel::graphics::FlxGraphic data){
            	HX_STACKFRAME(&_hx_pos_6fbb8235dbadfbad_26_new)
HXDLIN(  26)		super::__construct(data);
            	}

Dynamic CacheImage_obj::__CreateEmpty() { return new CacheImage_obj; }

void *CacheImage_obj::_hx_vtable = 0;

Dynamic CacheImage_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CacheImage_obj > _hx_result = new CacheImage_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CacheImage_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x00110743) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x00110743;
	} else {
		return inClassId==(int)0x589dd625;
	}
}

void CacheImage_obj::dealloc(){
            	HX_STACKFRAME(&_hx_pos_6fbb8235dbadfbad_29_dealloc)
HXLINE(  30)		( ( ::flixel::graphics::FlxGraphic)(this->data) )->persist = false;
HXLINE(  32)		( ( ::flixel::graphics::FlxGraphic)(this->data) )->destroy();
            	}



::hx::ObjectPtr< CacheImage_obj > CacheImage_obj::__new( ::flixel::graphics::FlxGraphic data) {
	::hx::ObjectPtr< CacheImage_obj > __this = new CacheImage_obj();
	__this->__construct(data);
	return __this;
}

::hx::ObjectPtr< CacheImage_obj > CacheImage_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::graphics::FlxGraphic data) {
	CacheImage_obj *__this = (CacheImage_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CacheImage_obj), true, "backend.CacheImage"));
	*(void **)__this = CacheImage_obj::_hx_vtable;
	__this->__construct(data);
	return __this;
}

CacheImage_obj::CacheImage_obj()
{
}

::hx::Val CacheImage_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"dealloc") ) { return ::hx::Val( dealloc_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CacheImage_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CacheImage_obj_sStaticStorageInfo = 0;
#endif

static ::String CacheImage_obj_sMemberFields[] = {
	HX_("dealloc",54,79,01,c2),
	::String(null()) };

::hx::Class CacheImage_obj::__mClass;

void CacheImage_obj::__register()
{
	CacheImage_obj _hx_dummy;
	CacheImage_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.CacheImage",f3,23,18,8a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CacheImage_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CacheImage_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CacheImage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CacheImage_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace backend
