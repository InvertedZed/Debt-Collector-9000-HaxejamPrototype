// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_backend_AssetManager
#include <backend/AssetManager.h>
#endif
#ifndef INCLUDED_backend_GameSprite
#include <backend/GameSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxSkewedSprite
#include <flixel/addons/effects/FlxSkewedSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_game_ingame_Backdrop
#include <game/ingame/Backdrop.h>
#endif
#ifndef INCLUDED_game_ingame_Background
#include <game/ingame/Background.h>
#endif
#ifndef INCLUDED_game_ingame_Player
#include <game/ingame/Player.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_63e069b245bd6e1b_7_new,"game.ingame.Background","new",0xd38676bb,"game.ingame.Background.new","game/ingame/Background.hx",7,0xe9d0b2f5)
HX_LOCAL_STACK_FRAME(_hx_pos_63e069b245bd6e1b_36_update,"game.ingame.Background","update",0x34a50a8e,"game.ingame.Background.update","game/ingame/Background.hx",36,0xe9d0b2f5)
namespace game{
namespace ingame{

void Background_obj::__construct(int id, ::game::ingame::Player p){
            	HX_GC_STACKFRAME(&_hx_pos_63e069b245bd6e1b_7_new)
HXLINE(  10)		this->minY = ((Float)552);
HXLINE(   9)		this->maxY = ((Float)420);
HXLINE(  16)		super::__construct(null());
HXLINE(  18)		this->internalPlayer = p;
HXLINE(  20)		if ((id == 2)) {
HXLINE(  26)			 ::game::ingame::Backdrop background =  ::game::ingame::Backdrop_obj::__alloc( HX_CTX ,::backend::AssetManager_obj::getImage(HX_("gameplay/levels/2/back",1b,cb,5c,13),null()),1,null(),null());
HXLINE(  27)			background->scrollFactor->set_x(((Float)0.85));
HXLINE(  28)			this->add(background);
HXLINE(  30)			 ::game::ingame::Backdrop frontground =  ::game::ingame::Backdrop_obj::__alloc( HX_CTX ,::backend::AssetManager_obj::getImage(HX_("gameplay/levels/2/front",35,fd,b4,36),null()),1,null(),null());
HXLINE(  31)			this->add(frontground);
            		}
            		else {
HXLINE(  23)			 ::game::ingame::Backdrop background1 =  ::game::ingame::Backdrop_obj::__alloc( HX_CTX ,::backend::AssetManager_obj::getImage(HX_("gameplay/levels/1",da,58,32,40),null()),1,null(),null());
HXLINE(  24)			this->add(background1);
            		}
            	}

Dynamic Background_obj::__CreateEmpty() { return new Background_obj; }

void *Background_obj::_hx_vtable = 0;

Dynamic Background_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Background_obj > _hx_result = new Background_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Background_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x1930b617) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1930b617;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void Background_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_63e069b245bd6e1b_36_update)
HXLINE(  37)		this->super::update(elapsed);
HXLINE(  39)		this->internalPlayer->updateMovement();
HXLINE(  41)		if ((this->internalPlayer->y < this->maxY)) {
HXLINE(  42)			this->internalPlayer->setY(this->maxY);
            		}
HXLINE(  43)		if ((this->internalPlayer->y > this->minY)) {
HXLINE(  44)			this->internalPlayer->setY(this->minY);
            		}
            	}



::hx::ObjectPtr< Background_obj > Background_obj::__new(int id, ::game::ingame::Player p) {
	::hx::ObjectPtr< Background_obj > __this = new Background_obj();
	__this->__construct(id,p);
	return __this;
}

::hx::ObjectPtr< Background_obj > Background_obj::__alloc(::hx::Ctx *_hx_ctx,int id, ::game::ingame::Player p) {
	Background_obj *__this = (Background_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Background_obj), true, "game.ingame.Background"));
	*(void **)__this = Background_obj::_hx_vtable;
	__this->__construct(id,p);
	return __this;
}

Background_obj::Background_obj()
{
}

void Background_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Background);
	HX_MARK_MEMBER_NAME(maxY,"maxY");
	HX_MARK_MEMBER_NAME(minY,"minY");
	HX_MARK_MEMBER_NAME(internalPlayer,"internalPlayer");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Background_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(maxY,"maxY");
	HX_VISIT_MEMBER_NAME(minY,"minY");
	HX_VISIT_MEMBER_NAME(internalPlayer,"internalPlayer");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Background_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"maxY") ) { return ::hx::Val( maxY ); }
		if (HX_FIELD_EQ(inName,"minY") ) { return ::hx::Val( minY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"internalPlayer") ) { return ::hx::Val( internalPlayer ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Background_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"maxY") ) { maxY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minY") ) { minY=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"internalPlayer") ) { internalPlayer=inValue.Cast<  ::game::ingame::Player >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Background_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("maxY",35,45,56,48));
	outFields->push(HX_("minY",87,4e,5c,48));
	outFields->push(HX_("internalPlayer",7e,52,a8,5c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Background_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Background_obj,maxY),HX_("maxY",35,45,56,48)},
	{::hx::fsFloat,(int)offsetof(Background_obj,minY),HX_("minY",87,4e,5c,48)},
	{::hx::fsObject /*  ::game::ingame::Player */ ,(int)offsetof(Background_obj,internalPlayer),HX_("internalPlayer",7e,52,a8,5c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Background_obj_sStaticStorageInfo = 0;
#endif

static ::String Background_obj_sMemberFields[] = {
	HX_("maxY",35,45,56,48),
	HX_("minY",87,4e,5c,48),
	HX_("internalPlayer",7e,52,a8,5c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Background_obj::__mClass;

void Background_obj::__register()
{
	Background_obj _hx_dummy;
	Background_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("game.ingame.Background",49,fd,47,1c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Background_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Background_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Background_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Background_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
} // end namespace ingame
