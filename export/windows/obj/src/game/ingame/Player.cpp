// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_backend_AssetManager
#include <backend/AssetManager.h>
#endif
#ifndef INCLUDED_backend_GameSprite
#include <backend/GameSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxSkewedSprite
#include <flixel/addons/effects/FlxSkewedSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_input_DigitalEvent
#include <flixel/addons/input/DigitalEvent.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxControls
#include <flixel/addons/input/FlxControls.h>
#endif
#ifndef INCLUDED_flixel_addons_input_FlxDigitalSet
#include <flixel/addons/input/FlxDigitalSet.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_InputFrontEnd
#include <flixel/system/frontEnds/InputFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_game_ingame_ControlEnum
#include <game/ingame/ControlEnum.h>
#endif
#ifndef INCLUDED_game_ingame_Player
#include <game/ingame/Player.h>
#endif
#ifndef INCLUDED_game_ingame_PlayerControls
#include <game/ingame/PlayerControls.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_75eade814ed16d30_9_new,"game.ingame.Player","new",0x8cceba2e,"game.ingame.Player.new","game/ingame/Player.hx",9,0x79d46ee2)
HX_LOCAL_STACK_FRAME(_hx_pos_75eade814ed16d30_47_addAnimation,"game.ingame.Player","addAnimation",0xe1d57d15,"game.ingame.Player.addAnimation","game/ingame/Player.hx",47,0x79d46ee2)
HX_LOCAL_STACK_FRAME(_hx_pos_75eade814ed16d30_57_playAnimation,"game.ingame.Player","playAnimation",0xb10cb9be,"game.ingame.Player.playAnimation","game/ingame/Player.hx",57,0x79d46ee2)
HX_LOCAL_STACK_FRAME(_hx_pos_75eade814ed16d30_66_initPosition,"game.ingame.Player","initPosition",0x06fd944b,"game.ingame.Player.initPosition","game/ingame/Player.hx",66,0x79d46ee2)
HX_LOCAL_STACK_FRAME(_hx_pos_75eade814ed16d30_74_updateMovement,"game.ingame.Player","updateMovement",0x89f7654a,"game.ingame.Player.updateMovement","game/ingame/Player.hx",74,0x79d46ee2)
HX_LOCAL_STACK_FRAME(_hx_pos_75eade814ed16d30_136_setX,"game.ingame.Player","setX",0xab623ce8,"game.ingame.Player.setX","game/ingame/Player.hx",136,0x79d46ee2)
HX_LOCAL_STACK_FRAME(_hx_pos_75eade814ed16d30_139_setY,"game.ingame.Player","setY",0xab623ce9,"game.ingame.Player.setY","game/ingame/Player.hx",139,0x79d46ee2)
HX_LOCAL_STACK_FRAME(_hx_pos_75eade814ed16d30_142_snap,"game.ingame.Player","snap",0xab6900bc,"game.ingame.Player.snap","game/ingame/Player.hx",142,0x79d46ee2)
HX_LOCAL_STACK_FRAME(_hx_pos_75eade814ed16d30_145_snapMovement,"game.ingame.Player","snapMovement",0x7f9b5e0b,"game.ingame.Player.snapMovement","game/ingame/Player.hx",145,0x79d46ee2)
namespace game{
namespace ingame{

void Player_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_75eade814ed16d30_9_new)
HXLINE(  25)		this->internalY = ((Float)0);
HXLINE(  24)		this->internalX = ((Float)0);
HXLINE(  22)		this->offsetMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  20)		this->onSwing =  ::flixel::util::_FlxSignal::FlxSignal0_obj::__alloc( HX_CTX );
HXLINE(  18)		this->canMove = true;
HXLINE(  16)		this->hitCooldown = ((Float)0);
HXLINE(  15)		this->holdTimer = ((Float)0);
HXLINE(  13)		this->speed = ((Float)3.1);
HXLINE(  29)		super::__construct(0,0,null());
HXLINE(  31)		this->set_frames(::backend::AssetManager_obj::getAtlas(HX_("gameplay/player",aa,7e,99,a9),null()));
HXLINE(  33)		this->addAnimation(HX_("idle",14,a7,b3,45),5,true,null());
HXLINE(  34)		this->addAnimation(HX_("walk",09,5d,f2,4e),5,true,null());
HXLINE(  36)		{
HXLINE(  36)			{
HXLINE(  36)				::String attackAnim = HX_("lefthit",ac,bc,f4,f4);
HXLINE(  37)				 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(4,39);
HXDLIN(  37)				point->_inPool = false;
HXDLIN(  37)				this->addAnimation(attackAnim,10,false,point);
            			}
HXLINE(  36)			{
HXLINE(  36)				::String attackAnim1 = HX_("righthit",f7,0b,2f,e4);
HXLINE(  37)				 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(4,39);
HXDLIN(  37)				point1->_inPool = false;
HXDLIN(  37)				this->addAnimation(attackAnim1,10,false,point1);
            			}
HXLINE(  36)			{
HXLINE(  36)				::String attackAnim2 = HX_("kick",c6,d7,09,47);
HXLINE(  37)				 ::flixel::math::FlxBasePoint point2 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(4,39);
HXDLIN(  37)				point2->_inPool = false;
HXDLIN(  37)				this->addAnimation(attackAnim2,10,false,point2);
            			}
            		}
HXLINE(  39)		this->playAnimation(HX_("idle",14,a7,b3,45),true);
HXLINE(  41)		this->controls =  ::game::ingame::PlayerControls_obj::__alloc( HX_CTX ,HX_("scheme",25,20,c1,40));
HXLINE(  43)		::flixel::FlxG_obj::inputs->addInput_game_ingame_PlayerControls(this->controls);
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x107498cd) {
			if (inClassId<=(int)0x015dfbcb) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x015dfbcb;
			} else {
				return inClassId==(int)0x107498cd;
			}
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x3853850a || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7dab0655;
		}
	}
}

void Player_obj::addAnimation(::String name,::hx::Null< int >  __o_fps,::hx::Null< bool >  __o_looped, ::flixel::math::FlxBasePoint position){
            		int fps = __o_fps.Default(5);
            		bool looped = __o_looped.Default(false);
            	HX_STACKFRAME(&_hx_pos_75eade814ed16d30_47_addAnimation)
HXLINE(  48)		if (::hx::IsNull( position )) {
HXLINE(  49)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  49)			point->_inPool = false;
HXDLIN(  49)			position = point;
            		}
HXLINE(  51)		this->animation->addByPrefix(name,name,fps,looped,null(),null());
HXLINE(  53)		this->offsetMap->set(name,position);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Player_obj,addAnimation,(void))

void Player_obj::playAnimation(::String name,::hx::Null< bool >  __o_forced){
            		bool forced = __o_forced.Default(false);
            	HX_STACKFRAME(&_hx_pos_75eade814ed16d30_57_playAnimation)
HXLINE(  58)		this->animation->play(name,forced,null(),null());
HXLINE(  59)		 ::flixel::math::FlxBasePoint this1;
HXDLIN(  59)		 ::flixel::math::FlxBasePoint tmp = ( ( ::flixel::math::FlxBasePoint)(this->offsetMap->get(name)) );
HXDLIN(  59)		if (::hx::IsNotNull( tmp )) {
HXLINE(  59)			this1 = tmp;
            		}
            		else {
HXLINE(  59)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  59)			point->_inPool = false;
HXDLIN(  59)			this1 = point;
            		}
HXDLIN(  59)		 ::flixel::math::FlxBasePoint p = null();
HXDLIN(  59)		 ::flixel::math::FlxBasePoint p1 = p;
HXDLIN(  59)		if (::hx::IsNull( p1 )) {
HXLINE(  59)			 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  59)			point1->_inPool = false;
HXDLIN(  59)			p1 = point1;
            		}
HXDLIN(  59)		Float y = this1->y;
HXDLIN(  59)		p1->set_x(this1->x);
HXDLIN(  59)		p1->set_y(y);
HXDLIN(  59)		 ::flixel::math::FlxBasePoint point2 = p1;
HXLINE(  60)		if (this->flipX) {
HXLINE(  61)			point2->set_x((point2->x + point2->x));
            		}
HXLINE(  62)		{
HXLINE(  62)			 ::flixel::math::FlxBasePoint this2 = this->offset;
HXDLIN(  62)			{
HXLINE(  62)				Float y1 = point2->y;
HXDLIN(  62)				this2->set_x(point2->x);
HXDLIN(  62)				this2->set_y(y1);
            			}
HXDLIN(  62)			{
HXLINE(  62)				 ::flixel::math::FlxBasePoint _this = point2;
HXDLIN(  62)				if (_this->_weak) {
HXLINE(  62)					_this->put();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Player_obj,playAnimation,(void))

void Player_obj::initPosition(){
            	HX_STACKFRAME(&_hx_pos_75eade814ed16d30_66_initPosition)
HXLINE(  67)		{
HXLINE(  67)			int axes = 17;
HXDLIN(  67)			bool _hx_tmp;
HXDLIN(  67)			if ((axes != 1)) {
HXLINE(  67)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  67)				_hx_tmp = true;
            			}
HXDLIN(  67)			if (_hx_tmp) {
HXLINE(  67)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  67)				this->set_x(((( (Float)(_hx_tmp1) ) - this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  67)			bool _hx_tmp2;
HXDLIN(  67)			if ((axes != 16)) {
HXLINE(  67)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  67)				_hx_tmp2 = true;
            			}
HXDLIN(  67)			if (_hx_tmp2) {
HXLINE(  67)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  67)				this->set_y(((( (Float)(_hx_tmp3) ) - this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  68)		this->set_y((this->y + 150));
HXLINE(  69)		this->internalX = this->x;
HXLINE(  70)		this->internalY = this->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,initPosition,(void))

void Player_obj::updateMovement(){
            	HX_STACKFRAME(&_hx_pos_75eade814ed16d30_74_updateMovement)
HXLINE(  75)		{
HXLINE(  75)			{
HXLINE(  75)				Float value = this->holdTimer;
HXLINE(  77)				if ((value > 0)) {
HXLINE(  78)					value = (value - ::flixel::FlxG_obj::elapsed);
            				}
            				else {
HXLINE(  80)					value = ( (Float)(0) );
            				}
            			}
HXLINE(  75)			{
HXLINE(  75)				Float value1 = this->hitCooldown;
HXLINE(  77)				if ((value1 > 0)) {
HXLINE(  78)					value1 = (value1 - ::flixel::FlxG_obj::elapsed);
            				}
            				else {
HXLINE(  80)					value1 = ( (Float)(0) );
            				}
            			}
            		}
HXLINE(  83)		if (this->canMove) {
HXLINE(  85)			if (this->controls->digitalSets->get(::flixel::addons::input::DigitalEvent_obj::PRESSED_dyn()).StaticCast<  ::flixel::addons::input::FlxDigitalSet >()->check(::game::ingame::ControlEnum_obj::LEFT_dyn())) {
HXLINE(  87)				 ::game::ingame::Player _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  87)				_hx_tmp->internalX = (_hx_tmp->internalX - ((this->speed * ( (Float)(26) )) * ::flixel::FlxG_obj::elapsed));
HXLINE(  88)				this->set_flipX(true);
            			}
HXLINE(  90)			if (this->controls->digitalSets->get(::flixel::addons::input::DigitalEvent_obj::PRESSED_dyn()).StaticCast<  ::flixel::addons::input::FlxDigitalSet >()->check(::game::ingame::ControlEnum_obj::RIGHT_dyn())) {
HXLINE(  92)				 ::game::ingame::Player _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  92)				_hx_tmp1->internalX = (_hx_tmp1->internalX + ((this->speed * ( (Float)(26) )) * ::flixel::FlxG_obj::elapsed));
HXLINE(  93)				this->set_flipX(false);
            			}
HXLINE(  95)			if (this->controls->digitalSets->get(::flixel::addons::input::DigitalEvent_obj::PRESSED_dyn()).StaticCast<  ::flixel::addons::input::FlxDigitalSet >()->check(::game::ingame::ControlEnum_obj::UP_dyn())) {
HXLINE(  96)				 ::game::ingame::Player _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  96)				_hx_tmp2->internalY = (_hx_tmp2->internalY - ((this->speed * ( (Float)(23) )) * ::flixel::FlxG_obj::elapsed));
            			}
HXLINE(  97)			if (this->controls->digitalSets->get(::flixel::addons::input::DigitalEvent_obj::PRESSED_dyn()).StaticCast<  ::flixel::addons::input::FlxDigitalSet >()->check(::game::ingame::ControlEnum_obj::DOWN_dyn())) {
HXLINE(  98)				 ::game::ingame::Player _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  98)				_hx_tmp3->internalY = (_hx_tmp3->internalY + ((this->speed * ( (Float)(23) )) * ::flixel::FlxG_obj::elapsed));
            			}
            		}
HXLINE( 101)		::String animationToPlay = HX_("idle",14,a7,b3,45);
HXLINE( 102)		bool shouldPlayGeneralAnim = true;
HXLINE( 104)		if (this->controls->digitalSets->get(::flixel::addons::input::DigitalEvent_obj::PRESSED_dyn()).StaticCast<  ::flixel::addons::input::FlxDigitalSet >()->any(::Array_obj< ::Dynamic>::__new(4)->init(0,::game::ingame::ControlEnum_obj::LEFT_dyn())->init(1,::game::ingame::ControlEnum_obj::DOWN_dyn())->init(2,::game::ingame::ControlEnum_obj::UP_dyn())->init(3,::game::ingame::ControlEnum_obj::RIGHT_dyn()))) {
HXLINE( 105)			animationToPlay = HX_("walk",09,5d,f2,4e);
            		}
HXLINE( 107)		bool _hx_tmp4;
HXDLIN( 107)		if (this->controls->digitalSets->get(::flixel::addons::input::DigitalEvent_obj::JUST_PRESSED_dyn()).StaticCast<  ::flixel::addons::input::FlxDigitalSet >()->any(::Array_obj< ::Dynamic>::__new(3)->init(0,::game::ingame::ControlEnum_obj::LEFTHIT_dyn())->init(1,::game::ingame::ControlEnum_obj::RIGHTHIT_dyn())->init(2,::game::ingame::ControlEnum_obj::KICK_dyn()))) {
HXLINE( 107)			_hx_tmp4 = (this->hitCooldown <= 0);
            		}
            		else {
HXLINE( 107)			_hx_tmp4 = false;
            		}
HXDLIN( 107)		if (_hx_tmp4) {
HXLINE( 109)			shouldPlayGeneralAnim = false;
HXLINE( 111)			if (this->controls->digitalSets->get(::flixel::addons::input::DigitalEvent_obj::JUST_PRESSED_dyn()).StaticCast<  ::flixel::addons::input::FlxDigitalSet >()->check(::game::ingame::ControlEnum_obj::LEFTHIT_dyn())) {
HXLINE( 112)				animationToPlay = HX_("lefthit",ac,bc,f4,f4);
            			}
HXLINE( 113)			if (this->controls->digitalSets->get(::flixel::addons::input::DigitalEvent_obj::JUST_PRESSED_dyn()).StaticCast<  ::flixel::addons::input::FlxDigitalSet >()->check(::game::ingame::ControlEnum_obj::RIGHTHIT_dyn())) {
HXLINE( 114)				animationToPlay = HX_("righthit",f7,0b,2f,e4);
            			}
HXLINE( 115)			if (this->controls->digitalSets->get(::flixel::addons::input::DigitalEvent_obj::JUST_PRESSED_dyn()).StaticCast<  ::flixel::addons::input::FlxDigitalSet >()->check(::game::ingame::ControlEnum_obj::KICK_dyn())) {
HXLINE( 116)				animationToPlay = HX_("kick",c6,d7,09,47);
            			}
HXLINE( 118)			this->playAnimation(animationToPlay,true);
HXLINE( 120)			this->onSwing->dispatch();
HXLINE( 122)			this->hitCooldown = ((Float)0.15);
HXLINE( 124)			this->holdTimer = ((Float)0.45);
            		}
            		else {
HXLINE( 128)			if ((this->holdTimer <= 0)) {
HXLINE( 129)				this->playAnimation(animationToPlay,false);
            			}
            		}
HXLINE( 132)		this->snapMovement();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,updateMovement,(void))

void Player_obj::setX(Float value){
            	HX_STACKFRAME(&_hx_pos_75eade814ed16d30_136_setX)
HXDLIN( 136)		this->set_x((this->internalX = value));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,setX,(void))

void Player_obj::setY(Float value){
            	HX_STACKFRAME(&_hx_pos_75eade814ed16d30_139_setY)
HXDLIN( 139)		this->set_y((this->internalY = value));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,setY,(void))

Float Player_obj::snap(Float m,::hx::Null< int >  __o_pixelAmount){
            		int pixelAmount = __o_pixelAmount.Default(4);
            	HX_STACKFRAME(&_hx_pos_75eade814ed16d30_142_snap)
HXDLIN( 142)		return (( (Float)((::Math_obj::ceil((::Math_obj::abs(m) / ( (Float)(pixelAmount) ))) * pixelAmount)) ) * (m / ::Math_obj::abs(m)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Player_obj,snap,return )

void Player_obj::snapMovement(){
            	HX_STACKFRAME(&_hx_pos_75eade814ed16d30_145_snapMovement)
HXLINE( 146)		this->set_x(( (Float)(::Math_obj::floor(this->snap(this->internalX,null()))) ));
HXLINE( 147)		this->set_y(( (Float)(::Math_obj::floor(this->snap(this->internalY,null()))) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,snapMovement,(void))


::hx::ObjectPtr< Player_obj > Player_obj::__new() {
	::hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Player_obj > Player_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Player_obj *__this = (Player_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "game.ingame.Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(controls,"controls");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(holdTimer,"holdTimer");
	HX_MARK_MEMBER_NAME(hitCooldown,"hitCooldown");
	HX_MARK_MEMBER_NAME(canMove,"canMove");
	HX_MARK_MEMBER_NAME(onSwing,"onSwing");
	HX_MARK_MEMBER_NAME(offsetMap,"offsetMap");
	HX_MARK_MEMBER_NAME(internalX,"internalX");
	HX_MARK_MEMBER_NAME(internalY,"internalY");
	 ::flixel::addons::effects::FlxSkewedSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(controls,"controls");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(holdTimer,"holdTimer");
	HX_VISIT_MEMBER_NAME(hitCooldown,"hitCooldown");
	HX_VISIT_MEMBER_NAME(canMove,"canMove");
	HX_VISIT_MEMBER_NAME(onSwing,"onSwing");
	HX_VISIT_MEMBER_NAME(offsetMap,"offsetMap");
	HX_VISIT_MEMBER_NAME(internalX,"internalX");
	HX_VISIT_MEMBER_NAME(internalY,"internalY");
	 ::flixel::addons::effects::FlxSkewedSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Player_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"setX") ) { return ::hx::Val( setX_dyn() ); }
		if (HX_FIELD_EQ(inName,"setY") ) { return ::hx::Val( setY_dyn() ); }
		if (HX_FIELD_EQ(inName,"snap") ) { return ::hx::Val( snap_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return ::hx::Val( speed ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"canMove") ) { return ::hx::Val( canMove ); }
		if (HX_FIELD_EQ(inName,"onSwing") ) { return ::hx::Val( onSwing ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"controls") ) { return ::hx::Val( controls ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"holdTimer") ) { return ::hx::Val( holdTimer ); }
		if (HX_FIELD_EQ(inName,"offsetMap") ) { return ::hx::Val( offsetMap ); }
		if (HX_FIELD_EQ(inName,"internalX") ) { return ::hx::Val( internalX ); }
		if (HX_FIELD_EQ(inName,"internalY") ) { return ::hx::Val( internalY ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"hitCooldown") ) { return ::hx::Val( hitCooldown ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addAnimation") ) { return ::hx::Val( addAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"initPosition") ) { return ::hx::Val( initPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"snapMovement") ) { return ::hx::Val( snapMovement_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"playAnimation") ) { return ::hx::Val( playAnimation_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateMovement") ) { return ::hx::Val( updateMovement_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Player_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"canMove") ) { canMove=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onSwing") ) { onSwing=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal0 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"controls") ) { controls=inValue.Cast<  ::game::ingame::PlayerControls >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"holdTimer") ) { holdTimer=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetMap") ) { offsetMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"internalX") ) { internalX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"internalY") ) { internalY=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"hitCooldown") ) { hitCooldown=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("controls",76,86,bc,37));
	outFields->push(HX_("speed",87,97,69,81));
	outFields->push(HX_("holdTimer",06,82,13,a9));
	outFields->push(HX_("hitCooldown",1e,59,9e,a1));
	outFields->push(HX_("canMove",41,cb,b8,66));
	outFields->push(HX_("onSwing",1f,c5,4a,1c));
	outFields->push(HX_("offsetMap",c9,e8,bd,41));
	outFields->push(HX_("internalX",7b,ee,23,3f));
	outFields->push(HX_("internalY",7c,ee,23,3f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::game::ingame::PlayerControls */ ,(int)offsetof(Player_obj,controls),HX_("controls",76,86,bc,37)},
	{::hx::fsFloat,(int)offsetof(Player_obj,speed),HX_("speed",87,97,69,81)},
	{::hx::fsFloat,(int)offsetof(Player_obj,holdTimer),HX_("holdTimer",06,82,13,a9)},
	{::hx::fsFloat,(int)offsetof(Player_obj,hitCooldown),HX_("hitCooldown",1e,59,9e,a1)},
	{::hx::fsBool,(int)offsetof(Player_obj,canMove),HX_("canMove",41,cb,b8,66)},
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal0 */ ,(int)offsetof(Player_obj,onSwing),HX_("onSwing",1f,c5,4a,1c)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Player_obj,offsetMap),HX_("offsetMap",c9,e8,bd,41)},
	{::hx::fsFloat,(int)offsetof(Player_obj,internalX),HX_("internalX",7b,ee,23,3f)},
	{::hx::fsFloat,(int)offsetof(Player_obj,internalY),HX_("internalY",7c,ee,23,3f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_("controls",76,86,bc,37),
	HX_("speed",87,97,69,81),
	HX_("holdTimer",06,82,13,a9),
	HX_("hitCooldown",1e,59,9e,a1),
	HX_("canMove",41,cb,b8,66),
	HX_("onSwing",1f,c5,4a,1c),
	HX_("offsetMap",c9,e8,bd,41),
	HX_("internalX",7b,ee,23,3f),
	HX_("internalY",7c,ee,23,3f),
	HX_("addAnimation",a3,10,89,4a),
	HX_("playAnimation",70,42,7a,e5),
	HX_("initPosition",d9,27,b1,6f),
	HX_("updateMovement",58,78,61,35),
	HX_("setX",76,92,50,4c),
	HX_("setY",77,92,50,4c),
	HX_("snap",4a,56,57,4c),
	HX_("snapMovement",99,f1,4e,e8),
	::String(null()) };

::hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	Player_obj _hx_dummy;
	Player_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("game.ingame.Player",3c,cb,46,6f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Player_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
} // end namespace ingame
