// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_backend_AssetManager
#include <backend/AssetManager.h>
#endif
#ifndef INCLUDED_backend_Camera
#include <backend/Camera.h>
#endif
#ifndef INCLUDED_backend_GameSprite
#include <backend/GameSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxSkewedSprite
#include <flixel/addons/effects/FlxSkewedSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_game_ingame_Background
#include <game/ingame/Background.h>
#endif
#ifndef INCLUDED_game_ingame_Player
#include <game/ingame/Player.h>
#endif
#ifndef INCLUDED_game_states_TestState
#include <game/states/TestState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_61664ba18e1107e8_11_new,"game.states.TestState","new",0x01a76a81,"game.states.TestState.new","game/states/TestState.hx",11,0x787e422f)
HX_LOCAL_STACK_FRAME(_hx_pos_61664ba18e1107e8_21_create,"game.states.TestState","create",0xb148177b,"game.states.TestState.create","game/states/TestState.hx",21,0x787e422f)
HX_LOCAL_STACK_FRAME(_hx_pos_61664ba18e1107e8_49_update,"game.states.TestState","update",0xbc3e3688,"game.states.TestState.update","game/states/TestState.hx",49,0x787e422f)
namespace game{
namespace states{

void TestState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_61664ba18e1107e8_11_new)
HXDLIN(  11)		super::__construct();
            	}

Dynamic TestState_obj::__CreateEmpty() { return new TestState_obj; }

void *TestState_obj::_hx_vtable = 0;

Dynamic TestState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TestState_obj > _hx_result = new TestState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TestState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x53f84467) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x53f84467;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void TestState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_61664ba18e1107e8_21_create)
HXLINE(  22)		this->super::create();
HXLINE(  24)		this->ui =  ::backend::Camera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  25)		this->ui->bgColor = 0;
HXLINE(  26)		::flixel::FlxG_obj::cameras->add(this->ui,false).StaticCast<  ::backend::Camera >();
HXLINE(  28)		this->player =  ::game::ingame::Player_obj::__alloc( HX_CTX );
HXLINE(  29)		this->player->initPosition();
HXLINE(  31)		this->background =  ::game::ingame::Background_obj::__alloc( HX_CTX ,2,this->player);
HXLINE(  33)		this->add(this->background);
HXLINE(  34)		this->add(this->player);
HXLINE(  36)		this->info =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  37)		 ::flixel::text::FlxText _hx_tmp = this->info;
HXDLIN(  37)		_hx_tmp->set_font(::backend::AssetManager_obj::getFont(HX_("default",c1,d8,c3,9b),null()));
HXLINE(  38)		this->info->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXLINE(  39)		this->info->set_borderSize(((Float)1.5));
HXLINE(  40)		this->info->set_borderColor(-16777216);
HXLINE(  41)		this->info->set_camera(this->ui);
HXLINE(  42)		this->info->set_size(50);
HXLINE(  43)		this->add(this->info);
HXLINE(  45)		::flixel::FlxG_obj::camera->pixelPerfectRender = true;
            	}


void TestState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_61664ba18e1107e8_49_update)
HXLINE(  50)		this->super::update(elapsed);
HXLINE(  52)		{
HXLINE(  52)			 ::flixel::math::FlxBasePoint this1 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN(  52)			this1->set_x(((this->player->x - (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))) + 64));
HXDLIN(  52)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(  54)		 ::flixel::text::FlxText _hx_tmp = this->info;
HXDLIN(  54)		 ::flixel::math::FlxBasePoint _this = this->player->getPosition(null());
HXDLIN(  54)		 ::Dynamic value = _this->x;
HXDLIN(  54)		 ::flixel::util::LabelValuePair _this1 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(  54)		_this1->label = HX_("x",78,00,00,00);
HXDLIN(  54)		_this1->value = value;
HXDLIN(  54)		 ::Dynamic value1 = _this->y;
HXDLIN(  54)		 ::flixel::util::LabelValuePair _this2 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN(  54)		_this2->label = HX_("y",79,00,00,00);
HXDLIN(  54)		_this2->value = value1;
HXDLIN(  54)		::String _hx_tmp1 = ((HX_("PLAYER POSITION: ",ee,59,10,f2) + ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(2)->init(0,_this1)->init(1,_this2))) + HX_("\nHOLD TIMER: ",b4,b0,55,99));
HXDLIN(  54)		_hx_tmp->set_text((_hx_tmp1 + this->player->holdTimer));
            	}



::hx::ObjectPtr< TestState_obj > TestState_obj::__new() {
	::hx::ObjectPtr< TestState_obj > __this = new TestState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TestState_obj > TestState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TestState_obj *__this = (TestState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TestState_obj), true, "game.states.TestState"));
	*(void **)__this = TestState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TestState_obj::TestState_obj()
{
}

void TestState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestState);
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(info,"info");
	HX_MARK_MEMBER_NAME(ui,"ui");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TestState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(info,"info");
	HX_VISIT_MEMBER_NAME(ui,"ui");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TestState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ui") ) { return ::hx::Val( ui ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"info") ) { return ::hx::Val( info ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return ::hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return ::hx::Val( background ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TestState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ui") ) { ui=inValue.Cast<  ::backend::Camera >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"info") ) { info=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::game::ingame::Player >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast<  ::game::ingame::Background >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("player",61,eb,b8,37));
	outFields->push(HX_("info",6e,38,bb,45));
	outFields->push(HX_("ui",54,66,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TestState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::game::ingame::Background */ ,(int)offsetof(TestState_obj,background),HX_("background",ee,93,1d,26)},
	{::hx::fsObject /*  ::game::ingame::Player */ ,(int)offsetof(TestState_obj,player),HX_("player",61,eb,b8,37)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(TestState_obj,info),HX_("info",6e,38,bb,45)},
	{::hx::fsObject /*  ::backend::Camera */ ,(int)offsetof(TestState_obj,ui),HX_("ui",54,66,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TestState_obj_sStaticStorageInfo = 0;
#endif

static ::String TestState_obj_sMemberFields[] = {
	HX_("background",ee,93,1d,26),
	HX_("player",61,eb,b8,37),
	HX_("info",6e,38,bb,45),
	HX_("ui",54,66,00,00),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class TestState_obj::__mClass;

void TestState_obj::__register()
{
	TestState_obj _hx_dummy;
	TestState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("game.states.TestState",0f,16,26,64);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TestState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TestState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
} // end namespace states
